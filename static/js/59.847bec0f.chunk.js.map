{"version":3,"sources":["app/views/adminView/counsellor/add/CounsellorAdd.jsx","app/views/users/AddUser.js"],"names":["FlexBox","styled","Box","display","alignItems","Container","theme","margin","breakpoints","down","marginBottom","StyledAvatar","Avatar","width","height","border","TextField","TextValidator","UploadButton","SelectValidator","marginTop","Button","flexDirection","justifyContent","borderRadius","borderColor","StyledProgress","CircularProgress","position","top","left","CancelButton","color","backgroundColor","CounsellorAdd","props","navigate","useNavigate","useState","firstName","lastName","email","area_code","phone_number","traumas","logo","logo_image","counsellorInfo","setCounsellorInfo","traumaList","setTraumaList","loading","setLoading","roles","setRoles","traumasError","setTraumasError","isTouched","setIsTouched","open","setOpen","status","message","statusInfo","setStatusInfo","openModal","setOpenModal","msg","setMsg","formEl","useRef","handleChange","event","persist","target","name","value","useEffect","ValidatorForm","addValidationRule","length","isNaN","a","getTraumaList","resp","error","data","getAllUserRoles","console","log","map","item","type","removeValidationRule","getBase64","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","upload","result","onerror","handleFileUpload","e","files","includes","base64","toast","uploadFile","formData","FormData","append","access_token","localStorage","accessToken","fetch","method","headers","authorization","body","response","text","JSON","parse","handleSubmit","traumaCodes","find","el","attributes","trauma_code","id","options","counsellor","first_name","last_name","publishedAt","moment","format","split","slice","user","confirmed","blocked","role","url","createCounsellor","then","catch","err","handleTraumas","style","padding","className","ref","onSubmit","onError","container","rowSpacing","columnSpacing","lg","md","sm","xs","autoFocus","label","onChange","fullWidth","validators","errorMessages","sx","mt","labelId","multiple","input","onBlur","disabled","i","trauma_name","spacing","src","variant","component","hidden","accept","marginLeft","onClick","gap","flexWrap","mr","size","current","resetValidations","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","severity","onConfirmDialogClose","onYesClick","AddUser","userRole","setUserRole","inputEl","scrollIntoView","mb","val","row","control","labelPlacement","breadcrumb"],"mappings":"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","file":"static/js/59.847bec0f.chunk.js","sourcesContent":["import {\n    Alert,\n    Button,\n    Icon,\n    Grid,\n    MenuItem,\n    Select,\n    OutlinedInput,\n    InputLabel,\n    FormControl,\n    Avatar,\n    CircularProgress,\n    Snackbar\n} from '@mui/material'\nimport { styled, Box } from '@mui/system'\nimport React, { useState, useEffect, useRef } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { ValidatorForm, TextValidator, SelectValidator  } from 'react-material-ui-form-validator'\nimport { Breadcrumb } from 'app/components';\nimport moment from 'moment';\n\nimport {\n    createCounsellor,\n    getTraumaList,\n    getAllUserRoles\n} from 'app/services/userService';\nimport SessionModal from 'app/components/SessionModal/SessionModal';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './CounsellorAdd.css';\nimport '../../../users/Users.css';\n\nconst FlexBox = styled(Box)(() => ({\n    display: 'flex',\n    alignItems: 'center',\n}))\n\nconst Container = styled('div')(({ theme }) => ({\n    margin: '30px',\n    [theme.breakpoints.down('sm')]: {\n        margin: '16px',\n    },\n    '& .breadcrumb': {\n        marginBottom: '30px',\n        [theme.breakpoints.down('sm')]: {\n            marginBottom: '16px',\n        },\n    },\n}))\nconst StyledAvatar = styled(Avatar)(() => ({\n    width: '120px !important',\n    height: '120px !important',\n    border: '2px'\n}))\n\nconst TextField = styled(TextValidator)(() => ({\n    width: '100%',\n    marginBottom: '16px',\n}))\n\nconst SelectField = styled(SelectValidator)(() => ({\n    width: '100%',\n    marginBottom: '16px',\n    marginTop: '8px'\n}))\n\nconst UploadButton = styled(Button)(() => ({\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 120,\n    height: 120,\n    borderRadius: \"50%\",\n    borderColor: '#3498db',\n    // borderStyle: 'dotted'\n}))\n\nconst StyledProgress = styled(CircularProgress)(() => ({\n    position: 'absolute',\n    top: '6px',\n    left: '25px',\n}))\n\nconst CancelButton = styled(Button)(() => ({\n    display: 'block',\n    color: '#fff',\n    marginTop: '20px',\n    width: '86px',\n    backgroundColor: '#e15260',\n    '&:hover': {\n        backgroundColor: '#cc2333',\n        color: '#fff'\n    }\n}))\n\nconst CounsellorAdd = (props) => {\n    const navigate = useNavigate()\n    const [counsellorInfo, setCounsellorInfo] = useState({\n        firstName: '',\n        lastName: '',\n        email: '',\n        area_code:\"\",\n        phone_number: '',\n        traumas: [],\n        logo: null,\n        logo_image: ''\n    });\n    const [traumaList, setTraumaList] = useState([]);\n    const [loading, setLoading] = useState(false)\n    const [roles, setRoles] = useState(null);\n    const [traumasError, setTraumasError] = useState('');\n    const [isTouched, setIsTouched] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [statusInfo, setStatusInfo] = useState({\n        status: 'success',\n        message: ''\n    });\n    const [openModal, setOpenModal] = useState(false);\n    const [msg, setMsg] = useState(''); \n    const formEl = useRef();\n\n    useEffect(() => {\n        ValidatorForm.addValidationRule('REQUIRED', (value) => {\n            if(value.length === 0){\n                return false;\n            }\n            return true;\n        })\n\n        ValidatorForm.addValidationRule('MAX_CODE_LENGTH', (value) => {\n            if(value && value.length !== 3){\n                return false;\n            }\n            return true;\n        }) ;\n\n        ValidatorForm.addValidationRule('VALID_INPUT', (value) => {\n            if(value && isNaN(value)){\n                return false;\n            }\n            return true;\n        });\n\n        ValidatorForm.addValidationRule('MAX_PHONE_LENGTH', (value) => {\n            if(value && value.length !== 7) {\n                return false;\n            }\n            return true;\n        });\n\n        ValidatorForm.addValidationRule('MAX_POSTAL_CODE', (value) => {\n            if(value && value.length !== 5) {\n                return false;\n            }\n            return true;\n        })\n        ; (async () => {\n            try {\n                const resp = await getTraumaList();\n                if(resp?.error?.name === 'UnauthorizedError'){\n                    setOpenModal(true);\n                    setMsg('Your session has expired. You will be logged out.');\n                }  else {\n                    if (resp && resp.data) {\n                        setTraumaList(resp.data);\n                    }\n                }\n    \n                const { roles } = await getAllUserRoles();\n                console.log(\"ROLES\",roles)\n                if (roles && roles.length > 0){\n                    roles.map((item) => {\n                        if(item.type === 'provider' || item.type === \"counsellor\"){\n                            setRoles(item)\n                        }\n                    })\n                }\n            } catch (err) {\n                console.log('err', err);\n            }\n        })();\n        return () => {\n            ValidatorForm.removeValidationRule('REQUIRED');\n            ValidatorForm.removeValidationRule('MAX_CODE_LENGTH');\n            ValidatorForm.removeValidationRule('VALID_INPUT');\n            ValidatorForm.removeValidationRule('MAX_PHONE_LENGTH');\n            ValidatorForm.removeValidationRule('MAX_POSTAL_CODE');\n        }\n    }, [])\n    function handleChange(event) {\n        event.persist()\n        setCounsellorInfo({\n            ...counsellorInfo,\n            [event.target.name]: event.target.value,\n        })\n    }\n\n    const getBase64 = function (file) {\n        return new Promise((resolve) => {\n            let reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = function (upload) {\n                resolve(upload.target.result);\n            };\n            reader.onerror = function (error) {\n                console.log('Error: ', error);\n            };\n        });\n    };\n\n    const handleFileUpload = async (e) => {\n        const file = e.target.files[0];\n        const fileTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/svg', 'image/svg+xml'];\n        if (fileTypes.includes(file.type)) {\n            file.base64 = await getBase64(file);\n            setCounsellorInfo({ ...counsellorInfo, logo: file });\n        } else {\n            toast.error('Only files with following extensions are allowed: jpeg, jpg, png, svg', {\n                theme: 'colored'\n            });\n        }\n    }\n\n    const uploadFile = async (file) => {\n        const formData = new FormData();\n        formData.append('files', file);\n\n        let access_token = '';\n        if (localStorage.accessToken) {\n            access_token = localStorage.accessToken;\n        }\n\n        let response = await fetch('http://localhost:1337/api/upload', {\n            method: 'post',\n            headers: {\n                authorization: 'Bearer ' + access_token\n            },\n            body: formData\n        });\n\n\n        let upload = await response.text();\n\n        return JSON.parse(upload);\n\n    }\n\n    const clearFields = () => {\n        formEl.current.resetValidations();\n        setCounsellorInfo({\n            ...counsellorInfo,\n            firstName: '',\n            lastName: '',\n            email: '',\n            area_code,\n            phone_number: '',\n            traumas: [],\n            logo: null,\n            logo_image: '',\n        })\n        navigate(-1);\n    }\n\n    const handleSubmit = async (event) => {\n        const {\n            firstName,\n            lastName,\n            email,\n            area_code,\n            phone_number,\n            traumas,\n            logo,\n            // logo_image,\n            // center_type\n        } = counsellorInfo;\n\n        if(traumas.length === 0) {\n            return;\n        }\n\n        setLoading(true)\n        let upload;\n\n        if (logo) {\n            upload = await uploadFile(logo);\n        }\n\n        // const traumaObj = traumaList.find(el => el.attributes.trauma_code === traumas);\n        const traumaCodes = traumas.map((item) => {\n            return traumaList.find((el) => {\n                if (el && el.attributes && el.attributes.trauma_code === item) {\n                    return el.id\n                }\n            });\n        })\n        // const center_type_obj = centerTypes.find(el => el.attributes.center_type_id === center_type);\n\n        let options = {\n            counsellor: {\n                data: {\n                    name: firstName + ' ' + lastName,\n                    first_name: firstName,\n                    last_name: lastName,\n                    email: email,\n                    area_code: area_code,\n                    phone_number: phone_number,\n                    status:\"Approved\",\n                    traumas: traumaCodes,\n                    publishedAt: moment().format().split('T')[0] + ' ' + moment().format().split('T')[1].slice(0, 8)\n                }\n            },\n            traumas: traumaCodes,\n            // center_type_id: center_type_obj.attributes.center_type_id,\n            user: {\n                data: {\n                    email: email,\n                    confirmed: true,\n                    blocked: false,\n                    role: roles.id\n                }\n            }\n        };\n\n        if (logo) {\n            options.counsellor.data.logo_image = upload[0].url || '';\n        }\n\n        createCounsellor(options)\n            .then(resp => {\n                setLoading(false);\n                if(resp?.error?.name === 'UnauthorizedError'){\n                    setOpenModal(true);\n                    setMsg('Your session has expired. You will be logged out.');\n                } else {\n                    setOpen(true);\n                    setStatusInfo({\n                        ...statusInfo,\n                        status: resp && resp.status === 'success' ? 'success' : 'error',\n                        message: resp && resp.message || ''\n                    })\n                }\n            }).catch(err => {\n                setLoading(false)\n                setOpen(true);\n                setStatusInfo({\n                    ...statusInfo,\n                    status: 'error',\n                    message: 'Something went wrong'\n                })\n            })\n    }\n\n    const handleTraumas = () => {\n        if(!isTouched) {\n            setIsTouched(true);\n        }\n        const { traumas } = counsellorInfo;\n        let err = '';\n        if(traumas.length === 0) {\n            err = 'This field is required!';\n        }\n        setTraumasError(err);\n    }\n\n\n    const {\n        firstName,\n        lastName,\n        email,\n        area_code,\n        phone_number,\n        traumas,\n        logo\n    } = counsellorInfo;\n\n\n    return <>\n        <Container>\n            {/* {!props.breadcrumb && <Breadcrumb\n                routeSegments={[\n                    { name: \"Counselors\", path: \"/counsellors\" },\n                    { name: \"Add Counselor\" }\n                ]}\n            />} */}\n            <h1 style={{ marginTop: '0px', marginBottom: '10px', padding: '0px'}}>Add Provider</h1>\n            <div className='center-card'>\n                <ValidatorForm\n                    ref={formEl}\n                    onSubmit={handleSubmit}\n                    onError={() => null}\n                >\n                    <Grid container rowSpacing={2} columnSpacing={6}>\n                        <Grid item lg={6} md={6} sm={12} xs={12}>\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"first_name\"\n                                name=\"firstName\"\n                                label=\"First Name*\"\n                                type=\"text\"\n                                value={firstName}\n                                onChange={handleChange}\n                                fullWidth\n                                validators={['REQUIRED']}\n                                errorMessages={['This field is required']}\n                            />\n                        </Grid>\n                        <Grid item lg={6} md={6} sm={12} xs={12}>\n                            <TextField\n                                margin=\"dense\"\n                                id=\"last_name\"\n                                name=\"lastName\"\n                                label=\"Last Name*\"\n                                type=\"text\"\n                                value={lastName}\n                                onChange={handleChange}\n                                fullWidth\n                                validators={['REQUIRED']}\n                                errorMessages={['This field is required']}\n                            />\n                        </Grid>\n                    </Grid>\n\n                    <Grid container rowSpacing={2} columnSpacing={6}>\n                        <Grid item lg={6} md={6} sm={12} xs={12}>\n                            <TextField\n                                margin=\"dense\"\n                                id=\"email\"\n                                name=\"email\"\n                                label=\"Email*\"\n                                type=\"email\"\n                                value={email}\n                                onChange={handleChange}\n                                fullWidth\n                                validators={['REQUIRED', 'isEmail']}\n                                errorMessages={[\n                                    'This field is required',\n                                    'email is not valid',\n                                ]}\n                            />\n                        </Grid>\n                        <Grid item lg={6} md={6} sm={12} xs={12}>\n                            <Grid container>\n                                <Grid item xs={3} sm={3} md={3} lg={3}>\n                                    <TextField\n                                        margin=\"dense\"\n                                        id=\"area_code\"\n                                        name=\"area_code\"\n                                        label=\"Area Code*\"\n                                        type=\"text\"\n                                        value={area_code}\n                                        onChange={handleChange}\n                                        fullWidth\n                                        validators={['REQUIRED', 'VALID_INPUT', 'MAX_CODE_LENGTH']}\n                                        errorMessages={['This field is required', 'Invalid area code', 'Area code should have 3 digits']}\n                                        // validators={['required']}\n                                        // errorMessages={['This field is required']}\n                                    />\n                                </Grid>\n                                <Grid item xs={1} sm={1} md={1} lg={1}>\n                                    <div className='phone_line'>&nbsp;</div>\n                                </Grid>\n                                <Grid item xs={8} sm={8} md={8} lg={8}>\n                                    <TextField\n                                        margin=\"dense\"\n                                        id=\"phone_number\"\n                                        name=\"phone_number\"\n                                        label=\"Phone Number*\"\n                                        type=\"text\"\n                                        value={phone_number}\n                                        onChange={handleChange}\n                                        fullWidth\n                                        validators={['REQUIRED', 'VALID_INPUT','MAX_PHONE_LENGTH']}\n                                        errorMessages={['This field is required', 'Invalid phone number', 'Phone number must be of 7 digits']}\n                                        // validators={['required']}\n                                        // errorMessages={['This field is required']}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    <Grid container rowSpacing={2} columnSpacing={6}>\n                        <Grid item lg={6} md={6} sm={12} xs={12}>\n                            <FormControl sx={{ mt: 2, width: 250 }} error={traumas.length ? false: (isTouched ? true: false)}>\n                                <InputLabel \n                                    id={\n                                        (traumas.length === 0 && isTouched) ? \n                                        \"demo-simple-select-error-label\" :    \n                                        \"open-select-label\"\n                                    }\n                                >\n                                    Trauma Type*\n                                </InputLabel>\n                                <Select\n                                    labelId=\"open-select-label\"\n                                    margin=\"dense\"\n                                    id=\"center_type\"\n                                    name=\"traumas\"\n                                    multiple\n                                    value={traumas}\n                                    input={<OutlinedInput label=\"Trauma Type\" />}\n                                    style={{ borderColor: '#FF3D57'}}\n                                    // InputLabelProps={{shrink: false}}\n                                    onChange={(e) => {\n                                        const { target: { value }} = e;\n                                        setTraumasError(value.length === 0 ? 'This field is required!' : '');\n                                        setCounsellorInfo({ ...counsellorInfo, traumas: value })\n                                        setIsTouched(true);\n                                    }}\n                                    onBlur={() => handleTraumas()}\n                                    fullWidth\n                                    validators={['required']}\n                                >\n                                    <MenuItem disabled value=\"\">\n                                        <em>Trauma Type</em>\n                                    </MenuItem>\n                                    {traumaList && traumaList.map((item, i) => (\n                                        <MenuItem key={i} value={item.attributes.trauma_code}>{item.attributes.trauma_name}</MenuItem>\n                                    ))}\n                                </Select>\n                                {traumasError && (\n                                    <p className='form-err'>{traumasError}</p>\n                                )}\n                            </FormControl> \n                        </Grid>\n                    </Grid>\n\n                    <Grid container spacing={6}>\n                        <Grid item lg={12} style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\" }}>\n                            {logo ? <StyledAvatar\n                                src={logo.base64}\n                            /> : <UploadButton\n                                variant=\"contained\"\n                                component=\"label\"\n                            >\n                                <Icon>file_upload_outlined</Icon>\n                                Upload Logo\n                                <input\n                                    type=\"file\"\n                                    hidden\n                                    accept=\"image/*\"\n                                    multiple\n                                    onChange={handleFileUpload}\n                                />\n                            </UploadButton>}\n                            <Grid item style={{ flexDirection: \"column\" }}>\n                                <Button\n                                    variant=\"contained\"\n                                    component=\"label\"\n                                    color=\"inherit\"\n                                    sx={{ marginLeft: '15px', marginTop: '15px', height: '35px', marginBottom: '16px' }}\n                                    onClick={() => setCounsellorInfo({ ...counsellorInfo, logo: null, logo_image: '' })}\n                                >\n                                    Reset Logo\n                                </Button>\n                            </Grid>\n\n                        </Grid>\n                    </Grid>\n                    <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\n                        {/* <Button sx={{ display: 'block', marginTop: '20px' }} color=\"primary\" variant=\"contained\" type=\"submit\">\n                            <Span sx={{ pl: 1, textTransform: 'capitalize' }}>\n                                Submit\n                            </Span>\n                        </Button> */}\n                        <FlexBox flexWrap=\"wrap\">\n                            <Box mr={2} position=\"relative\">\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled={loading}\n                                    type=\"submit\"\n                                    onClick={() => handleTraumas()}\n                                >\n                                    Submit\n                                </Button>\n\n                                {loading && (\n                                    <StyledProgress\n                                        size={24}\n                                        className=\"buttonProgress\"\n                                    />\n                                )}\n\n                            </Box>\n                            <CancelButton sx={{ marginBottom: 2 }} onClick={() => clearFields()}>\n                                Cancel\n                            </CancelButton>\n                        </FlexBox>\n\n\n                    </div>\n                </ValidatorForm>\n                <Snackbar\n                    open={open}\n                    anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n                    autoHideDuration={3000}\n                    onClose={() => {\n                        setOpen(false)\n                        navigate('/counsellors');\n                    }}\n                >\n                    <Alert\n                        onClose={() => {\n                            setOpen(false)\n                            navigate('/counsellors');\n                        }}\n                        variant=\"filled\"\n                        severity={statusInfo.status}\n                        sx={{ width: '100%' }}\n                    >\n                        {statusInfo.message}\n                    </Alert>\n                </Snackbar>\n                <SessionModal\n                    open={openModal}\n                    text={msg}\n                    onConfirmDialogClose={() => {\n                        setMsg('');\n                        setOpenModal(false);\n                    }}\n                    onYesClick={() => {\n                        setMsg('');\n                        setOpenModal(false);\n                    }}\n                />\n            </div>\n        </Container>\n    </>\n}\n\nexport default CounsellorAdd","import React, { useState, useEffect, useRef } from 'react';\nimport {\n    Radio,\n    RadioGroup,\n    FormControlLabel\n} from '@mui/material';\nimport AddCenter from './AddCenter';\nimport CounsellorAdd from '../adminView/counsellor/add/CounsellorAdd';\n\nconst AddUser = () => {\n    const [userRole, setUserRole] = useState('Center');\n    const inputEl = useRef();\n\n    useEffect(() => {\n        inputEl.current.scrollIntoView();\n    }, []);\n\n    const handleUserRole = (e) => {\n        let val = e.target.value;\n        setUserRole(val);\n        inputEl.current.scrollIntoView();\n    }\n\n    return (\n        <div className=\"user-container\" ref={inputEl}>\n            <div style={{ margin: '15px', padding: '0px' }}>\n                <h1 style={{ margin: '0px', marginBottom: '15px'}}>Add User</h1>\n                <RadioGroup\n                    sx={{ mb: 2 }}\n                    value={userRole}\n                    name=\"userRole\"\n                    onChange={handleUserRole}\n                    row\n                >\n                    <FormControlLabel\n                        value=\"Center\"\n                        control={<Radio color=\"secondary\" />}\n                        label=\"Add Center\"\n                        labelPlacement=\"end\"\n                    />\n                    <FormControlLabel\n                        value=\"Counsellor\"\n                        control={<Radio color=\"secondary\" />}\n                        label=\"Add Provider\"\n                        labelPlacement=\"end\"\n                    />\n                </RadioGroup>\n                {userRole === 'Center' && (\n                    <AddCenter />\n                )}\n                {userRole === 'Counsellor' && (\n                    <CounsellorAdd breadcrumb={false} />\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default AddUser;"],"sourceRoot":""}