{"version":3,"sources":["../node_modules/@mui/material/internal/svg-icons/Close.js","../node_modules/@mui/material/Alert/alertClasses.js","../node_modules/@mui/material/Alert/Alert.js","../node_modules/@mui/material/internal/svg-icons/SuccessOutlined.js","../node_modules/@mui/material/internal/svg-icons/ReportProblemOutlined.js","../node_modules/@mui/material/internal/svg-icons/ErrorOutline.js","../node_modules/@mui/material/internal/svg-icons/InfoOutlined.js","app/views/users/EditCenter.js"],"names":["createSvgIcon","_jsx","d","getAlertUtilityClass","slot","generateUtilityClass","_CloseIcon","alertClasses","generateUtilityClasses","_excluded","AlertRoot","styled","Paper","name","overridesResolver","props","styles","ownerState","root","variant","capitalize","color","severity","theme","getColor","palette","mode","darken","lighten","getBackgroundColor","_extends","typography","body2","backgroundColor","display","padding","light","icon","main","border","fontWeight","fontWeightMedium","dark","AlertIcon","marginRight","fontSize","opacity","AlertMessage","message","AlertAction","action","alignItems","marginLeft","defaultIconMapping","success","SuccessOutlinedIcon","warning","ReportProblemOutlinedIcon","error","ErrorOutlineIcon","info","InfoOutlinedIcon","Alert","React","inProps","ref","useThemeProps","children","className","closeText","iconMapping","onClose","role","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","_jsxs","elevation","clsx","IconButton","size","title","onClick","CloseIcon","TextField","TextValidator","width","marginBottom","SelectField","SelectValidator","marginTop","StyledAvatar","Avatar","height","CancelButton","Button","UploadButton","flexDirection","justifyContent","borderRadius","borderColor","StyledProgress","CircularProgress","position","top","left","EditCenter","navigate","useNavigate","useState","firstName","lastName","email","area_code","phone_number","country","state","city","postal_code","street_address1","street_address2","username","logo","logo_image","center_id","user_id","center_type","domain","state_id","center_type_id","centerInfo","setCenterInfo","statesList","setStatesList","centerTypes","setCenterTypes","loading","setLoading","open","setOpen","status","statusInfo","setStatusInfo","formEl","useRef","handleChange","event","persist","target","value","useEffect","ValidatorForm","addValidationRule","length","isNaN","id","window","location","href","split","a","getAllStates","resp","fetchCenterTypes","response","data","getCenterById","centerResp","console","log","first_name","last_name","user","removeValidationRule","getBase64","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","upload","result","onerror","handleFileUpload","e","files","includes","type","base64","toast","uploadFile","formData","FormData","append","access_token","localStorage","accessToken","fetch","method","headers","authorization","body","text","JSON","parse","handleSubmit","stateObj","find","el","center_type_obj","attributes","options","center","url","editCenter","then","catch","err","style","onSubmit","onError","container","rowSpacing","columnSpacing","item","lg","md","sm","xs","autoFocus","margin","label","onChange","fullWidth","validators","errorMessages","map","i","src","component","hidden","accept","multiple","sx","gap","disabled","anchorOrigin","vertical","horizontal","autoHideDuration"],"mappings":"iHAAA,wBASeA,gBAA4BC,cAAK,OAAQ,CACtDC,EAAG,0GACD,U,+JCVG,SAASC,EAAqBC,GACnC,OAAOC,YAAqB,WAAYD,GAE1C,ICDIE,EDEWC,EADMC,YAAuB,WAAY,CAAC,OAAQ,SAAU,OAAQ,UAAW,SAAU,gBAAiB,aAAc,gBAAiB,cAAe,WAAY,kBAAmB,eAAgB,kBAAmB,gBAAiB,WAAY,kBAAmB,eAAgB,kBAAmB,kB,wBEG7SR,cAA4BC,cAAK,OAAQ,CACtDC,EAAG,8OACD,mBCFWF,cAA4BC,cAAK,OAAQ,CACtDC,EAAG,qFACD,yBCFWF,cAA4BC,cAAK,OAAQ,CACtDC,EAAG,4KACD,gBCFWF,cAA4BC,cAAK,OAAQ,CACtDC,EAAG,8MACD,gB,SJJEO,EAAY,CAAC,SAAU,WAAY,YAAa,YAAa,QAAS,OAAQ,cAAe,UAAW,OAAQ,WAAY,WAoC5HC,EAAYC,YAAOC,IAAO,CAC9BC,KAAM,WACNT,KAAM,OACNU,kBAAmB,SAACC,EAAOC,GACzB,IACEC,EACEF,EADFE,WAEF,MAAO,CAACD,EAAOE,KAAMF,EAAOC,EAAWE,SAAUH,EAAO,GAAD,OAAIC,EAAWE,SAAf,OAAyBC,YAAWH,EAAWI,OAASJ,EAAWK,eAP5GX,EASf,YAGG,IAFJY,EAEI,EAFJA,MACAN,EACI,EADJA,WAEMO,EAAkC,UAAvBD,EAAME,QAAQC,KAAmBC,IAASC,IACrDC,EAA4C,UAAvBN,EAAME,QAAQC,KAAmBE,IAAUD,IAChEN,EAAQJ,EAAWI,OAASJ,EAAWK,SAC7C,OAAOQ,YAAS,GAAIP,EAAMQ,WAAWC,MAAO,CAC1CC,gBAAiB,cACjBC,QAAS,OACTC,QAAS,YACRd,GAAgC,aAAvBJ,EAAWE,SAApB,aACDE,MAAOG,EAASD,EAAME,QAAQJ,GAAOe,MAAO,IAC5CH,gBAAiBJ,EAAmBN,EAAME,QAAQJ,GAAOe,MAAO,KAF/D,aAGM7B,EAAa8B,MAAS,CAC3BhB,MAA8B,SAAvBE,EAAME,QAAQC,KAAkBH,EAAME,QAAQJ,GAAOiB,KAAOf,EAAME,QAAQJ,GAAOe,QAEzFf,GAAgC,aAAvBJ,EAAWE,SAApB,aACDE,MAAOG,EAASD,EAAME,QAAQJ,GAAOe,MAAO,IAC5CG,OAAQ,aAAF,OAAehB,EAAME,QAAQJ,GAAOe,QAFzC,aAGM7B,EAAa8B,MAAS,CAC3BhB,MAA8B,SAAvBE,EAAME,QAAQC,KAAkBH,EAAME,QAAQJ,GAAOiB,KAAOf,EAAME,QAAQJ,GAAOe,QAEzFf,GAAgC,WAAvBJ,EAAWE,SAAwB,CAC7CE,MAAO,OACPmB,WAAYjB,EAAMQ,WAAWU,iBAC7BR,gBAAwC,SAAvBV,EAAME,QAAQC,KAAkBH,EAAME,QAAQJ,GAAOqB,KAAOnB,EAAME,QAAQJ,GAAOiB,UAGhGK,EAAYhC,YAAO,MAAO,CAC9BE,KAAM,WACNT,KAAM,OACNU,kBAAmB,SAACC,EAAOC,GAAR,OAAmBA,EAAOqB,OAH7B1B,CAIf,CACDiC,YAAa,GACbT,QAAS,QACTD,QAAS,OACTW,SAAU,GACVC,QAAS,KAELC,EAAepC,YAAO,MAAO,CACjCE,KAAM,WACNT,KAAM,UACNU,kBAAmB,SAACC,EAAOC,GAAR,OAAmBA,EAAOgC,UAH1BrC,CAIlB,CACDwB,QAAS,UAELc,EAActC,YAAO,MAAO,CAChCE,KAAM,WACNT,KAAM,SACNU,kBAAmB,SAACC,EAAOC,GAAR,OAAmBA,EAAOkC,SAH3BvC,CAIjB,CACDuB,QAAS,OACTiB,WAAY,aACZhB,QAAS,eACTiB,WAAY,OACZR,aAAc,IAEVS,EAAqB,CACzBC,QAAsBrD,cAAKsD,EAAqB,CAC9CV,SAAU,YAEZW,QAAsBvD,cAAKwD,EAA2B,CACpDZ,SAAU,YAEZa,MAAoBzD,cAAK0D,EAAkB,CACzCd,SAAU,YAEZe,KAAmB3D,cAAK4D,EAAkB,CACxChB,SAAU,aAGRiB,EAAqBC,cAAiB,SAAeC,EAASC,GAClE,IAAMlD,EAAQmD,YAAc,CAC1BnD,MAAOiD,EACPnD,KAAM,aAINqC,EAWEnC,EAXFmC,OACAiB,EAUEpD,EAVFoD,SACAC,EASErD,EATFqD,UAHF,EAYIrD,EARFsD,iBAJF,MAIc,QAJd,EAKEhD,EAOEN,EAPFM,MACAgB,EAMEtB,EANFsB,KANF,EAYItB,EALFuD,mBAPF,MAOgBjB,EAPhB,EAQEkB,EAIExD,EAJFwD,QARF,EAYIxD,EAHFyD,YATF,MASS,QATT,IAYIzD,EAFFO,gBAVF,MAUa,UAVb,IAYIP,EADFI,eAXF,MAWY,WAXZ,EAaMsD,EAAQC,YAA8B3D,EAAON,GAE7CQ,EAAaa,YAAS,GAAIf,EAAO,CACrCM,QACAC,WACAH,YAGIwD,EA5HkB,SAAA1D,GACxB,IACEE,EAIEF,EAJFE,QACAE,EAGEJ,EAHFI,MACAC,EAEEL,EAFFK,SACAqD,EACE1D,EADF0D,QAEIC,EAAQ,CACZ1D,KAAM,CAAC,OAAD,UAAYC,GAAZ,OAAsBC,YAAWC,GAASC,IAA1C,UAA0DH,IAChEkB,KAAM,CAAC,QACPW,QAAS,CAAC,WACVE,OAAQ,CAAC,WAEX,OAAO2B,YAAeD,EAAOzE,EAAsBwE,GA+GnCG,CAAkB7D,GAClC,OAAoB8D,eAAMrE,EAAWoB,YAAS,CAC5C0C,KAAMA,EACNQ,UAAW,EACX/D,WAAYA,EACZmD,UAAWa,YAAKN,EAAQzD,KAAMkD,GAC9BH,IAAKA,GACJQ,EAAO,CACRN,SAAU,EAAU,IAAT9B,EAA8BpC,cAAK0C,EAAW,CACvD1B,WAAYA,EACZmD,UAAWO,EAAQtC,KACnB8B,SAAU9B,GAAQiC,EAAYhD,IAAa+B,EAAmB/B,KAC3D,KAAmBrB,cAAK8C,EAAc,CACzC9B,WAAYA,EACZmD,UAAWO,EAAQ3B,QACnBmB,SAAUA,IACE,MAAVjB,EAA8BjD,cAAKgD,EAAa,CAClDmB,UAAWO,EAAQzB,OACnBiB,SAAUjB,IACP,KAAgB,MAAVA,GAAkBqB,EAAuBtE,cAAKgD,EAAa,CACpEhC,WAAYA,EACZmD,UAAWO,EAAQzB,OACnBiB,SAAuBlE,cAAKiF,IAAY,CACtCC,KAAM,QACN,aAAcd,EACde,MAAOf,EACPhD,MAAO,UACPgE,QAASd,EACTJ,SAAU7D,IAAeA,EAA0BL,cAAKqF,IAAW,CACjEzC,SAAU,eAGX,YAoGMiB,O,sQK3PTyB,EAAY5E,YAAO6E,gBAAP7E,EAAsB,iBAAO,CAC3C8E,MAAO,OACPC,aAAc,WAGZC,EAAchF,YAAOiF,kBAAPjF,EAAwB,iBAAO,CAC/C8E,MAAO,OACPC,aAAc,OACdG,UAAW,UAGTC,EAAenF,YAAOoF,IAAPpF,EAAe,iBAAO,CACvC8E,MAAO,mBACPO,OAAQ,uBAGNC,EAAetF,YAAOuF,IAAPvF,EAAe,iBAAO,CACvCuB,QAAS,QACTb,MAAO,OACPwE,UAAW,OACXJ,MAAO,OACPxD,gBAAiB,UACjB,UAAW,CACPA,gBAAiB,UACjBZ,MAAO,YAGT8E,EAAexF,YAAOuF,IAAPvF,EAAe,iBAAO,CACvCuB,QAAS,OACTkE,cAAe,SACfC,eAAgB,SAChBlD,WAAY,SACZsC,MAAO,IACPO,OAAQ,IACRM,aAAc,MACdC,YAAa,cAIXC,EAAiB7F,YAAO8F,IAAP9F,EAAyB,iBAAO,CACnD+F,SAAU,WACVC,IAAK,MACLC,KAAM,WA+uBKC,UA5uBI,SAAC9F,GAChB,IAAM+F,EAAWC,cACjB,EAAsCC,mBAAS,CAC3CC,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,UAAW,GACXC,aAAc,GACdC,QAAS,MACTC,MAAO,GACPC,KAAM,GACNC,YAAa,GACbC,gBAAiB,GACjBC,gBAAiB,GACjBC,SAAU,GACVC,KAAM,KACNC,WAAY,GACZC,UAAW,GACXC,QAAS,GACTC,YAAa,GACbC,OAAQ,GACRC,SAAU,GACVC,eAAgB,KApBpB,mBAAQC,EAAR,KAAoBC,EAApB,KAsBA,EAAoCtB,mBAAS,IAA7C,mBAAOuB,EAAP,KAAmBC,EAAnB,KACA,EAAsCxB,mBAAS,IAA/C,mBAAOyB,EAAP,KAAoBC,EAApB,KACA,EAA8B1B,oBAAS,GAAvC,mBAAO2B,EAAP,KAAgBC,EAAhB,KACA,EAAwB5B,oBAAS,GAAjC,mBAAO6B,EAAP,KAAaC,EAAb,KACA,EAAoC9B,mBAAS,CACzC+B,OAAQ,UACR/F,QAAS,KAFb,mBAAOgG,EAAP,KAAmBC,EAAnB,KAIMC,EAASC,mBAmGf,SAASC,EAAaC,GAClBA,EAAMC,UACNhB,EAAc,2BACPD,GADM,kBAERgB,EAAME,OAAO1I,KAAOwI,EAAME,OAAOC,SApG1CC,qBAAU,WACNC,gBAAcC,kBAAkB,YAAY,SAACH,GACzC,OAAoB,IAAjBA,EAAMI,UAMbF,gBAAcC,kBAAkB,mBAAmB,SAACH,GAChD,OAAGA,GAA0B,IAAjBA,EAAMI,UAMtBF,gBAAcC,kBAAkB,eAAe,SAACH,GAC5C,OAAGA,IAASK,MAAML,MAMtBE,gBAAcC,kBAAkB,oBAAoB,SAACH,GACjD,OAAGA,GAA0B,IAAjBA,EAAMI,UAMtBF,gBAAcC,kBAAkB,mBAAmB,SAACH,GAChD,OAAGA,GAA0B,IAAjBA,EAAMI,UAMtB,IAAIE,EAAKC,OAAOC,SAASC,KAAKC,MAAM,KAAK,GAgDzC,OA/CE,sBAAC,gCAAAC,EAAA,+EAEwBC,cAFxB,cAEWC,EAFX,SAIS7B,EAAc6B,GAJvB,SAO4BC,cAP5B,WAOWC,EAPX,SAQoBA,EAASC,MACpB9B,EAAe6B,EAASC,OAGzBV,EAZR,wBAaSlB,GAAW,GAbpB,UAckC6B,YAAcX,GAdhD,QAceY,EAdf,OAeSC,QAAQC,IAAI,aAAcF,GACvBA,GACCpC,EAAc,CACVrB,UAAWyD,EAAWG,WACtB3D,SAAUwD,EAAWI,UACrB3D,MAAOuD,EAAWvD,MAClBC,UAAWsD,EAAWtD,UACtBC,aAAcqD,EAAWrD,aACzBC,QAASoD,EAAWpD,QACpBC,MAAOmD,EAAWnD,OAASmD,EAAWnD,MAAMY,SAC5CX,KAAMkD,EAAWlD,KACjBC,YAAaiD,EAAWjD,YACxBC,gBAAiBgD,EAAWhD,gBAC5BC,gBAAiB+C,EAAW/C,iBAAmB,GAC/CC,SAAW8C,EAAWK,MAAQL,EAAWK,KAAKnD,UAAa,GAC3DE,WAAY4C,EAAW5C,YAAc,GACrCC,UAAW2C,EAAWZ,GACtB9B,QAAS0C,EAAWK,MAAQL,EAAWK,KAAKjB,GAC5C7B,YAAcyC,EAAWzC,aAAeyC,EAAWzC,YAAYG,gBAAmB,cAClFF,OAAQwC,EAAWxC,OACnBC,SAAUuC,GAAcA,EAAWnD,MAAMuC,GACzC1B,eAAgBsC,GAAcA,EAAWzC,YAAY6B,KAG7DlB,GAAW,GAvCpB,0DA0CKA,GAAW,GACX+B,QAAQC,IAAI,MAAZ,MA3CL,yDAAD,GA+CK,WACHlB,gBAAcsB,qBAAqB,YACnCtB,gBAAcsB,qBAAqB,mBACnCtB,gBAAcsB,qBAAqB,eACnCtB,gBAAcsB,qBAAqB,oBACnCtB,gBAAcsB,qBAAqB,sBAGxC,IAYH,IAAMC,EAAY,SAAUC,GACxB,OAAO,IAAIC,SAAQ,SAACC,GAChB,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,cAAcL,GACrBG,EAAOG,OAAS,SAAUC,GACtBL,EAAQK,EAAOlC,OAAOmC,SAE1BL,EAAOM,QAAU,SAAUjI,GACvBiH,QAAQC,IAAI,UAAWlH,QAK7BkI,GAAgB,uCAAG,WAAOC,GAAP,eAAA1B,EAAA,yDACfe,EAAOW,EAAEtC,OAAOuC,MAAM,IACV,CAAC,aAAc,YAAa,YAAa,YAAa,iBAC3DC,SAASb,EAAKc,MAHN,gCAIGf,EAAUC,GAJb,OAIjBA,EAAKe,OAJY,OAKjB3D,EAAc,2BAAID,GAAL,IAAiBR,KAAMqD,EAAMpD,WAAY,MALrC,uBAOjBoE,IAAMxI,MAAM,wEAAyE,CACjFnC,MAAO,YARM,4CAAH,sDAahB4K,GAAU,uCAAG,WAAMjB,GAAN,qBAAAf,EAAA,6DACTiC,EAAW,IAAIC,UACZC,OAAO,QAASpB,GAErBqB,EAAe,GAChBC,aAAaC,cACZF,EAAeC,aAAaC,aANjB,SASMC,MAAM,mCAAoC,CAC3DC,OAAQ,OACRC,QAAS,CACLC,cAAe,UAAYN,GAE/BO,KAAMV,IAdK,cASX7B,EATW,gBAkBIA,EAASwC,OAlBb,cAkBXtB,EAlBW,yBAoBRuB,KAAKC,MAAMxB,IApBH,4CAAH,sDAwBVyB,GAAY,uCAAG,WAAO7D,GAAP,qDAAAc,EAAA,yDAEblD,EAgBAoB,EAhBApB,UACAC,EAeAmB,EAfAnB,SACAC,EAcAkB,EAdAlB,MACAC,EAaAiB,EAbAjB,UACAC,EAYAgB,EAZAhB,aACAC,EAWAe,EAXAf,QACAC,EAUAc,EAVAd,MACAC,EASAa,EATAb,KACAC,EAQAY,EARAZ,YACAC,EAOAW,EAPAX,gBACAC,EAMAU,EANAV,gBACAE,EAKAQ,EALAR,KACAC,EAIAO,EAJAP,WACAC,EAGAM,EAHAN,UACAC,EAEAK,EAFAL,QACAC,EACAI,EADAJ,YAGJW,GAAW,IAGRf,EAvBc,gCAwBEsE,GAAWtE,GAxBb,OAwBb4D,EAxBa,cA2BX0B,EAAW5E,EAAW6E,MAAK,SAAAC,GAAE,OAAIA,EAAGlF,WAAaZ,KACjD+F,EAAkB7E,EAAY2E,MAAK,SAAAC,GAAE,OAAIA,EAAGE,WAAWnF,iBAAmBH,KAE5EuF,EAAU,CACVC,OAAQ,CACJjD,KAAM,CACFV,GAAI/B,EACJlH,KAAMoG,EAAY,IAAMC,EACxB2D,WAAY5D,EACZ6D,UAAW5D,EACXC,MAAOA,EACPC,UAAWA,EACXC,aAAcA,EACdC,QAASA,EACTC,MAAO4F,EAASrD,GAChBtC,KAAMA,EACNS,YAAaqF,EAAgBxD,GAC7BpC,gBAAiBA,EACjBC,gBAAiBA,EACjBF,YAAaA,EACbK,WAAYA,IAGpBK,SAAUgF,EAAShF,SACnBC,eAAgBkF,EAAgBC,WAAWnF,eAC3C2C,KAAM,CACFP,KAAM,CACFV,GAAI9B,EACJb,MAAOA,KAKhBU,IACC2F,EAAQC,OAAOjD,KAAK1C,WAAa2D,EAAO,GAAGiC,KAAO,IAGtDC,YAAWH,EAASzF,GACnB6F,MAAK,SAAAvD,GACFzB,GAAW,GACXE,GAAQ,GACRG,EAAc,2BACPD,GADM,IAETD,OAAQsB,GAAwB,YAAhBA,EAAKtB,OAAuB,UAAY,QACxD/F,QAAO,OAAEqH,QAAF,IAAEA,OAAF,EAAEA,EAAMrH,cAEpB6K,OAAM,SAAAC,GACLlF,GAAW,GACXE,GAAQ,GACRG,EAAc,2BAAKD,GAAN,IAAkBD,OAAQ,QAAS/F,QAAS,6BA5E5C,4CAAH,sDAiFdiE,GAeAoB,EAfApB,UACAC,GAcAmB,EAdAnB,SACAC,GAaAkB,EAbAlB,MACAC,GAYAiB,EAZAjB,UACAC,GAWAgB,EAXAhB,aACAC,GAUAe,EAVAf,QACAC,GASAc,EATAd,MACAC,GAQAa,EARAb,KACAC,GAOAY,EAPAZ,YACAC,GAMAW,EANAX,gBACAC,GAKAU,EALAV,gBACAM,GAIAI,EAJAJ,YACAJ,GAGAQ,EAHAR,KACAC,GAEAO,EAFAP,WACAI,GACAG,EADAH,OAGJ,OACQ,sBAAK6F,MAAO,CAAE5L,QAAS,QAAvB,UACI,oBACI4L,MAAO,CACHlI,UAAW,MACXH,aAAc,OACdvD,QAAS,OAJjB,yBASA,qBAAKiC,UAAU,cAAf,SACI,eAAC,gBAAD,CACIH,IAAKiF,EACL8E,SAAUd,GACVe,QAAS,kBAAM,MAHnB,UAKI,eAAC,IAAD,CAAMC,WAAS,EAACC,WAAY,EAAGC,cAAe,EAA9C,UACI,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAArC,SACI,cAAClJ,EAAD,CACImJ,WAAS,EACTC,OAAO,QACP7E,GAAG,aACHjJ,KAAK,YACL+N,MAAM,cACN5C,KAAK,OACLxC,MAAOvC,GACP4H,SAAUzF,EACV0F,WAAS,EACTC,WAAY,CAAC,YACbC,cAAe,CAAC,8BAGxB,cAAC,IAAD,CAAMX,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAArC,SACI,cAAClJ,EAAD,CAEIoJ,OAAO,QACP7E,GAAG,YACHjJ,KAAK,WACL+N,MAAM,aACN5C,KAAK,OACLxC,MAAOtC,GACP2H,SAAUzF,EACV0F,WAAS,EACTC,WAAY,CAAC,YACbC,cAAe,CAAC,iCAI5B,eAAC,IAAD,CAAMd,WAAS,EAACC,WAAY,EAAGC,cAAe,EAA9C,UACI,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAArC,SACI,cAAClJ,EAAD,CAEIoJ,OAAO,QACP7E,GAAG,QACHjJ,KAAK,QACL+N,MAAM,SACN5C,KAAK,QACLxC,MAAOrC,GACP0H,SAAUzF,EACV0F,WAAS,EACTC,WAAY,CAAC,WAAY,WACzBC,cAAe,CACX,yBACA,0BAIZ,cAAC,IAAD,CAAMX,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAArC,SACI,eAAC,IAAD,CAAMP,WAAS,EAAf,UACI,cAAC,IAAD,CAAMG,MAAI,EAACI,GAAI,EAAGD,GAAI,EAAGD,GAAI,EAAGD,GAAI,EAApC,SACI,cAAC/I,EAAD,CAEIoJ,OAAO,QACP7E,GAAG,YACHjJ,KAAK,YACL+N,MAAM,aACN5C,KAAK,OACLxC,MAAOpC,GACPyH,SAAUzF,EACV0F,WAAS,EACTC,WAAY,CACR,WACA,cACA,mBAEJC,cAAe,CACX,yBACA,oBACA,sCAIZ,cAAC,IAAD,CAAMX,MAAI,EAACI,GAAI,EAAGD,GAAI,EAAGD,GAAI,EAAGD,GAAI,EAApC,SACI,qBAAKlK,UAAU,aAAf,oBAEJ,cAAC,IAAD,CAAMiK,MAAI,EAACI,GAAI,EAAGD,GAAI,EAAGD,GAAI,EAAGD,GAAI,EAApC,SACI,cAAC/I,EAAD,CAEIoJ,OAAO,QACP7E,GAAG,eACHjJ,KAAK,eACL+N,MAAM,gBACN5C,KAAK,OACLxC,MAAOnC,GACPwH,SAAUzF,EACV0F,WAAS,EACTC,WAAY,CACR,WACA,cACA,oBAEJC,cAAe,CACX,yBACA,uBACA,gDAQxB,eAAC,IAAD,CAAMd,WAAS,EAACC,WAAY,EAAGC,cAAe,EAA9C,UACI,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAArC,SAqBI,cAAC,IAAD,CAAaK,WAAS,EAAtB,SACI,cAACnJ,EAAD,CACImE,GAAG,qBACHN,MAAOlC,GACPsH,MAAM,WACNC,SAAU,SAAChD,GAAD,OACNvD,EAAc,2BACPD,GADM,IAETf,QAASuE,EAAEtC,OAAOC,UAG1B3I,KAAK,UACLkO,WAAY,CAAC,WAAY,YACzBC,cAAe,CACX,yBACA,0BAdR,SAiBI,cAAC,IAAD,CAAUxF,MAAM,MAAhB,iCAMZ,cAAC,IAAD,CAAM6E,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAArC,SACI,cAAC,IAAD,CAAaK,WAAS,EAAtB,SACI,eAACnJ,EAAD,CACImE,GAAG,qBACHN,MAAOjC,GACPqH,MAAM,SACNC,SAAU,SAAChD,GAAD,OACNvD,EAAc,2BACPD,GADM,IAETd,MAAOsE,EAAEtC,OAAOC,UAGxB3I,KAAK,QACLkO,WAAY,CAAC,WAAY,YACzBC,cAAe,CACX,yBACA,0BAdR,UAiBI,cAAC,IAAD,CAAUxF,MAAM,GAAhB,0BAGCjB,GACGA,EAAW0G,KAAI,SAACZ,EAAMa,GAAP,OACX,cAAC,IAAD,CAEI1F,MAAO6E,EAAKlG,SAFhB,SAIKkG,EAAKxN,MAHDqO,gBAWjC,eAAC,IAAD,CAAMhB,WAAS,EAACC,WAAY,EAAGC,cAAe,EAA9C,UACI,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAArC,SACI,cAAClJ,EAAD,CACIuE,GAAG,OAEH6E,OAAO,QACP9N,KAAK,OACL+N,MAAM,QACN5C,KAAK,OACLxC,MAAOhC,GACPqH,SAAUzF,EACV0F,WAAS,EACTC,WAAY,CAAC,YACbC,cAAe,CAAC,8BAGxB,cAAC,IAAD,CAAMX,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAArC,SACI,cAAClJ,EAAD,CAEIoJ,OAAO,QACP7E,GAAG,kBACHjJ,KAAK,kBACL+N,MAAM,mBACN5C,KAAK,OACLxC,MAAO9B,GACPmH,SAAUzF,EACV0F,WAAS,EACTC,WAAY,CAAC,YACbC,cAAe,CAAC,iCAK5B,eAAC,IAAD,CAAMd,WAAS,EAACC,WAAY,EAAGC,cAAe,EAA9C,UACI,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAArC,SACI,cAAClJ,EAAD,CAEIoJ,OAAO,QACP7E,GAAG,kBACHjJ,KAAK,kBACL+N,MAAM,6BACN5C,KAAK,OACLxC,MAAO7B,GACPkH,SAAUzF,EACV0F,WAAS,MAGjB,cAAC,IAAD,CAAMT,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAArC,SACI,cAAClJ,EAAD,CAEIoJ,OAAO,QACP7E,GAAG,cACHjJ,KAAK,cACL+N,MAAM,eACN5C,KAAK,OACLxC,MAAO/B,GACPoH,SAAUzF,EACV0F,WAAS,EACTC,WAAY,CACR,WACA,cACA,mBAEJC,cAAe,CACX,yBACA,sBACA,0CAMhB,cAAC,IAAD,CAAMd,WAAS,EAACC,WAAY,EAAGC,cAAe,EAA9C,SACI,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAArC,SACI,cAAC,IAAD,CAAaK,WAAS,EAAtB,SACI,eAACnJ,EAAD,CACImE,GAAG,qBACHN,MAAOvB,GACP2G,MAAM,sBACNC,SAAU,SAAChD,GAAD,OACNvD,EAAc,2BACPD,GADM,IAETJ,YAAa4D,EAAEtC,OAAOC,UAG9B3I,KAAK,cACLkO,WAAY,CAAC,WAAY,YACzBC,cAAe,CACX,yBACA,0BAdR,UAiBI,cAAC,IAAD,CAAUxF,MAAM,GAAhB,gCAGCf,GACGA,EAAYwG,KAAI,SAACZ,EAAMa,GAAP,OACZ,cAAC,IAAD,CAEI1F,MACI6E,EAAKd,WACAnF,eAJb,SAOKiG,EAAKd,WAAW1M,MANZqO,eAcjC,eAAC,IAAD,CACIb,MAAI,EACJC,GAAI,GACJP,MAAO,CACH7L,QAAS,OACTkE,cAAe,SACfC,eAAgB,SAChBlD,WAAY,SACZsC,MAAO,QARf,UAWKoC,IAAQC,GACL,cAAChC,EAAD,CACIqJ,IACItH,GACMA,GAAKoE,OACLnE,GACAI,GAASJ,GACT,mCAId,eAAC3B,EAAD,CACIhF,QAAQ,YACRiO,UAAU,QAFd,UAII,cAAC,IAAD,mCAJJ,cAMI,uBACIpD,KAAK,OACLqD,QAAM,EACNC,OAAO,UACPC,UAAQ,EACRV,SAAUjD,QAItB,cAAC,IAAD,CAAMyC,MAAI,EAACN,MAAO,CAAE3H,cAAe,UAAnC,SACI,cAAC,IAAD,CACIjF,QAAQ,YACRiO,UAAU,QACV/N,MAAM,UACNmO,GAAI,CAEA3J,UAAW,OACXG,OAAQ,OACRN,aAAc,QAElBL,QAAS,kBACLiD,EAAc,2BACPD,GADM,IAETR,KAAM,KACNC,WAAY,OAdxB,6BAiDR,sBACIiG,MAAO,CACH7L,QAAS,OACTiB,WAAY,SACZsM,IAAK,QAJb,UAOI,eAAC,IAAD,CACI/I,SAAS,WACT8I,GAAI,CAAEtN,QAAS,QAAS2D,UAAW,QAFvC,UAII,cAAC,IAAD,CACI6J,SAAU/G,EACVtH,MAAM,UACNF,QAAQ,YACR6K,KAAK,SAJT,oBAQCrD,GACG,cAACnC,EAAD,CACIrB,KAAM,GACNf,UAAU,sBAItB,cAAC6B,EAAD,CAAcZ,QAAS,kBAAMyB,GAAU,IAAvC,4BAMZ,cAAC,IAAD,CACI+B,KAAMA,EACN8G,aAAc,CAAEC,SAAU,MAAOC,WAAY,UAC7CC,iBAAkB,IAClBvL,QAAS,WACLuE,GAAQ,GACRhC,EAAS,kBANjB,SASI,cAAC,IAAD,CACIvC,QAAS,WACLuE,GAAQ,GACRhC,EAAS,kBAEb3F,QAAQ,SACRG,SAAU0H,EAAWD,OACrByG,GAAI,CAAE/J,MAAO,QAPjB,SASKuD,EAAWhG","file":"static/js/50.fe368ee0.chunk.js","sourcesContent":["import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n *\n * Alias to `Clear`.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getAlertUtilityClass(slot) {\n  return generateUtilityClass('MuiAlert', slot);\n}\nconst alertClasses = generateUtilityClasses('MuiAlert', ['root', 'action', 'icon', 'message', 'filled', 'filledSuccess', 'filledInfo', 'filledWarning', 'filledError', 'outlined', 'outlinedSuccess', 'outlinedInfo', 'outlinedWarning', 'outlinedError', 'standard', 'standardSuccess', 'standardInfo', 'standardWarning', 'standardError']);\nexport default alertClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _CloseIcon;\n\nconst _excluded = [\"action\", \"children\", \"className\", \"closeText\", \"color\", \"icon\", \"iconMapping\", \"onClose\", \"role\", \"severity\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { darken, lighten } from '@mui/system';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport Paper from '../Paper';\nimport alertClasses, { getAlertUtilityClass } from './alertClasses';\nimport IconButton from '../IconButton';\nimport SuccessOutlinedIcon from '../internal/svg-icons/SuccessOutlined';\nimport ReportProblemOutlinedIcon from '../internal/svg-icons/ReportProblemOutlined';\nimport ErrorOutlineIcon from '../internal/svg-icons/ErrorOutline';\nimport InfoOutlinedIcon from '../internal/svg-icons/InfoOutlined';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    variant,\n    color,\n    severity,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', `${variant}${capitalize(color || severity)}`, `${variant}`],\n    icon: ['icon'],\n    message: ['message'],\n    action: ['action']\n  };\n  return composeClasses(slots, getAlertUtilityClass, classes);\n};\n\nconst AlertRoot = styled(Paper, {\n  name: 'MuiAlert',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize(ownerState.color || ownerState.severity)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  const getColor = theme.palette.mode === 'light' ? darken : lighten;\n  const getBackgroundColor = theme.palette.mode === 'light' ? lighten : darken;\n  const color = ownerState.color || ownerState.severity;\n  return _extends({}, theme.typography.body2, {\n    backgroundColor: 'transparent',\n    display: 'flex',\n    padding: '6px 16px'\n  }, color && ownerState.variant === 'standard' && {\n    color: getColor(theme.palette[color].light, 0.6),\n    backgroundColor: getBackgroundColor(theme.palette[color].light, 0.9),\n    [`& .${alertClasses.icon}`]: {\n      color: theme.palette.mode === 'dark' ? theme.palette[color].main : theme.palette[color].light\n    }\n  }, color && ownerState.variant === 'outlined' && {\n    color: getColor(theme.palette[color].light, 0.6),\n    border: `1px solid ${theme.palette[color].light}`,\n    [`& .${alertClasses.icon}`]: {\n      color: theme.palette.mode === 'dark' ? theme.palette[color].main : theme.palette[color].light\n    }\n  }, color && ownerState.variant === 'filled' && {\n    color: '#fff',\n    fontWeight: theme.typography.fontWeightMedium,\n    backgroundColor: theme.palette.mode === 'dark' ? theme.palette[color].dark : theme.palette[color].main\n  });\n});\nconst AlertIcon = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Icon',\n  overridesResolver: (props, styles) => styles.icon\n})({\n  marginRight: 12,\n  padding: '7px 0',\n  display: 'flex',\n  fontSize: 22,\n  opacity: 0.9\n});\nconst AlertMessage = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Message',\n  overridesResolver: (props, styles) => styles.message\n})({\n  padding: '8px 0'\n});\nconst AlertAction = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Action',\n  overridesResolver: (props, styles) => styles.action\n})({\n  display: 'flex',\n  alignItems: 'flex-start',\n  padding: '4px 0 0 16px',\n  marginLeft: 'auto',\n  marginRight: -8\n});\nconst defaultIconMapping = {\n  success: /*#__PURE__*/_jsx(SuccessOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  warning: /*#__PURE__*/_jsx(ReportProblemOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  error: /*#__PURE__*/_jsx(ErrorOutlineIcon, {\n    fontSize: \"inherit\"\n  }),\n  info: /*#__PURE__*/_jsx(InfoOutlinedIcon, {\n    fontSize: \"inherit\"\n  })\n};\nconst Alert = /*#__PURE__*/React.forwardRef(function Alert(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAlert'\n  });\n\n  const {\n    action,\n    children,\n    className,\n    closeText = 'Close',\n    color,\n    icon,\n    iconMapping = defaultIconMapping,\n    onClose,\n    role = 'alert',\n    severity = 'success',\n    variant = 'standard'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    color,\n    severity,\n    variant\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(AlertRoot, _extends({\n    role: role,\n    elevation: 0,\n    ownerState: ownerState,\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other, {\n    children: [icon !== false ? /*#__PURE__*/_jsx(AlertIcon, {\n      ownerState: ownerState,\n      className: classes.icon,\n      children: icon || iconMapping[severity] || defaultIconMapping[severity]\n    }) : null, /*#__PURE__*/_jsx(AlertMessage, {\n      ownerState: ownerState,\n      className: classes.message,\n      children: children\n    }), action != null ? /*#__PURE__*/_jsx(AlertAction, {\n      className: classes.action,\n      children: action\n    }) : null, action == null && onClose ? /*#__PURE__*/_jsx(AlertAction, {\n      ownerState: ownerState,\n      className: classes.action,\n      children: /*#__PURE__*/_jsx(IconButton, {\n        size: \"small\",\n        \"aria-label\": closeText,\n        title: closeText,\n        color: \"inherit\",\n        onClick: onClose,\n        children: _CloseIcon || (_CloseIcon = /*#__PURE__*/_jsx(CloseIcon, {\n          fontSize: \"small\"\n        }))\n      })\n    }) : null]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Alert.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The action to display. It renders after the message, at the end of the alert.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Override the default label for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * The color of the component. Unless provided, the value is taken from the `severity` prop.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['error', 'info', 'success', 'warning']), PropTypes.string]),\n\n  /**\n   * Override the icon displayed before the children.\n   * Unless provided, the icon is mapped to the value of the `severity` prop.\n   * Set to `false` to remove the `icon`.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The component maps the `severity` prop to a range of different icons,\n   * for instance success to `<SuccessOutlined>`.\n   * If you wish to change this mapping, you can provide your own.\n   * Alternatively, you can use the `icon` prop to override the icon displayed.\n   */\n  iconMapping: PropTypes.shape({\n    error: PropTypes.node,\n    info: PropTypes.node,\n    success: PropTypes.node,\n    warning: PropTypes.node\n  }),\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * The ARIA role attribute of the element.\n   * @default 'alert'\n   */\n  role: PropTypes.string,\n\n  /**\n   * The severity of the alert. This defines the color and icon used.\n   * @default 'success'\n   */\n  severity: PropTypes.oneOf(['error', 'info', 'success', 'warning']),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['filled', 'outlined', 'standard']), PropTypes.string])\n} : void 0;\nexport default Alert;","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z\"\n}), 'SuccessOutlined');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z\"\n}), 'ReportProblemOutlined');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'ErrorOutline');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z\"\n}), 'InfoOutlined');","import React, { useState, useEffect, useRef } from 'react';\nimport { \n    Alert,\n    Icon,\n    Grid,\n    MenuItem,\n    Avatar,\n    Box,\n    CircularProgress,\n    Snackbar\n} from '@mui/material';\nimport { Span } from 'app/components/Typography'\nimport Button from '@mui/material/Button'\n// import TextField from '@mui/material/TextField'\nimport { styled } from '@mui/system'\nimport { useNavigate } from 'react-router-dom'\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport FormControl from '@mui/material/FormControl'\nimport { \n    getCenterById,\n    getAllStates,\n    fetchCenterTypes \n} from 'app/services/userService';\nimport { editCenter } from 'app/services/userService';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './Users.css';\nimport { SelectValidator } from 'react-material-ui-form-validator'\n\n\nconst TextField = styled(TextValidator)(() => ({\n    width: '100%',\n    marginBottom: '16px',\n}))\n\nconst SelectField = styled(SelectValidator)(() => ({\n    width: '100%',\n    marginBottom: '16px',\n    marginTop: '8px'\n}))\n\nconst StyledAvatar = styled(Avatar)(() => ({\n    width: '120px !important',\n    height: '120px !important',\n}))\n\nconst CancelButton = styled(Button)(() => ({\n    display: 'block',\n    color: '#fff',\n    marginTop: '20px',\n    width: '86px',\n    backgroundColor: '#e15260',\n    '&:hover': {\n        backgroundColor: '#cc2333',\n        color: '#fff'\n    }\n}))\nconst UploadButton = styled(Button)(() => ({\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 120,\n    height: 120,\n    borderRadius: \"50%\",\n    borderColor: '#3498db',\n    // borderStyle: 'dotted'\n}))\n\nconst StyledProgress = styled(CircularProgress)(() => ({\n    position: 'absolute',\n    top: '6px',\n    left: '25px',\n}))\n\nconst EditCenter = (props) => {\n    const navigate = useNavigate()\n    const [ centerInfo, setCenterInfo ] = useState({\n        firstName: '',\n        lastName: '',\n        email: '',\n        area_code: '',\n        phone_number: '',\n        country: 'usa',\n        state: '',\n        city: '',\n        postal_code: '',\n        street_address1: '',\n        street_address2: '',\n        username: '',\n        logo: null,\n        logo_image: '',\n        center_id: '',\n        user_id: '',\n        center_type: '',\n        domain: '',\n        state_id: '',\n        center_type_id: ''\n    });\n    const [statesList, setStatesList] = useState([]);\n    const [centerTypes, setCenterTypes] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [statusInfo, setStatusInfo] = useState({\n        status: 'success',\n        message: ''\n    });\n    const formEl = useRef();\n\n\n    useEffect(() => {\n        ValidatorForm.addValidationRule('REQUIRED', (value) => {\n            if(value.length === 0){\n                return false;\n            }\n            return true;\n        }) ;\n\n        ValidatorForm.addValidationRule('MAX_CODE_LENGTH', (value) => {\n            if(value && value.length !== 3){\n                return false;\n            }\n            return true;\n        }) ;\n\n        ValidatorForm.addValidationRule('VALID_INPUT', (value) => {\n            if(value && isNaN(value)){\n                return false;\n            }\n            return true;\n        });\n\n        ValidatorForm.addValidationRule('MAX_PHONE_LENGTH', (value) => {\n            if(value && value.length !== 7) {\n                return false;\n            }\n            return true;\n        });\n\n        ValidatorForm.addValidationRule('MAX_POSTAL_CODE', (value) => {\n            if(value && value.length !== 5) {\n                return false;\n            }\n            return true;\n        });\n\n        let id = window.location.href.split('=')[1];\n        ; (async () => {\n            try {\n                const resp = await getAllStates();\n                if(resp){\n                    setStatesList(resp);\n                }\n                \n                const response = await fetchCenterTypes();\n                if(response && response.data) {\n                    setCenterTypes(response.data);\n                }\n\n                if(id) {\n                    setLoading(true);\n                    const centerResp = await getCenterById(id);\n                    console.log('centerResp', centerResp);\n                    if(centerResp){\n                        setCenterInfo({\n                            firstName: centerResp.first_name,\n                            lastName: centerResp.last_name,\n                            email: centerResp.email,\n                            area_code: centerResp.area_code,\n                            phone_number: centerResp.phone_number,\n                            country: centerResp.country,\n                            state: centerResp.state && centerResp.state.state_id,\n                            city: centerResp.city,\n                            postal_code: centerResp.postal_code,\n                            street_address1: centerResp.street_address1,\n                            street_address2: centerResp.street_address2 || '',\n                            username: (centerResp.user && centerResp.user.username) || '',\n                            logo_image: centerResp.logo_image || '',\n                            center_id: centerResp.id,\n                            user_id: centerResp.user && centerResp.user.id,\n                            center_type: (centerResp.center_type && centerResp.center_type.center_type_id) || 'center_type',\n                            domain: centerResp.domain,\n                            state_id: centerResp && centerResp.state.id,\n                            center_type_id: centerResp && centerResp.center_type.id\n                        })\n                    }\n                    setLoading(false);\n                }\n            } catch(err) {\n                setLoading(false);\n                console.log('err', err);\n            }\n        })()\n\n        return () => {\n            ValidatorForm.removeValidationRule('REQUIRED');\n            ValidatorForm.removeValidationRule('MAX_CODE_LENGTH');\n            ValidatorForm.removeValidationRule('VALID_INPUT');\n            ValidatorForm.removeValidationRule('MAX_PHONE_LENGTH');\n            ValidatorForm.removeValidationRule('MAX_POSTAL_CODE');\n        }\n\n    }, [])\n\n\n\n    function handleChange(event) {\n        event.persist()\n        setCenterInfo({\n            ...centerInfo,\n            [event.target.name]: event.target.value,\n        })\n    }\n\n    const getBase64 = function (file) {\n        return new Promise((resolve) => {\n            let reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = function (upload) {\n                resolve(upload.target.result);\n            };\n            reader.onerror = function (error) {\n                console.log('Error: ', error);\n            };\n        });\n    };\n\n    const handleFileUpload = async (e) => {\n        const file = e.target.files[0];\n        const fileTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/svg', 'image/svg+xml'];\n        if(fileTypes.includes(file.type)){\n            file.base64 = await getBase64(file);\n            setCenterInfo({...centerInfo, logo: file, logo_image: '' });\n        } else {\n            toast.error('Only files with following extensions are allowed: jpeg, jpg, png, svg', {\n                theme: 'colored'\n            });\n        }\n    }\n\n    const uploadFile = async(file) => {\n        const formData = new FormData();\n        formData.append('files', file);\n        \n        let access_token = '';\n        if(localStorage.accessToken){\n            access_token = localStorage.accessToken;\n        }\n\n        let response = await fetch('http://localhost:1337/api/upload', {\n            method: 'post',\n            headers: {\n                authorization: 'Bearer ' + access_token\n            },\n            body: formData\n        });\n\n       \n        let upload = await response.text();\n\n        return JSON.parse(upload);\n\n    }\n\n    const handleSubmit = async (event) => {\n        const {\n            firstName,\n            lastName,\n            email,\n            area_code,\n            phone_number,\n            country,\n            state,\n            city,\n            postal_code,\n            street_address1,\n            street_address2,\n            logo,\n            logo_image,\n            center_id,\n            user_id,\n            center_type,\n        } = centerInfo;\n\n        setLoading(true);\n        let upload;\n\n        if(logo){\n            upload = await uploadFile(logo);\n        }\n\n        const stateObj = statesList.find(el => el.state_id === state);\n        const center_type_obj = centerTypes.find(el => el.attributes.center_type_id === center_type);\n\n        let options = {\n            center: {\n                data: {\n                    id: center_id,\n                    name: firstName + ' ' + lastName,\n                    first_name: firstName,\n                    last_name: lastName,\n                    email: email,\n                    area_code: area_code,\n                    phone_number: phone_number,\n                    country: country,\n                    state: stateObj.id,\n                    city: city,\n                    center_type: center_type_obj.id,\n                    street_address1: street_address1,\n                    street_address2: street_address2,\n                    postal_code: postal_code,\n                    logo_image: logo_image\n                }\n            },\n            state_id: stateObj.state_id,\n            center_type_id: center_type_obj.attributes.center_type_id,\n            user: {\n                data: {\n                    id: user_id,\n                    email: email,\n                }\n            }\n        };\n\n        if(logo){\n            options.center.data.logo_image = upload[0].url || '';\n        }\n\n        editCenter(options, center_id)\n        .then(resp => {\n            setLoading(false);\n            setOpen(true);\n            setStatusInfo({ \n                ...statusInfo, \n                status: resp && resp.status === 'success' ? 'success' : 'error', \n                message: resp?.message \n            });\n        }).catch(err => {\n            setLoading(false);\n            setOpen(true);\n            setStatusInfo({ ...statusInfo, status: 'error', message: 'Something went wrong'});\n        })\n    }\n\n    const {\n        firstName,\n        lastName,\n        email,\n        area_code,\n        phone_number,\n        country,\n        state,\n        city,\n        postal_code,\n        street_address1,\n        street_address2,\n        center_type,\n        logo,\n        logo_image,\n        domain\n    } = centerInfo;\n\n    return (\n            <div style={{ padding: '20px' }}>\n                <h1\n                    style={{\n                        marginTop: '0px',\n                        marginBottom: '10px',\n                        padding: '0px',\n                    }}\n                >\n                    Edit Center\n                </h1>\n                <div className=\"center-card\">\n                    <ValidatorForm\n                        ref={formEl}\n                        onSubmit={handleSubmit}\n                        onError={() => null}\n                    >\n                        <Grid container rowSpacing={2} columnSpacing={6}>\n                            <Grid item lg={6} md={6} sm={12} xs={12}>\n                                <TextField\n                                    autoFocus\n                                    margin=\"dense\"\n                                    id=\"first_name\"\n                                    name=\"firstName\"\n                                    label=\"First Name*\"\n                                    type=\"text\"\n                                    value={firstName}\n                                    onChange={handleChange}\n                                    fullWidth\n                                    validators={['REQUIRED']}\n                                    errorMessages={['This field is required']}\n                                />\n                            </Grid>\n                            <Grid item lg={6} md={6} sm={12} xs={12}>\n                                <TextField\n                                    // autoFocus\n                                    margin=\"dense\"\n                                    id=\"last_name\"\n                                    name=\"lastName\"\n                                    label=\"Last Name*\"\n                                    type=\"text\"\n                                    value={lastName}\n                                    onChange={handleChange}\n                                    fullWidth\n                                    validators={['REQUIRED']}\n                                    errorMessages={['This field is required']}\n                                />\n                            </Grid>\n                        </Grid>\n                        <Grid container rowSpacing={2} columnSpacing={6}>\n                            <Grid item lg={6} md={6} sm={12} xs={12}>\n                                <TextField\n                                    // autoFocus\n                                    margin=\"dense\"\n                                    id=\"email\"\n                                    name=\"email\"\n                                    label=\"Email*\"\n                                    type=\"email\"\n                                    value={email}\n                                    onChange={handleChange}\n                                    fullWidth\n                                    validators={['REQUIRED', 'isEmail']}\n                                    errorMessages={[\n                                        'This field is required',\n                                        'email is not valid',\n                                    ]}\n                                />\n                            </Grid>\n                            <Grid item lg={6} md={6} sm={12} xs={12}>\n                                <Grid container>\n                                    <Grid item xs={3} sm={3} md={3} lg={3}>\n                                        <TextField\n                                            // autoFocus\n                                            margin=\"dense\"\n                                            id=\"area_code\"\n                                            name=\"area_code\"\n                                            label=\"Area Code*\"\n                                            type=\"text\"\n                                            value={area_code}\n                                            onChange={handleChange}\n                                            fullWidth\n                                            validators={[\n                                                'REQUIRED',\n                                                'VALID_INPUT',\n                                                'MAX_CODE_LENGTH',\n                                            ]}\n                                            errorMessages={[\n                                                'This field is required',\n                                                'Invalid area code',\n                                                'Area code should have 3 digits',\n                                            ]}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={1} sm={1} md={1} lg={1}>\n                                        <div className=\"phone_line\">&nbsp;</div>\n                                    </Grid>\n                                    <Grid item xs={8} sm={8} md={8} lg={8}>\n                                        <TextField\n                                            // autoFocus\n                                            margin=\"dense\"\n                                            id=\"phone_number\"\n                                            name=\"phone_number\"\n                                            label=\"Phone Number*\"\n                                            type=\"text\"\n                                            value={phone_number}\n                                            onChange={handleChange}\n                                            fullWidth\n                                            validators={[\n                                                'REQUIRED',\n                                                'VALID_INPUT',\n                                                'MAX_PHONE_LENGTH',\n                                            ]}\n                                            errorMessages={[\n                                                'This field is required',\n                                                'Invalid phone number',\n                                                'Phone number must be of 7 digits',\n                                            ]}\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n\n                        <Grid container rowSpacing={2} columnSpacing={6}>\n                            <Grid item lg={6} md={6} sm={12} xs={12}>\n                                {/* <TextField\n                                    margin=\"dense\"\n                                    id=\"country\"\n                                    name=\"country\"\n                                    select\n                                    label={country === '' ? 'Select Country*' : ''}\n                                    InputLabelProps={{ shrink: false }}\n                                    value={country}\n                                    onChange={(e) =>\n                                        setCenterInfo({\n                                            ...centerInfo,\n                                            country: e.target.value,\n                                        })\n                                    }\n                                    fullWidth\n                                    validators={['required']}\n                                    errorMessages={['This field is required']}\n                                >\n                                    <MenuItem value=\"usa\">United States</MenuItem>\n                                </TextField> */}\n                                <FormControl fullWidth>\n                                    <SelectField\n                                        id=\"demo-simple-select\"\n                                        value={country}\n                                        label=\"Country*\"\n                                        onChange={(e) =>\n                                            setCenterInfo({\n                                                ...centerInfo,\n                                                country: e.target.value,\n                                            })\n                                        }\n                                        name=\"country\"\n                                        validators={['required', 'REQUIRED']}\n                                        errorMessages={[\n                                            'This field is required',\n                                            'This field is required'\n                                        ]}\n                                    >\n                                        <MenuItem value=\"usa\">\n                                            United States\n                                        </MenuItem>\n                                    </SelectField>\n                                </FormControl>\n                            </Grid>\n                            <Grid item lg={6} md={6} sm={12} xs={12}>\n                                <FormControl fullWidth>\n                                    <SelectField\n                                        id=\"demo-simple-select\"\n                                        value={state}\n                                        label=\"State*\"\n                                        onChange={(e) =>\n                                            setCenterInfo({\n                                                ...centerInfo,\n                                                state: e.target.value,\n                                            })\n                                        }\n                                        name=\"state\"\n                                        validators={['required', 'REQUIRED']}\n                                        errorMessages={[\n                                            'This field is required',\n                                            'This field is required'\n                                        ]}\n                                    >\n                                        <MenuItem value=\"\">\n                                            Select State\n                                        </MenuItem>\n                                        {statesList &&\n                                            statesList.map((item, i) => (\n                                                <MenuItem\n                                                    key={i}\n                                                    value={item.state_id}\n                                                >\n                                                    {item.name}\n                                                </MenuItem>\n                                            ))}\n                                    </SelectField>\n                                </FormControl>\n                            </Grid>\n                        </Grid>\n\n                        <Grid container rowSpacing={2} columnSpacing={6}>\n                            <Grid item lg={6} md={6} sm={12} xs={12}>\n                                <TextField\n                                    id=\"city\"\n                                    // autoFocus\n                                    margin=\"dense\"\n                                    name=\"city\"\n                                    label=\"City*\"\n                                    type=\"text\"\n                                    value={city}\n                                    onChange={handleChange}\n                                    fullWidth\n                                    validators={['REQUIRED']}\n                                    errorMessages={['This field is required']}\n                                />\n                            </Grid>\n                            <Grid item lg={6} md={6} sm={12} xs={12}>\n                                <TextField\n                                    // autoFocus\n                                    margin=\"dense\"\n                                    id=\"street_address1\"\n                                    name=\"street_address1\"\n                                    label=\"Street Address1*\"\n                                    type=\"text\"\n                                    value={street_address1}\n                                    onChange={handleChange}\n                                    fullWidth\n                                    validators={['REQUIRED']}\n                                    errorMessages={['This field is required']}\n                                />\n                            </Grid>\n                        </Grid>\n\n                        <Grid container rowSpacing={2} columnSpacing={6}>\n                            <Grid item lg={6} md={6} sm={12} xs={12}>\n                                <TextField\n                                    // autoFocus\n                                    margin=\"dense\"\n                                    id=\"street_address2\"\n                                    name=\"street_address2\"\n                                    label=\"Street Address2 (Optional)\"\n                                    type=\"text\"\n                                    value={street_address2}\n                                    onChange={handleChange}\n                                    fullWidth\n                                />\n                            </Grid>\n                            <Grid item lg={6} md={6} sm={12} xs={12}>\n                                <TextField\n                                    // autoFocus\n                                    margin=\"dense\"\n                                    id=\"postal_code\"\n                                    name=\"postal_code\"\n                                    label=\"Postal Code*\"\n                                    type=\"text\"\n                                    value={postal_code}\n                                    onChange={handleChange}\n                                    fullWidth\n                                    validators={[\n                                        'REQUIRED',\n                                        'VALID_INPUT',\n                                        'MAX_POSTAL_CODE',\n                                    ]}\n                                    errorMessages={[\n                                        'This field is required',\n                                        'Invalid postal code',\n                                        'Postal code must be of 5 digits',\n                                    ]}\n                                />\n                            </Grid>\n                        </Grid>\n\n                        <Grid container rowSpacing={2} columnSpacing={6}>\n                            <Grid item lg={6} md={6} sm={12} xs={12}>\n                                <FormControl fullWidth>\n                                    <SelectField\n                                        id=\"demo-simple-select\"\n                                        value={center_type}\n                                        label=\"Select Center Type*\"\n                                        onChange={(e) =>\n                                            setCenterInfo({\n                                                ...centerInfo,\n                                                center_type: e.target.value,\n                                            })\n                                        }\n                                        name=\"center_type\"\n                                        validators={['required', 'REQUIRED']}\n                                        errorMessages={[\n                                            'This field is required',\n                                            'This field is required'\n                                        ]}\n                                    >\n                                        <MenuItem value=\"\">\n                                            Select Center Type\n                                        </MenuItem>\n                                        {centerTypes &&\n                                            centerTypes.map((item, i) => (\n                                                <MenuItem\n                                                    key={i}\n                                                    value={\n                                                        item.attributes\n                                                            .center_type_id\n                                                    }\n                                                >\n                                                    {item.attributes.name}\n                                                </MenuItem>\n                                            ))}\n                                    </SelectField>\n                                </FormControl>\n                            </Grid>\n                        </Grid>\n\n                        <Grid\n                            item\n                            lg={12}\n                            style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                                justifyContent: 'center',\n                                alignItems: 'center',\n                                width: '100%',\n                            }}\n                        >\n                            {logo || logo_image ? (\n                                <StyledAvatar\n                                    src={\n                                        logo\n                                            ? logo.base64\n                                            : logo_image\n                                            ? domain + logo_image\n                                            : '/assets/images/upload-logo.png'\n                                    }\n                                />\n                            ) : (\n                                <UploadButton\n                                    variant=\"contained\"\n                                    component=\"label\"\n                                >\n                                    <Icon>file_upload_outlined</Icon>\n                                    Upload Logo\n                                    <input\n                                        type=\"file\"\n                                        hidden\n                                        accept=\"image/*\"\n                                        multiple\n                                        onChange={handleFileUpload}\n                                    />\n                                </UploadButton>\n                            )}\n                            <Grid item style={{ flexDirection: 'column' }}>\n                                <Button\n                                    variant=\"contained\"\n                                    component=\"label\"\n                                    color=\"inherit\"\n                                    sx={{\n                                        // marginLeft: '15px',\n                                        marginTop: '15px',\n                                        height: '35px',\n                                        marginBottom: '16px',\n                                    }}\n                                    onClick={() =>\n                                        setCenterInfo({\n                                            ...centerInfo,\n                                            logo: null,\n                                            logo_image: '',\n                                        })\n                                    }\n                                >\n                                    Reset Logo\n                                </Button>\n                            </Grid>\n                        </Grid>\n\n                        {/* <StyledAvatar\n                    src={logo ? logo.base64 : (logo_image ? (domain + logo_image) : \"/assets/images/upload-logo.png\")}\n                />\n                <Button\n                    variant=\"contained\"\n                    component=\"label\"\n                    sx={{ marginTop: '15px', height: '35px', marginBottom: '16px'}}\n                    >\n                    Upload Logo\n                    <input\n                        type=\"file\"\n                        hidden\n                        accept=\"image/*\"\n                        multiple\n                        onChange={handleFileUpload}\n                    />\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    component=\"label\"\n                    color=\"inherit\"\n                    sx={{ marginLeft: '15px', marginTop: '15px', height: '35px', marginBottom: '16px'}}\n                    onClick={() => setCenterInfo({ ...centerInfo, logo: null, logo_image: '' })}\n                >\n                    Reset Logo\n                </Button> */}\n                        <div\n                            style={{\n                                display: 'flex',\n                                alignItems: 'center',\n                                gap: '1rem',\n                            }}\n                        >\n                            <Box\n                                position=\"relative\"\n                                sx={{ display: 'block', marginTop: '20px' }}\n                            >\n                                <Button\n                                    disabled={loading}\n                                    color=\"primary\"\n                                    variant=\"contained\"\n                                    type=\"submit\"\n                                >\n                                    Submit\n                                </Button>\n                                {loading && (\n                                    <StyledProgress\n                                        size={24}\n                                        className=\"buttonProgress\"\n                                    />\n                                )}\n                            </Box>\n                            <CancelButton onClick={() => navigate(-1)}>\n                                Cancel\n                            </CancelButton>\n                        </div>\n                    </ValidatorForm>\n                </div>\n                <Snackbar\n                    open={open}\n                    anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n                    autoHideDuration={3000}\n                    onClose={() => {\n                        setOpen(false);\n                        navigate('/centers/list')\n                    }}\n                >\n                    <Alert\n                        onClose={() => {\n                            setOpen(false)\n                            navigate('/centers/list')\n                        }}\n                        variant=\"filled\"\n                        severity={statusInfo.status}\n                        sx={{ width: '100%' }}\n                    >\n                        {statusInfo.message}\n                    </Alert>\n                </Snackbar>\n            </div>\n    )\n}\n\nexport default EditCenter;"],"sourceRoot":""}