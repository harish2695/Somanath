{"version":3,"sources":["../node_modules/@mui/material/internal/svg-icons/Close.js","../node_modules/@mui/material/Alert/alertClasses.js","../node_modules/@mui/material/Alert/Alert.js","../node_modules/@mui/material/internal/svg-icons/SuccessOutlined.js","../node_modules/@mui/material/internal/svg-icons/ReportProblemOutlined.js","../node_modules/@mui/material/internal/svg-icons/ErrorOutline.js","../node_modules/@mui/material/internal/svg-icons/InfoOutlined.js","app/views/adminView/counsellor/edit/CounsellorEdit.jsx"],"names":["createSvgIcon","_jsx","d","getAlertUtilityClass","slot","generateUtilityClass","_CloseIcon","alertClasses","generateUtilityClasses","_excluded","AlertRoot","styled","Paper","name","overridesResolver","props","styles","ownerState","root","variant","capitalize","color","severity","theme","getColor","palette","mode","darken","lighten","getBackgroundColor","_extends","typography","body2","backgroundColor","display","padding","light","icon","main","border","fontWeight","fontWeightMedium","dark","AlertIcon","marginRight","fontSize","opacity","AlertMessage","message","AlertAction","action","alignItems","marginLeft","defaultIconMapping","success","SuccessOutlinedIcon","warning","ReportProblemOutlinedIcon","error","ErrorOutlineIcon","info","InfoOutlinedIcon","Alert","React","inProps","ref","useThemeProps","children","className","closeText","iconMapping","onClose","role","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","_jsxs","elevation","clsx","IconButton","size","title","onClick","CloseIcon","FlexBox","Box","StyledProgress","CircularProgress","position","top","left","Container","margin","breakpoints","down","marginBottom","StyledAvatar","Avatar","width","height","TextField","TextValidator","UploadButton","Button","flexDirection","justifyContent","borderRadius","borderColor","CancelButton","marginTop","CounsellorEdit","navigate","useNavigate","useState","firstName","lastName","email","area_code","phone_number","traumas","logo","logo_image","counsellor_id","user_id","domain","counsellorInfo","setCounsellorInfo","traumaList","setTraumaList","loading","setLoading","traumasError","setTraumasError","isTouched","setIsTouched","open","setOpen","roles","setRoles","status","statusInfo","setStatusInfo","formEl","useRef","handleChange","event","persist","target","value","useEffect","ValidatorForm","addValidationRule","length","id","window","location","href","split","a","getTraumaList","resp","data","getCounsellorById","counsellorResp","console","log","first_name","last_name","username","user","map","item","trauma_code","getAllUserRoles","forEach","type","removeValidationRule","getBase64","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","upload","result","onerror","handleFileUpload","e","files","includes","base64","toast","uploadFile","formData","FormData","append","access_token","localStorage","accessToken","fetch","method","headers","authorization","body","response","text","JSON","parse","handleSubmit","traumaCodes","find","el","attributes","options","counsellor","publishedAt","moment","format","slice","confirmed","blocked","url","editCounsellor","then","catch","err","style","onSubmit","onError","container","spacing","lg","md","sm","xs","sx","mt","autoFocus","label","onChange","fullWidth","validators","errorMessages","labelId","multiple","input","onBlur","handleTraumas","disabled","i","trauma_name","src","component","hidden","accept","gap","flexWrap","mr","anchorOrigin","vertical","horizontal","autoHideDuration"],"mappings":"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","file":"static/js/42.bffdb54a.chunk.js","sourcesContent":["import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n *\n * Alias to `Clear`.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getAlertUtilityClass(slot) {\n  return generateUtilityClass('MuiAlert', slot);\n}\nconst alertClasses = generateUtilityClasses('MuiAlert', ['root', 'action', 'icon', 'message', 'filled', 'filledSuccess', 'filledInfo', 'filledWarning', 'filledError', 'outlined', 'outlinedSuccess', 'outlinedInfo', 'outlinedWarning', 'outlinedError', 'standard', 'standardSuccess', 'standardInfo', 'standardWarning', 'standardError']);\nexport default alertClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _CloseIcon;\n\nconst _excluded = [\"action\", \"children\", \"className\", \"closeText\", \"color\", \"icon\", \"iconMapping\", \"onClose\", \"role\", \"severity\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { darken, lighten } from '@mui/system';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport Paper from '../Paper';\nimport alertClasses, { getAlertUtilityClass } from './alertClasses';\nimport IconButton from '../IconButton';\nimport SuccessOutlinedIcon from '../internal/svg-icons/SuccessOutlined';\nimport ReportProblemOutlinedIcon from '../internal/svg-icons/ReportProblemOutlined';\nimport ErrorOutlineIcon from '../internal/svg-icons/ErrorOutline';\nimport InfoOutlinedIcon from '../internal/svg-icons/InfoOutlined';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    variant,\n    color,\n    severity,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', `${variant}${capitalize(color || severity)}`, `${variant}`],\n    icon: ['icon'],\n    message: ['message'],\n    action: ['action']\n  };\n  return composeClasses(slots, getAlertUtilityClass, classes);\n};\n\nconst AlertRoot = styled(Paper, {\n  name: 'MuiAlert',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize(ownerState.color || ownerState.severity)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  const getColor = theme.palette.mode === 'light' ? darken : lighten;\n  const getBackgroundColor = theme.palette.mode === 'light' ? lighten : darken;\n  const color = ownerState.color || ownerState.severity;\n  return _extends({}, theme.typography.body2, {\n    backgroundColor: 'transparent',\n    display: 'flex',\n    padding: '6px 16px'\n  }, color && ownerState.variant === 'standard' && {\n    color: getColor(theme.palette[color].light, 0.6),\n    backgroundColor: getBackgroundColor(theme.palette[color].light, 0.9),\n    [`& .${alertClasses.icon}`]: {\n      color: theme.palette.mode === 'dark' ? theme.palette[color].main : theme.palette[color].light\n    }\n  }, color && ownerState.variant === 'outlined' && {\n    color: getColor(theme.palette[color].light, 0.6),\n    border: `1px solid ${theme.palette[color].light}`,\n    [`& .${alertClasses.icon}`]: {\n      color: theme.palette.mode === 'dark' ? theme.palette[color].main : theme.palette[color].light\n    }\n  }, color && ownerState.variant === 'filled' && {\n    color: '#fff',\n    fontWeight: theme.typography.fontWeightMedium,\n    backgroundColor: theme.palette.mode === 'dark' ? theme.palette[color].dark : theme.palette[color].main\n  });\n});\nconst AlertIcon = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Icon',\n  overridesResolver: (props, styles) => styles.icon\n})({\n  marginRight: 12,\n  padding: '7px 0',\n  display: 'flex',\n  fontSize: 22,\n  opacity: 0.9\n});\nconst AlertMessage = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Message',\n  overridesResolver: (props, styles) => styles.message\n})({\n  padding: '8px 0'\n});\nconst AlertAction = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Action',\n  overridesResolver: (props, styles) => styles.action\n})({\n  display: 'flex',\n  alignItems: 'flex-start',\n  padding: '4px 0 0 16px',\n  marginLeft: 'auto',\n  marginRight: -8\n});\nconst defaultIconMapping = {\n  success: /*#__PURE__*/_jsx(SuccessOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  warning: /*#__PURE__*/_jsx(ReportProblemOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  error: /*#__PURE__*/_jsx(ErrorOutlineIcon, {\n    fontSize: \"inherit\"\n  }),\n  info: /*#__PURE__*/_jsx(InfoOutlinedIcon, {\n    fontSize: \"inherit\"\n  })\n};\nconst Alert = /*#__PURE__*/React.forwardRef(function Alert(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAlert'\n  });\n\n  const {\n    action,\n    children,\n    className,\n    closeText = 'Close',\n    color,\n    icon,\n    iconMapping = defaultIconMapping,\n    onClose,\n    role = 'alert',\n    severity = 'success',\n    variant = 'standard'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    color,\n    severity,\n    variant\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(AlertRoot, _extends({\n    role: role,\n    elevation: 0,\n    ownerState: ownerState,\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other, {\n    children: [icon !== false ? /*#__PURE__*/_jsx(AlertIcon, {\n      ownerState: ownerState,\n      className: classes.icon,\n      children: icon || iconMapping[severity] || defaultIconMapping[severity]\n    }) : null, /*#__PURE__*/_jsx(AlertMessage, {\n      ownerState: ownerState,\n      className: classes.message,\n      children: children\n    }), action != null ? /*#__PURE__*/_jsx(AlertAction, {\n      className: classes.action,\n      children: action\n    }) : null, action == null && onClose ? /*#__PURE__*/_jsx(AlertAction, {\n      ownerState: ownerState,\n      className: classes.action,\n      children: /*#__PURE__*/_jsx(IconButton, {\n        size: \"small\",\n        \"aria-label\": closeText,\n        title: closeText,\n        color: \"inherit\",\n        onClick: onClose,\n        children: _CloseIcon || (_CloseIcon = /*#__PURE__*/_jsx(CloseIcon, {\n          fontSize: \"small\"\n        }))\n      })\n    }) : null]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Alert.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The action to display. It renders after the message, at the end of the alert.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Override the default label for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * The color of the component. Unless provided, the value is taken from the `severity` prop.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['error', 'info', 'success', 'warning']), PropTypes.string]),\n\n  /**\n   * Override the icon displayed before the children.\n   * Unless provided, the icon is mapped to the value of the `severity` prop.\n   * Set to `false` to remove the `icon`.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The component maps the `severity` prop to a range of different icons,\n   * for instance success to `<SuccessOutlined>`.\n   * If you wish to change this mapping, you can provide your own.\n   * Alternatively, you can use the `icon` prop to override the icon displayed.\n   */\n  iconMapping: PropTypes.shape({\n    error: PropTypes.node,\n    info: PropTypes.node,\n    success: PropTypes.node,\n    warning: PropTypes.node\n  }),\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * The ARIA role attribute of the element.\n   * @default 'alert'\n   */\n  role: PropTypes.string,\n\n  /**\n   * The severity of the alert. This defines the color and icon used.\n   * @default 'success'\n   */\n  severity: PropTypes.oneOf(['error', 'info', 'success', 'warning']),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['filled', 'outlined', 'standard']), PropTypes.string])\n} : void 0;\nexport default Alert;","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z\"\n}), 'SuccessOutlined');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z\"\n}), 'ReportProblemOutlined');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'ErrorOutline');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z\"\n}), 'InfoOutlined');","import {\n    Alert,\n    Button,\n    Icon,\n    Grid,\n    MenuItem,\n    Select,\n    OutlinedInput,\n    InputLabel,\n    FormControl,\n    Avatar,\n    CircularProgress,\n    Snackbar\n} from '@mui/material'\nimport { styled, Box } from '@mui/system'\nimport React, { useState, useEffect, useRef } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\nimport { Breadcrumb } from 'app/components';\nimport moment from 'moment';\nimport {\n    editCounsellor,\n    getTraumaList,\n    getCounsellorById,\n    getAllUserRoles\n} from 'app/services/userService';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../../../users/Users.css';\nimport '../add/CounsellorAdd.css';\n\n// const ITEM_HEIGHT = 48;\n// const ITEM_PADDING_TOP = 8;\n// const MenuProps = {\n//     PaperProps: {\n//         style: {\n//             maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n//             width: 250,\n//         },\n//     },\n// };\n\nconst FlexBox = styled(Box)(() => ({\n    display: 'flex',\n    alignItems: 'center',\n}))\n\nconst StyledProgress = styled(CircularProgress)(() => ({\n    position: 'absolute',\n    top: '6px',\n    left: '25px',\n}))\n\nconst Container = styled('div')(({ theme }) => ({\n    margin: '30px',\n    [theme.breakpoints.down('sm')]: {\n        margin: '16px',\n    },\n    '& .breadcrumb': {\n        marginBottom: '30px',\n        [theme.breakpoints.down('sm')]: {\n            marginBottom: '16px',\n        },\n    },\n}))\nconst StyledAvatar = styled(Avatar)(() => ({\n    width: '120px !important',\n    height: '120px !important',\n    border: '2px'\n}))\n\nconst TextField = styled(TextValidator)(() => ({\n    width: '100%',\n    marginBottom: '16px',\n}))\n\nconst UploadButton = styled(Button)(() => ({\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems:'center',\n    width: 120, \n    height: 120, \n    borderRadius: \"50%\", \n    borderColor: '#3498db', \n    // borderStyle: 'dotted'\n}))\n\nconst CancelButton = styled(Button)(() => ({\n    display: 'block',\n    color: '#fff',\n    marginTop: '20px',\n    width: '86px',\n    backgroundColor: '#e15260',\n    '&:hover': {\n        backgroundColor: '#cc2333',\n        color: '#fff'\n    }\n}))\n\nconst CounsellorEdit = (props) => {\n    const navigate = useNavigate()\n    const [counsellorInfo, setCounsellorInfo] = useState({\n        firstName: '',\n        lastName: '',\n        email: '',\n        area_code:'',\n        phone_number: '',\n        traumas: [],\n        logo: null,\n        logo_image: '',\n        counsellor_id: '',\n        user_id: '',\n        domain: ''\n    });\n    const [traumaList, setTraumaList] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [traumasError, setTraumasError] = useState('');\n    const [isTouched, setIsTouched] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [roles, setRoles] = useState(null)\n    const [statusInfo, setStatusInfo] = useState({\n        status: 'success',\n        message: ''\n    });\n    const formEl = useRef();\n\n    function getLogoImage(data){\n        return 'http://localhost:1337'+data\n    }\n\n    useEffect(() => {\n        ValidatorForm.addValidationRule('REQUIRED', (value) => {\n            if(value.length === 0){\n                return false;\n            }\n            return true;\n        });\n\n        let id = window.location.href.split('=')[1];\n        ; (async () => {\n            try {\n                const resp = await getTraumaList();\n                if (resp && resp.data) {\n                    setTraumaList(resp.data);\n                }\n\n                if(id) {\n                    setLoading(true);\n                    const counsellorResp = await getCounsellorById(id);\n                    console.log('counsellorRest', counsellorResp);\n                    if(counsellorResp){\n                        setCounsellorInfo({\n                            firstName: counsellorResp.first_name,\n                            lastName: counsellorResp.last_name,\n                            email: counsellorResp.email,\n                            area_code: counsellorResp.area_code,\n                            phone_number: counsellorResp.phone_number,\n                            username: (counsellorResp.user && counsellorResp.user.username) || '',\n                            logo_image: counsellorResp.logo_image ? getLogoImage(counsellorResp.logo_image) : '',\n                            counsellor_id: counsellorResp.id,\n                            user_id: counsellorResp.user && counsellorResp.user.id,\n                            traumas: counsellorResp.traumas.map(item => item.trauma_code),\n                            domain: counsellorResp.domain,\n                        })\n                    }\n                    setLoading(false);\n                }\n            } catch (err) {\n                setLoading(false);\n                console.log('err', err);\n            }\n        })();\n        ;(async () => {\n            try {\n                const resp = await getTraumaList()\n                if (resp && resp.data) {\n                    setTraumaList(resp.data)\n                }\n                const { roles } = await getAllUserRoles()\n                if (roles && roles.length > 0) {\n                    roles.forEach((item) => {\n                        if (item.type === 'counsellor') {\n                            setRoles(item)\n                        }\n                    })\n                }\n            } catch (err) {\n                console.log('err', err)\n            }\n        })()\n\n        return () => {\n            ValidatorForm.removeValidationRule('REQUIRED');\n        }\n    }, [])\n\n    function handleChange(event) {\n        event.persist()\n        setCounsellorInfo({\n            ...counsellorInfo,\n            [event.target.name]: event.target.value,\n        })\n    }\n\n    const getBase64 = function (file) {\n        return new Promise((resolve) => {\n            let reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = function (upload) {\n                resolve(upload.target.result);\n            };\n            reader.onerror = function (error) {\n                console.log('Error: ', error);\n            };\n        });\n    };\n\n    const handleFileUpload = async (e) => {\n        const file = e.target.files[0];\n        const fileTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/svg', 'image/svg+xml'];\n        if(fileTypes.includes(file.type)){\n            file.base64 = await getBase64(file);\n            setCounsellorInfo({...counsellorInfo, logo: file, logo_image: '' });\n        } else {\n            toast.error('Only files with following extensions are allowed: jpeg, jpg, png, svg', {\n                theme: 'colored'\n            });\n        }\n    }\n\n    const uploadFile = async(file) => {\n        const formData = new FormData();\n        formData.append('files', file);\n        \n        let access_token = '';\n        if(localStorage.accessToken){\n            access_token = localStorage.accessToken;\n        }\n\n        let response = await fetch('http://localhost:1337/api/upload', {\n            method: 'post',\n            headers: {\n                authorization: 'Bearer ' + access_token\n            },\n            body: formData\n        });\n\n       \n        let upload = await response.text();\n\n        return JSON.parse(upload);\n\n    }\n\n    const handleSubmit = async (event) => {\n        const {\n            firstName,\n            lastName,\n            email,\n            area_code,\n            phone_number,\n            traumas,\n            logo,\n            // logo_image,\n            counsellor_id\n            // center_type\n        } = counsellorInfo;\n\n        if(traumas.length === 0) {\n            return;\n        }\n        \n        setLoading(true)\n        let upload;\n\n        if(logo){\n            upload = await uploadFile(logo);\n        }\n\n        // const traumaObj = traumaList.find(el => el.attributes.trauma_code === traumas);\n        const traumaCodes = traumas.map((item) => {\n            // eslint-disable-next-line array-callback-return\n            return traumaList.find((el) => {\n                if (el.attributes.trauma_code === item) {\n                    return el.id\n                }\n            });\n        })\n        // const center_type_obj = centerTypes.find(el => el.attributes.center_type_id === center_type);\n\n        let options = {\n            counsellor: {\n                data: {\n                    id: counsellor_id,\n                    name: firstName + ' ' + lastName,\n                    first_name: firstName,\n                    last_name: lastName,\n                    email: email,\n                    area_code: area_code,\n                    phone_number: phone_number,\n                    traumas: traumaCodes,\n                    publishedAt: moment().format().split('T')[0] + ' ' + moment().format().split('T')[1].slice(0, 8)\n                }\n            },\n            traumas: traumaCodes,\n            // center_type_id: center_type_obj.attributes.center_type_id,\n            user: {\n                data: {\n                    email: email,\n                    confirmed: true,\n                    blocked: false,\n                    role: roles.id\n                }\n            }\n        };\n\n        if(logo) {\n            options.counsellor.data.logo_image = upload[0].url || '';\n        }\n\n        editCounsellor(options)\n            .then(resp => {\n                setLoading(false);\n                setOpen(true);\n                setStatusInfo({ \n                    ...statusInfo, \n                    status: resp && resp.status === 'success' ? 'success' : 'error', \n                    message: resp?.message \n                });\n            }).catch(err => {\n                setLoading(false);\n                setOpen(true);\n                setStatusInfo({ ...statusInfo, status: 'error', message: 'Something went wrong'});\n            })\n    }\n\n    const handleTraumas = () => {\n        if(!isTouched) {\n            setIsTouched(true);\n        }\n        const { traumas } = counsellorInfo;\n        let err = '';\n        if(traumas.length === 0) {\n            err = 'This field is required!';\n        }\n        setTraumasError(err);\n    }\n\n    const {\n        firstName,\n        lastName,\n        email,\n        area_code,\n        phone_number,\n        traumas,\n        logo,\n        logo_image,\n        // domain\n    } = counsellorInfo;\n\n    return <>\n        <Container>\n            {/* {!props.breadcrumb && <Breadcrumb\n                routeSegments={[\n                    { name: \"Counselors\", path: \"/counsellors\" },\n                    { name: \"Edit Counselor\" }\n                ]}\n            />} */}\n            <h1 style={{ marginTop: '0px', marginBottom: '10px', padding: '0px'}}>Edit Provider</h1>\n            <div className='center-card'>\n                <ValidatorForm\n                    ref={formEl}\n                    onSubmit={handleSubmit}\n                    onError={() => null}\n                >\n                    <Grid container spacing={6}>\n                        <Grid item lg={6} md={6} sm={12} xs={12} sx={{ mt: 2 }}>\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"first_name\"\n                                name=\"firstName\"\n                                label=\"First Name*\"\n                                type=\"text\"\n                                value={firstName}\n                                onChange={handleChange}\n                                fullWidth\n                                validators={['REQUIRED']}\n                                errorMessages={['This field is required']}\n                            />\n                            <TextField\n\n                                margin=\"dense\"\n                                id=\"email\"\n                                name=\"email\"\n                                label=\"Email*\"\n                                type=\"email\"\n                                value={email}\n                                onChange={handleChange}\n                                fullWidth\n                                validators={['REQUIRED', 'isEmail']}\n                                errorMessages={[\n                                    'This field is required',\n                                    'email is not valid',\n                                ]}\n                            />\n                            <FormControl sx={{ mt: 2, width: 250 }} error={traumas.length ? false: (isTouched ? true: false)}>\n                                <InputLabel \n                                    id={\n                                        (traumas.length === 0 && isTouched) ? \n                                        \"demo-simple-select-error-label\" :    \n                                        \"open-select-label\"\n                                    }\n                                >\n                                    Trauma Type*\n                                </InputLabel>\n                                <Select\n                                    labelId=\"open-select-label\"\n                                    margin=\"dense\"\n                                    id=\"center_type\"\n                                    name=\"traumas\"\n                                    multiple\n                                    value={traumas}\n                                    input={<OutlinedInput label=\"Trauma Type\" />}\n                                    style={{ borderColor: '#FF3D57'}}\n                                    // InputLabelProps={{shrink: false}}\n                                    onChange={(e) => {\n                                        const { target: { value }} = e;\n                                        setTraumasError(value.length === 0 ? 'This field is required!' : '');\n                                        setCounsellorInfo({ ...counsellorInfo, traumas: value })\n                                        setIsTouched(true);\n                                    }}\n                                    onBlur={() => handleTraumas()}\n                                    fullWidth\n                                    validators={['required']}\n                                >\n                                    <MenuItem disabled value=\"\">\n                                        <em>Trauma Type</em>\n                                    </MenuItem>\n                                    {traumaList && traumaList.map((item, i) => (\n                                        <MenuItem key={i} value={item.attributes.trauma_code}>{item.attributes.trauma_name}</MenuItem>\n                                    ))}\n                                </Select>\n                                {traumasError && (\n                                    <p className='form-err'>{traumasError}</p>\n                                )}\n                            </FormControl> \n\n                        </Grid>\n                        <Grid item lg={6} md={6} sm={12} xs={12} sx={{ mt: 2 }}>\n                            <TextField\n\n                                margin=\"dense\"\n                                id=\"last_name\"\n                                name=\"lastName\"\n                                label=\"Last Name*\"\n                                type=\"text\"\n                                value={lastName}\n                                onChange={handleChange}\n                                fullWidth\n                                validators={['REQUIRED']}\n                                errorMessages={['This field is required']}\n                            />\n                            <Grid container>\n                            <Grid item xs={3} sm={3} md={3} lg={3}>\n                                <TextField\n                                    margin=\"dense\"\n                                    id=\"area_code\"\n                                    name=\"area_code\"\n                                    label=\"Area Code\"\n                                    type=\"text\"\n                                    value={area_code}\n                                    onChange={handleChange}\n                                    fullWidth\n                                    validators={['REQUIRED']}\n                                    errorMessages={['This field is required']}\n                                />\n                            </Grid>\n                            <Grid item xs={1} sm={1} md={1} lg={1}>\n                                <div className='phone_line'>&nbsp;</div>\n                            </Grid>\n                            <Grid item xs={8} sm={8} md={8} lg={8}>  \n                                <TextField\n                                    margin=\"dense\"\n                                    id=\"phone_number\"\n                                    name=\"phone_number\"\n                                    label=\"Phone Number\"\n                                    type=\"text\"\n                                    value={phone_number}\n                                    onChange={handleChange}\n                                    fullWidth\n                                    validators={['REQUIRED']}\n                                    errorMessages={['This field is required']}\n                                />\n                            </Grid> \n                        </Grid>\n                            {/* <TextField\n\n                                margin=\"dense\"\n                                id=\"phone_number\"\n                                name=\"phone_number\"\n                                label=\"Phone Number\"\n                                type=\"text\"\n                                value={phone_number}\n                                onChange={handleChange}\n                                fullWidth\n                                validators={['required']}\n                                errorMessages={['This field is required']}\n                            /> */}\n                        </Grid>\n                        <Grid item lg={12} style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\" }}>\n                        {logo || logo_image ? <StyledAvatar\n                                src={logo ? logo.base64 : logo_image}\n                            /> : <UploadButton\n                            variant=\"contained\"\n                            component=\"label\"\n                        >\n                            <Icon>file_upload_outlined</Icon>\n                            Upload Logo\n                            <input\n                                    type=\"file\"\n                                    hidden\n                                    accept=\"image/*\"\n                                    multiple\n                                onChange={handleFileUpload}\n                                />\n                        </UploadButton>}\n                            <Grid item style={{flexDirection:\"column\"}}>\n                            <Button\n                                variant=\"contained\"\n                                component=\"label\"\n                                color=\"inherit\"\n                                sx={{ marginLeft: '15px', marginTop: '15px', height: '35px', marginBottom: '16px' }}\n                            onClick={() => setCounsellorInfo({ ...counsellorInfo, logo: null, logo_image: '' })}\n                            >\n                                Reset Logo\n                            </Button>\n                            </Grid>\n                            \n                        </Grid>\n                    </Grid>\n                    <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\n                    <FlexBox flexWrap=\"wrap\">\n                            <Box mr={2} position=\"relative\">\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled={loading}\n                                    type=\"submit\"\n                                >\n                                    Submit\n                                </Button>\n\n                                {loading && (\n                                    <StyledProgress\n                                        size={24}\n                                        className=\"buttonProgress\"\n                                    />\n                                )}\n\n                            </Box>\n                            <CancelButton sx={{ marginBottom: 2 }} onClick={() => navigate(-1)}>\n                                Cancel\n                            </CancelButton>\n                        </FlexBox>\n                        {/* <Button sx={{ display: 'block', marginTop: '20px' }} color=\"primary\" variant=\"contained\" type=\"submit\">\n                            <Span sx={{ pl: 1, textTransform: 'capitalize' }}>\n                                Submit\n                            </Span>\n                        </Button>\n                        <CancelButton onClick={() => navigate(-1)}>\n                            Cancel\n                        </CancelButton> */}\n                    </div>\n                </ValidatorForm>\n                <Snackbar\n                    open={open}\n                    anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n                    autoHideDuration={3000}\n                    onClose={() => {\n                        setOpen(false)\n                        navigate('/counsellors');\n                    }}\n                >\n                    <Alert\n                        onClose={() => {\n                            setOpen(false)\n                            navigate('/counsellors');\n                        }}\n                        variant=\"filled\"\n                        severity={statusInfo.status}\n                        sx={{ width: '100%' }}\n                    >\n                        {statusInfo.message}\n                    </Alert>\n                </Snackbar>\n            </div>\n        </Container>\n    </>\n}\n\nexport default CounsellorEdit"],"sourceRoot":""}