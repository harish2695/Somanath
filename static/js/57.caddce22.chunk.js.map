{"version":3,"sources":["app/components/SessionModal/SessionModal.js","app/views/center/Centers.jsx"],"names":["style","position","top","left","transform","width","bgcolor","border","boxShadow","p","styled","Button","display","color","marginTop","backgroundColor","SessionModal","open","onConfirmDialogClose","text","navigate","onYesClick","useNavigate","handleLogout","localStorage","removeItem","keepMounted","onClose","sx","id","variant","component","justifyContent","alignItems","gap","onClick","Centers","user","useAuth","useState","rows","setRows","loading","setLoading","pageDetails","setPageDetails","searchResult","setSearchResult","filterResult","setFilterResult","searchData","setSearchData","type","setType","modalVisible","setModalVisible","centerID","setCenterID","currentCenter","setCurrentCenter","setOpen","status","message","statusInfo","setStatusInfo","action","setAction","openModal","setOpenModal","msg","setMsg","formatCentersList","data","response","meta","counsellorId","name","firstName","lastName","traumaCodes","clients","sessions","sessionsHours","role","disable_center","Array","isArray","forEach","item","push","formatData","obj","attributes","username","centerId","state","phoneNumber","phone_number","email","length","counsellors","devices","center_type","center_id","disabled","blocked","useEffect","fetchCenters","pageNumber","fetchCenter","then","resp","error","getMetaData","catch","err","console","log","sortCenters","search","filter","pageNo","findCenters","unlinkLicenseAndPassphrase","a","res","i","el","license","unlinkLicense","cancelSessions","provider","centers","_sessions","center","counsellor","cancelAppointments","_center","find","checkProvider","options","disableProvider","ids","map","ele","client","unlinkProviderFromClient","blockProvider","handleDisable","getCenterDetails","disableCenter","blockCenter","handleEnable","enableCenter","unblockCenter","container","className","routeSegments","size","padding","rowSpacing","columnSpacing","lg","md","sm","xs","label","fullWidth","onChange","value","target","placeholder","InputProps","startAdornment","marginBottom","alignSelf","page","handlePageChange","event","newPage","Number","view","anchorOrigin","vertical","horizontal","autoHideDuration","severity"],"mappings":"iHAAA,oEAUMA,EAAQ,CACVC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,wBACXC,MAAO,IACPC,QAAS,mBACTC,OAAQ,iBACRC,UAAW,GACXC,EAAG,GAGcC,YAAOC,IAAPD,EAAe,iBAAO,CACvCE,QAAS,QACTC,MAAO,OACPC,UAAW,OACXT,MAAO,OACPU,gBAAiB,UACjB,UAAW,CACPA,gBAAiB,UACjBF,MAAO,YAyEAG,IArEM,SAAC,GAKf,IAJHC,EAIE,EAJFA,KACAC,EAGE,EAHFA,qBACAC,EAEE,EAFFA,KAGMC,GADJ,EADFC,WAEiBC,eAEXC,EAAe,WACjBL,IACAM,aAAaC,WAAW,eACxBL,EAAS,oBAGb,OACI,8BACI,cAAC,IAAD,CACIM,aAAW,EACXT,KAAMA,EACNU,QAAS,kBAAMJ,KACf,kBAAgB,2BAChB,mBAAiB,iCALrB,SAOI,eAAC,IAAD,CAAKK,GAAI5B,EAAT,UACI,cAAC,IAAD,CACI6B,GAAG,2BACHC,QAAQ,KACRC,UAAU,KACVH,GAAI,CAACf,MAAM,QAJf,SAMKM,IASL,qBACInB,MAAO,CACHY,QAAS,OACToB,eAAe,WACfC,WAAY,SACZC,IAAK,QALb,SAWI,cAAC,IAAD,CACIjC,SAAS,WACT2B,GAAI,CAAEhB,QAAS,QAASE,UAAW,QAFvC,SAII,cAAC,IAAD,CACID,MAAM,UACNiB,QAAQ,YACRK,QAAS,kBAAMZ,KAHnB,6B,oVCqeba,UArhBC,WACZ,IAAOC,EAAQC,cAARD,KACDjB,EAAWE,cACjB,EAAwBiB,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAGA,EAAqCJ,mBAAS,IAA9C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAAuCN,oBAAS,GAAhD,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAAuCR,oBAAS,GAAhD,mBAAOS,EAAP,KAAoBC,EAApB,KACA,EAAmCV,mBAAS,IAA5C,mBAAOW,EAAP,KAAkBC,EAAlB,KACA,EAAuBZ,mBAAS,OAAhC,oBAAOa,GAAP,MAAYC,GAAZ,MACA,GAAwCd,oBAAS,GAAjD,qBAAOe,GAAP,MAAqBC,GAArB,MACA,GAAgChB,mBAAS,MAAzC,qBAAOiB,GAAP,MAAiBC,GAAjB,MACA,GAA0ClB,mBAAS,MAAnD,qBAAOmB,GAAP,MAAsBC,GAAtB,MACA,GAAwBpB,oBAAS,GAAjC,qBAAOtB,GAAP,MAAa2C,GAAb,MACA,GAAoCrB,mBAAS,CACzCsB,OAAQ,UACRC,QAAS,KAFb,qBAAOC,GAAP,MAAmBC,GAAnB,MAIA,GAA4BzB,mBAAS,WAArC,qBAAO0B,GAAP,MAAeC,GAAf,MACA,GAAkC3B,oBAAS,GAA3C,qBAAO4B,GAAP,MAAkBC,GAAlB,MACA,GAAsB7B,mBAAS,IAA/B,qBAAO8B,GAAP,MAAYC,GAAZ,MAMA,SAASC,GAAkBC,GAAO,IAAD,EACvBC,EAAW,GACbC,EAAO,CACPC,aAAc,YACdC,KAAM,QACNC,UAAW,OACXC,SAAU,QACVC,YAAa,QACbC,QAAS,UACTC,SAAU,YACVC,cAAe,UACf9B,KAAM,QAeV,MAZwB,WAAjB,OAAJf,QAAI,IAAJA,GAAA,UAAAA,EAAM8C,YAAN,eAAY/B,QACXsB,EAAKU,eAAkB,kBAGvBC,MAAMC,QAAQd,IACdA,EAAKe,SAAQ,SAACC,GACVf,EAASgB,KAAKC,GAAWF,OAE7Bf,EAAQ,KAAWC,GAEnBD,EAASgB,KAAKC,GAAWlB,IAEtBC,EAGX,SAASiB,GAAWF,GAAO,IAAD,MAkBW,QAjB3BG,EAAM,CACR9D,GAAK2D,GAAQA,EAAKI,YAAcJ,EAAKI,WAAWvD,MAAQmD,EAAKI,WAAWvD,KAAKmC,MAAQgB,EAAKI,WAAWvD,KAAKmC,KAAKoB,YAAcJ,EAAKI,WAAWvD,KAAKmC,KAAKoB,WAAWC,UAAa,GAC/KC,SAAWN,GAAQA,EAAK3D,IAAO,GAC/BkE,MAAO,UAAAP,EAAKI,WAAWG,aAAhB,SAAuBvB,KACxBgB,EAAKI,WAAWG,MAAMvB,KAAKoB,WAAWhB,KACtC,GACNA,KAAMY,EAAKI,WAAWhB,KACtBoB,YAAaR,EAAKI,WAAWK,aAC7BC,MAAOV,EAAKI,WAAWM,MACvBlB,QAASQ,EAAKI,WAAWZ,QAAQR,KAAK2B,QAAU,EAChDC,YAAaZ,EAAKI,WAAWQ,YAAY5B,KAAK2B,QAAU,EACxDE,SAAS,UAAAb,EAAKI,WAAWS,eAAhB,eAAyB7B,KAAK2B,SAAU,EACjD/C,KAAMoC,EAAKI,WAAWU,YAAY9B,KAC5BgB,EAAKI,WAAWU,YAAY9B,KAAKoB,WAAWhB,KAC5C,IAGc,WAAjB,OAAJvC,QAAI,IAAJA,GAAA,UAAAA,EAAM8C,YAAN,eAAY/B,QACXuC,EAAIP,eAAiB,CACjBmB,UAAS,OAAEf,QAAF,IAAEA,OAAF,EAAEA,EAAM3D,GACjB2E,UAAc,OAAJhB,QAAI,IAAJA,GAAA,UAAAA,EAAMI,kBAAN,mBAAkBvD,YAAlB,mBAAwBmC,YAAxB,mBAA8BoB,kBAA9B,eAA0Ca,WAAW,IAIvE,OAAOd,EA1DXe,qBAAU,WACNC,GAnBS,KAoBV,CApBU,IA+Eb,IAAMA,GAAe,SAACC,GAClBjE,GAAW,GACXkE,YAAYD,GACXE,MAAK,SAACC,GAAU,IAAD,EACZpE,GAAW,GACc,uBAAlB,OAAJoE,QAAI,IAAJA,GAAA,UAAAA,EAAMC,aAAN,eAAapC,OACZR,IAAa,GACbE,GAAO,uDAEP7B,EAAQ8B,GAAkBwC,EAAKvC,OAC/B3B,EAAeoE,YAAYF,EAAKrC,WAGvCwC,OAAM,SAACC,GACJC,QAAQC,IAAI,QAAQF,OAI5B,SAASG,GAAYC,EAAQC,EAAQC,GACjC9E,GAAW,GACX+E,YAAYH,EAAQC,EAAQC,GAC3BX,MAAK,SAACC,GAAU,IAAD,EACZpE,GAAW,GACc,uBAAlB,OAAJoE,QAAI,IAAJA,GAAA,UAAAA,EAAMC,aAAN,eAAapC,OACZR,IAAa,GACbE,GAAO,uDAEP7B,EAAQ8B,GAAkBwC,EAAKvC,OAC/B3B,EAAeoE,YAAYF,EAAKrC,WAErCwC,OAAM,SAACC,GACNC,QAAQC,IAAI,QAAQF,MAI5B,IAqDMQ,GAA0B,uCAAG,kCAAAC,EAAA,sDAC3BC,GAAM,EADqB,SAGrB7C,EAHqB,OAGXtB,SAHW,IAGXA,QAHW,EAGXA,GAAesB,QACvB8C,EAAI,EAJe,YAIbA,EAAI9C,EAAQmB,QAJC,sBAKnB4B,EAAK/C,EAAQ8C,IACXE,QANiB,gCAObC,YAAcF,EAAGC,SAPJ,OAIOF,IAJP,uBAU3BD,GAAM,EAVqB,kDAY3BA,GAAM,EAZqB,iCAcxBA,GAdwB,0DAAH,qDAiB1BK,GAAc,uCAAG,oCAAAN,EAAA,yDACfC,GAAM,EACJ5C,EAFa,OAEFvB,SAFE,IAEFA,QAFE,EAEFA,GAAeuB,SAC1BmB,EAHa,OAGC1C,SAHD,IAGCA,QAHD,EAGCA,GAAe0C,YAHhB,UAKZA,EAAYD,OALA,qBAAAyB,EAAA,iBAMHE,GANG,uBAAAF,EAAA,yDAOHO,EAAW/B,EAAY0B,GAEL,KADhBM,EAAUD,EAASC,SACdjC,OATJ,mBAUAiC,EAAQ,GAAGvG,MAAX,OAAkB6B,SAAlB,IAAkBA,QAAlB,EAAkBA,GAAe7B,IAVjC,uBAWOwG,EAAYpD,EAASuC,QAAO,SAAAO,GAAE,eAAO,OAAFA,QAAE,IAAFA,GAAA,UAAAA,EAAIO,cAAJ,eAAYzG,MAAOuG,EAAQ,GAAGvG,KAAQ,OAAFkG,QAAE,IAAFA,GAAA,UAAAA,EAAIQ,kBAAJ,eAAgB1G,MAAOsG,EAAStG,MAX9G,SAYO2G,YAAmBH,GAZ1B,qCAeGI,EAAUL,EAAQM,MAAK,SAAAX,GAAE,OAAM,OAAFA,QAAE,IAAFA,OAAA,EAAAA,EAAIlG,OAAJ,OAAW6B,SAAX,IAAWA,QAAX,EAAWA,GAAe7B,OACvDwG,EAAYpD,EAASuC,QAAO,SAAAO,GAAE,eAAO,OAAFA,QAAE,IAAFA,GAAA,UAAAA,EAAIO,cAAJ,eAAYzG,MAAO4G,EAAQ5G,KAAQ,OAAFkG,QAAE,IAAFA,GAAA,UAAAA,EAAIQ,kBAAJ,eAAgB1G,MAAOsG,EAAStG,MAhBvG,UAiBG2G,YAAmBH,GAjBtB,2CAMHP,EAAI,EAND,YAMGA,EAAI1B,EAAYD,QANnB,0CAMH2B,GANG,eAM2BA,IAN3B,uBAoBXD,GAAM,EApBK,wBAsBXA,GAAM,EAtBK,0DAyBfA,GAAM,EAzBS,iCAgCZA,GAhCY,0DAAH,qDAmCdc,GAAa,uCAAG,WAAOZ,GAAP,iCAAAH,EAAA,yDACdC,GAAM,EADQ,SAGVe,EAAU,GAGQ,KADlBR,GADAD,EAAWJ,GACQK,SACZjC,OANG,oBAOPiC,EAAQ,GAAGvG,KAAO6B,GAAc7B,GAPzB,wBAQN+G,EAAU,CACNvG,KAAM,CACFmC,KAAM,CACF3C,GAAE,OAAEsG,QAAF,IAAEA,GAAF,UAAEA,EAAU9F,YAAZ,aAAE,EAAgBR,GACpB4E,SAAS,KAZf,UAiBAoC,YAAgBd,EAAGlG,GAAI+G,GAjBvB,QAkBNf,GAAM,EAlBA,uCAqBNiB,EAAMV,EAAQW,KAAI,SAAAC,GAClB,GAAGA,EAAInH,KAAO6B,GAAc7B,GAAI,OAAOmH,EAAInH,MAG/C+G,EAAU,CACNL,WAAY,CACR/D,KAAM,CACF3C,GAAIkG,EAAGlG,GACPuG,QAASU,KA7BX,UAiCJD,YAAgBd,EAAGlG,GAAI+G,GAjCnB,QAmCV5D,GADIA,EAlCM,OAkCItB,SAlCJ,IAkCIA,QAlCJ,EAkCIA,GAAesB,SACXwC,QAAO,SAAAwB,GAAG,aAAO,OAAHA,QAAG,IAAHA,GAAA,UAAAA,EAAKT,kBAAL,eAAiB1G,OAAjB,OAAwBkG,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAIlG,OACnDiG,EAAI,EApCH,aAoCKA,EAAI9C,EAAQmB,QApCjB,wBAqCF8C,EAASjE,EAAQ8C,GACjBc,EAAU,CACVpE,KAAM,CACF+D,WAAY,OAxCd,UA2CAW,YAAyBD,EAAOpH,GAAI+G,GA3CpC,QAoCyBd,IApCzB,wBA6CVD,GAAM,EA7CI,0DAgDdA,GAAM,EAhDQ,iCAkDXA,GAlDW,0DAAH,sDAqDbsB,GAAa,uCAAG,kCAAAvB,EAAA,yDACdC,GAAM,EADQ,WAGRzB,EAHQ,OAGM1C,SAHN,IAGMA,QAHN,EAGMA,GAAe0C,aACpBD,OAJD,iBAKF2B,EAAI,EALF,YAKIA,EAAI1B,EAAYD,QALpB,wBAMF4B,EAAK3B,EAAY0B,GANf,SAOMa,GAAcZ,GAPpB,OAONF,EAPM,eAK4BC,IAL5B,+CASoB,IAAvB1B,EAAYD,SACnB0B,GAAM,GAVI,0DAadA,GAAM,EAbQ,iCAeXA,GAfW,0DAAH,qDAkBbuB,GAAa,uCAAG,WAAMvH,GAAN,iBAAA+F,EAAA,6DAClB1D,GAAU,WACVT,GAAY5B,GAFM,SAGIwH,YAAiBxH,GAHrB,OAIU,uBAAlB,QADJ4G,EAHY,cAIR,IAAPA,GAAA,UAAAA,EAASzB,aAAT,eAAgBpC,OACfR,IAAa,GACbE,GAAO,uDAEPX,GAAiB8E,GACjBlF,IAAgB,IATF,2CAAH,sDAab+F,GAAa,uCAAG,sBAAA1B,EAAA,yDAClBrE,IAAgB,IACbC,GAFe,wBAGdb,GAAW,GAHG,SAIEgF,KAJF,mDAMEO,KANF,oDAQMiB,KARN,qDAUUI,YAAY/F,IAVtB,eAWFb,GAAW,GACXiB,IAAQ,GACRI,GAAc,2BACPD,IADM,IAETF,OAAQ,UACRC,QAAS,kCAEb6C,GAjUP,GA+SS,wBAoBFhE,GAAW,GACXiB,IAAQ,GACRI,GAAc,2BACPD,IADM,IAETF,OAAQ,QACRC,QAAS,+BAzBX,gCA6BNnB,GAAW,GACXiB,IAAQ,GACRI,GAAc,2BACPD,IADM,IAETF,OAAQ,QACRC,QAAS,oCAlCP,gCAsCVnB,GAAW,GACXiB,IAAQ,GACRI,GAAc,2BACPD,IADM,IAETF,OAAQ,QACRC,QAAS,4CA3CH,4CAAH,qDAiDb0F,GAAY,uCAAG,WAAO3H,GAAP,iBAAA+F,EAAA,6DACjB1D,GAAU,UACVT,GAAY5B,GAFK,SAGKwH,YAAiBxH,GAHtB,OAIW,uBAAlB,QADJ4G,EAHW,cAIP,IAAPA,GAAA,UAAAA,EAASzB,aAAT,eAAgBpC,OACfR,IAAa,GACbE,GAAO,uDAEPX,GAAiB8E,GACjBlF,IAAgB,IATH,2CAAH,sDAaZkG,GAAY,uCAAG,8BAAA7B,EAAA,yDACjBrE,IAAgB,IACbC,GAFc,uBAGbb,GAAW,GAEPiG,EAAU,CACVvG,KAAM,CACFmC,KAAM,CACF3C,GAAE,OAAE6B,SAAF,IAAEA,IAAF,UAAEA,GAAerB,YAAjB,aAAE,EAAqBR,GACzB4E,SAAS,KATR,SAaDiD,YAAa,OAAChG,SAAD,IAACA,QAAD,EAACA,GAAe7B,GAAI+G,GAbhC,eAeTjG,GAAW,GACXiB,IAAQ,GACRI,GAAc,2BACPD,IADM,IAETF,OAAQ,UACRC,QAAS,iCAEb6C,GAnYC,KAqYDhE,GAAW,GACXiB,IAAQ,GACRI,GAAc,2BACPD,IADM,IAETF,OAAQ,QACRC,QAAS,6BA7BJ,2CAAH,qDAmClB,OACI,eAAC,IAAD,CAAM6F,WAAS,EAACC,UAAU,iBAA1B,UACI,cAAC,IAAD,CAAMA,UAAU,kBAAhB,SACI,cAAC,IAAD,CAAYC,cAAe,CAAC,CAAEjF,KAAM,oBAExC,cAAC,IAAD,CACI9C,QAAQ,YACR8H,UAAU,aACVE,KAAK,QACL3H,QAAS,kBAAMf,EAAS,iBAJ5B,wBAQA,eAAC,IAAD,CAAMQ,GAAI,CAAEmI,QAAS,QAASJ,WAAS,EAACK,WAAY,EAAGC,cAAe,EAAtE,UACI,cAAC,IAAD,CAAMzE,MAAI,EAAC0E,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAArC,SACI,cAAC,IAAD,CACIC,MAAM,gBACNxI,QAAQ,WAERyI,WAAS,EACTC,SAlTC,SAAC,GAA0B,IAAdC,EAAa,EAAvBC,OAAUD,MAC9BtH,EAAcsH,GACXA,GAASA,EAAMtE,OAAS,GACvBpD,GAAgB,GAChBuE,GAAYmD,EAAOrH,GAtHd,IAuHU,KAAVqH,IACO,QAATrH,IACCH,GAAgB,GAChBqE,GAAY,GAAIlE,GA1Hf,KA4HDL,GAAgB,GAChB4D,GA7HC,MAqaO8D,MAAOvH,EACPyH,YAAY,gBACZvH,KAAK,OACLwH,WAAY,CACRC,eAAgB,cAAC,IAAD,SAK5B,cAAC,IAAD,CAAMrF,MAAI,EAAC0E,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAArC,SACI,cAAC,IAAD,CAAKT,UAAU,cAAf,SACI,eAAC,IAAD,CAAaW,WAAS,EAAtB,UACI,cAAC,IAAD,mBACA,eAAC,IAAD,CACI1I,GAAG,qBACH4I,MAAOrH,GACPkH,MAAM,MACNE,SApTP,SAAC,GAA0B,IAAdC,EAAa,EAAvBC,OAAUD,MAC9BpH,GAAQoH,GACK,QAAVA,EACIvH,GACCH,GAAgB,GAChBuE,GAAYpE,EAAY,MAvIvB,KAyIDD,GAAgB,GAChB0D,GA1IC,KA6IL1D,GAAgB,GAChBqE,GAAYpE,EAAYuH,EA9InB,KAkbW,UAMI,cAAC,IAAD,CAAUA,MAAO,MAAjB,iBACA,cAAC,IAAD,CAAUA,MAAO,MAAjB,iBACA,cAAC,IAAD,CAAUA,MAAO,WAAjB,sBACA,cAAC,IAAD,CAAUA,MAAO,UAAjB,qBACA,cAAC,IAAD,CAAUA,MAAO,SAAjB,8BAMhB,cAAC,IAAD,CAAa7I,GAAI,CAAEkJ,aAAc,OAAQhK,UAAW,OAAQF,QAAS,OAAQP,MAAO,QAApF,SACI,cAAC,IAAD,CACIQ,MAAM,UACNiB,QAAQ,YACRK,QAvSA,WAChBgB,EAAc,IACdE,GAAQ,OACRN,GAAgB,GAChBE,GAAgB,GAChB0D,GApKS,IAucO/E,GAAI,CAAEmJ,UAAW,YAJrB,wBAUPrI,GAAW,cAAC,IAAD,KAQVA,GAAWF,EAAKkC,MACd,cAAC,IAAD,CACIvC,QA7TA,SAACN,GAEbT,EAAS,mBAAD,OAAoBS,GAAM,CAACA,GAAIA,KA4T3BmJ,KAxdH,EAydGpI,YAAaA,EACbqI,iBAxUS,SAACC,EAAOC,GAC1BrI,GAAgBE,EACfsE,GAAYpE,EAAYE,GAAMgI,OAAOD,GAAS,GAE9CxE,GAAayE,OAAOD,GAAS,IAqUrB3I,KAAMA,EACN6I,KAAM,SACNjC,cAAe,SAACvH,GAAD,OAAQuH,GAAcvH,IACrC2H,aAAc,SAAC3H,GAAD,OAAQ2H,GAAa3H,MAI3C,cAAC,IAAD,CACIZ,KAAMqC,GACNpC,qBAAsB,WAClBuC,GAAY,MACZE,GAAiB,MACjBJ,IAAgB,IAEpBpC,KAAI,yBAA+B,YAAX8C,GAAuB,UAAY,SAAvD,YACJ5C,WAAY,iBAAiB,YAAX4C,GAAuBqF,KAAkBG,QAE/D,cAAC,IAAD,CACIxI,KAAMA,GACNqK,aAAc,CAAEC,SAAU,MAAOC,WAAY,UAC7CC,iBAAkB,IAClB9J,QAAS,WACLiC,IAAQ,IALhB,SAQI,cAAC,IAAD,CACIjC,QAAS,WACLiC,IAAQ,IAEZ9B,QAAQ,SACR4J,SAAU3H,GAAWF,OACrBjC,GAAI,CAAEvB,MAAO,QANjB,SAQK0D,GAAWD,YAGpB,cAAC,IAAD,CACI7C,KAAMkD,GACNhD,KAAMkD,GACNnD,qBAAsB,WAClBoD,GAAO,IACPF,IAAa,IAEjB/C,WAAY,WACRiD,GAAO,IACPF,IAAa","file":"static/js/57.caddce22.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@mui/material/Button';\nimport { styled } from '@mui/system';\nimport { \n    Modal, \n    Typography\n} from '@mui/material';\nimport { Box } from '@mui/system';\nimport { useNavigate } from 'react-router-dom';\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'background.paper',\n    border: '2px solid #fff',\n    boxShadow: 24,\n    p: 4,\n};\n\nconst CancelButton = styled(Button)(() => ({\n    display: 'block',\n    color: '#fff',\n    marginTop: '20px',\n    width: '86px',\n    backgroundColor: '#e15260',\n    '&:hover': {\n        backgroundColor: '#cc2333',\n        color: '#fff'\n    }\n}));\n\nconst SessionModal = ({\n    open,\n    onConfirmDialogClose,\n    text,\n    onYesClick\n}) => {\n    const navigate = useNavigate();\n\n    const handleLogout = () => {\n        onConfirmDialogClose();\n        localStorage.removeItem('accessToken');\n        navigate('/session/signin');\n    }\n\n    return (\n        <div>\n            <Modal\n                keepMounted\n                open={open}\n                onClose={() => handleLogout()}\n                aria-labelledby=\"keep-mounted-modal-title\"\n                aria-describedby=\"keep-mounted-modal-description\"\n            >\n                <Box sx={style}>\n                    <Typography\n                        id=\"keep-mounted-modal-title\"\n                        variant=\"h6\"\n                        component=\"h2\"\n                        sx={{color:\"#333\" }}\n                    >\n                        {text}\n                    </Typography>\n                    {/* <Box sx={{\n                        display:\"table\",\n                        marginLeft:'auto',\n                        marginRight:\"0px\"\n                    }}> */}\n                    {/* <Button onClick={handleClose} variant=\"contained\" color=\"error\">Cancel</Button> */}\n                    {/* <Button onClick={handleEdit} variant=\"contained\" sx={{ ml: 2 }}>Yes</Button> */}\n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent:'flex-end',\n                            alignItems: 'center',\n                            gap: '1rem',\n                        }}\n                    >\n                        {/* <CancelButton onClick={onConfirmDialogClose}>\n                            Cancel\n                        </CancelButton> */}\n                        <Box\n                            position=\"relative\"\n                            sx={{ display: 'block', marginTop: '20px' }}\n                        >\n                            <Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={() => handleLogout()}\n                            >\n                                Ok\n                            </Button>\n                        </Box>\n                    </div>\n                </Box>\n            </Modal>\n        </div>\n    )\n}\n\nexport default SessionModal;","import {\n    Alert,\n    Grid,\n    Button,\n    Box,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    Snackbar\n} from '@mui/material'\nimport TextField from '@mui/material/TextField';\nimport { useNavigate } from 'react-router-dom';\nimport SearchIcon from '@mui/icons-material/Search'\nimport React, { useState, useEffect } from 'react';\nimport './Centers.css'\nimport { Breadcrumb } from 'app/components'\n// import CenterList from 'app/components/CentersList/CenterList'\nimport { getMetaData } from 'app/utils/center.list.formatter';\nimport { \n    fetchCenter, \n    findCenters,\n    getCenterDetails \n} from 'app/services/centerService';\nimport {\n    unlinkLicense,\n    cancelAppointments,\n    disableProvider,\n    blockCenter,\n    unblockCenter,\n    unlinkProviderFromClient\n} from 'app/utils/enable_disable_utils';\nimport { editCenter } from 'app/services/userService';\nimport { fetchClinicianDetails } from 'app/services/counselorService';\nimport Loading from 'app/components/MatxLoading/MatxLoading';\nimport useAuth from 'app/hooks/useAuth';\nimport UsersCustomTable from 'app/components/UsersCustomTable/UsersCustomTable';\nimport ConfirmModal from 'app/components/ConfirmModal/ConfirmModal';\nimport SessionModal from 'app/components/SessionModal/SessionModal';\n\nconst Centers = () => {\n    const {user} = useAuth();\n    const navigate = useNavigate();\n    const [rows, setRows] = useState([])\n    const [loading, setLoading] = useState(false)\n    // const [page, setPage] = React.useState(1)\n    const page = 1\n    const [pageDetails,setPageDetails] = useState({})\n    const [searchResult,setSearchResult] = useState(false)\n    const [filterResult,setFilterResult] = useState(false)\n    const [searchData,setSearchData] = useState(\"\")\n    const [type,setType] = useState(\"All\");\n    const [modalVisible, setModalVisible] = useState(false);\n    const [centerID, setCenterID] = useState(null);\n    const [currentCenter, setCurrentCenter] = useState(null);\n    const [open, setOpen] = useState(false);\n    const [statusInfo, setStatusInfo] = useState({\n        status: 'success',\n        message: ''\n    });\n    const [action, setAction] = useState('Disable');\n    const [openModal, setOpenModal] = useState(false);\n    const [msg, setMsg] = useState(''); \n\n    useEffect(() => {\n        fetchCenters(page);\n    }, [page])\n\n    function formatCentersList(data) {\n        const response = [];\n        let meta = {\n            counsellorId: 'Center ID',\n            name: 'State',\n            firstName: 'Name',\n            lastName: 'Phone',\n            traumaCodes: 'Email',\n            clients: 'Clients',\n            sessions: 'Providers',\n            sessionsHours: 'Devices',\n            type: 'Type',\n        };\n\n        if(user?.role?.type === 'admin') {\n            meta.disable_center  = 'Disable Center'\n        }\n\n        if (Array.isArray(data)) {\n            data.forEach((item) => {\n                response.push(formatData(item))\n            })\n            response['meta'] = meta\n        } else {\n            response.push(formatData(data))\n        }\n        return response\n    }\n\n    function formatData(item) {\n        const obj = {\n            id: (item && item.attributes && item.attributes.user && item.attributes.user.data && item.attributes.user.data.attributes && item.attributes.user.data.attributes.username) || \"\",\n            centerId: (item && item.id) || '',\n            state: item.attributes.state?.data\n                ? item.attributes.state.data.attributes.name\n                : '',\n            name: item.attributes.name,\n            phoneNumber: item.attributes.phone_number,\n            email: item.attributes.email,\n            clients: item.attributes.clients.data.length || 0,\n            counsellors: item.attributes.counsellors.data.length || 0,\n            devices: item.attributes.devices?.data.length || 0,\n            type: item.attributes.center_type.data\n                ? item.attributes.center_type.data.attributes.name\n                : '',\n        }\n\n        if(user?.role?.type === 'admin') {\n            obj.disable_center = {\n                center_id: item?.id,\n                disabled: item?.attributes?.user?.data?.attributes?.blocked || false\n            }\n        }\n    \n        return obj\n    }\n\n    const fetchCenters = (pageNumber) => {\n        setLoading(true)\n        fetchCenter(pageNumber)\n        .then((resp) => {\n            setLoading(false)\n            if(resp?.error?.name === 'UnauthorizedError'){\n                setOpenModal(true);\n                setMsg('Your session has expired. You will be logged out.');\n            } else  {\n                setRows(formatCentersList(resp.data))\n                setPageDetails(getMetaData(resp.meta))\n            }\n        })\n        .catch((err) => {\n            console.log(\"error\",err)\n        })\n    }\n\n    function sortCenters(search, filter, pageNo) {\n        setLoading(true);\n        findCenters(search, filter, pageNo)\n        .then((resp) => {\n            setLoading(false);\n            if(resp?.error?.name === 'UnauthorizedError'){\n                setOpenModal(true);\n                setMsg('Your session has expired. You will be logged out.');\n            } else  {\n                setRows(formatCentersList(resp.data))\n                setPageDetails(getMetaData(resp.meta))\n            }\n        }).catch((err) => {\n            console.log(\"error\",err)\n        })\n    } \n\n    const handleSearch = ({ target: { value }}) => {\n        setSearchData(value);\n        if(value && value.length > 2){\n            setSearchResult(true);\n            sortCenters(value, type, page);\n        }else if(value === \"\"){\n            if(type !== 'All') {\n                setFilterResult(true);\n                sortCenters('', type, page);\n            } else {\n                setSearchResult(false);\n                fetchCenters(page);\n            }\n        }\n    }\n\n    const handleChange = ({ target: { value }}) => {\n        setType(value);\n        if(value === 'All'){\n            if(searchData){\n                setSearchResult(true);\n                sortCenters(searchData, 'All', page);\n            } else {\n                setFilterResult(false)\n                fetchCenters(page)\n            }\n        } else {\n            setFilterResult(true)\n            sortCenters(searchData, value, page);\n        }\n    }\n\n    const handlePageChange = (event, newPage) => {\n        if(searchResult || filterResult){\n            sortCenters(searchData, type, Number(newPage)+1);\n        } else {\n            fetchCenters(Number(newPage)+1);\n        }\n        \n    }\n    const onClick = (id) => {\n        // navigate(`/counsellors/details/${id}`, {id: id})\n        navigate(`/center/details/${id}`, {id: id})\n    }\n\n    const handleReset = () => {\n        setSearchData('');\n        setType('All');\n        setSearchResult(false);\n        setFilterResult(false);\n        fetchCenters(page);\n    }\n    \n    const unlinkLicenseAndPassphrase = async () => {\n        let res = false;\n        try {\n            const clients = currentCenter?.clients;\n            for(let i = 0;i < clients.length; i++) {\n                let el = clients[i];\n                if(el.license){\n                    await unlinkLicense(el.license);\n                }\n            }\n            res = true;\n        } catch(err) {\n            res = false;\n        }\n        return res;\n    }\n    \n    const cancelSessions = async () => {\n        let res = false;\n        const sessions = currentCenter?.sessions;\n        const counsellors = currentCenter?.counsellors;\n        try {\n            if(counsellors.length) {\n                for(let i = 0;i < counsellors.length; i++){\n                    let provider = counsellors[i];\n                    const centers = provider.centers;\n                    if(centers.length === 1){ \n                        if(centers[0].id === currentCenter?.id){  // Provider is exclusive\n                            const _sessions = sessions.filter(el => (el?.center?.id === centers[0].id && el?.counsellor?.id === provider.id));\n                            await cancelAppointments(_sessions);\n                        }\n                    } else {\n                        const _center = centers.find(el => el?.id === currentCenter?.id);\n                        const _sessions = sessions.filter(el => (el?.center?.id === _center.id && el?.counsellor?.id === provider.id));\n                        await cancelAppointments(_sessions);\n                    }\n                }\n                res = true;\n            } else {\n                res = true;\n            }\n        } catch(err) {\n            res = false;\n        }\n        // try {\n        //     res = await cancelAppointments(sessions);\n        // } catch(err) {\n        //     res = false;\n        // }\n        return res;\n    }\n\n    const checkProvider = async (el) => {\n        let res = false;\n        try {\n            let options = {};\n            let provider = el;\n            let centers = provider.centers;\n            if(centers.length === 1){  // block provider\n                if(centers[0].id === currentCenter.id){\n                    options = {\n                        user: {\n                            data: {\n                                id: provider?.user?.id,\n                                blocked: true\n                            }\n                        }\n                    };\n    \n                    await disableProvider(el.id, options);\n                    res = true;\n                }\n            } else {       // unlink provider\n                let ids = centers.map(ele => {\n                    if(ele.id !== currentCenter.id) return ele.id\n                })\n    \n                options = {\n                    counsellor: {\n                        data: {\n                            id: el.id,\n                            centers: ids\n                        }\n                    }\n                }\n                await disableProvider(el.id, options);\n                let clients = currentCenter?.clients;\n                clients = clients.filter(ele => ele?.counsellor?.id === el?.id);\n                for (let i = 0;i < clients.length; i++) {\n                    let client = clients[i];\n                    let options = {\n                        data: {\n                            counsellor: null\n                        }\n                    };\n                    await unlinkProviderFromClient(client.id, options);\n                }\n                res = true; \n            }\n        } catch (err) {\n            res = false;\n        }\n        return res;\n    }\n\n    const blockProvider = async () => {\n        let res = false;\n        try {\n            const counsellors = currentCenter?.counsellors;\n            if(counsellors.length) {\n                for(let i = 0;i < counsellors.length; i++){\n                    let el = counsellors[i];\n                    res = await checkProvider(el);\n                }\n            } else if (counsellors.length === 0) {\n                res = true;\n            }\n        } catch(err) {\n            res = false;\n        }\n        return res;\n    }\n\n    const handleDisable = async(id) => {\n        setAction('Disable');\n        setCenterID(id);\n        const _center = await getCenterDetails(id);\n        if(_center?.error?.name === 'UnauthorizedError') {\n            setOpenModal(true);\n            setMsg('Your session has expired. You will be logged out.');\n        } else {\n            setCurrentCenter(_center);\n            setModalVisible(true);\n        }\n    }\n\n    const disableCenter = async () => {\n        setModalVisible(false);\n        if(centerID){\n            setLoading(true);\n            let res = await unlinkLicenseAndPassphrase();\n            if(res){\n                res = await cancelSessions();\n                if(res) {\n                    res = await blockProvider();\n                    if(res) {\n                        res = await blockCenter(centerID);\n                        setLoading(false);\n                        setOpen(true);\n                        setStatusInfo({\n                            ...statusInfo,\n                            status: 'success',\n                            message: 'Center Disabled Successfully'\n                        });\n                        fetchCenters(page);\n                    } else {\n                        setLoading(false);\n                        setOpen(true);\n                        setStatusInfo({\n                            ...statusInfo,\n                            status: 'error',\n                            message: 'Provider Disabling Failed'\n                        });\n                    }\n                } else {\n                    setLoading(false);\n                    setOpen(true);\n                    setStatusInfo({\n                        ...statusInfo,\n                        status: 'error',\n                        message: 'Cancelling Appointments Failed'\n                    });\n                }\n            } else {\n                setLoading(false);\n                setOpen(true);\n                setStatusInfo({\n                    ...statusInfo,\n                    status: 'error',\n                    message: 'Revoking License and Passphrase Failed'\n                });\n            }\n        }\n    }\n\n    const handleEnable = async (id) => {\n        setAction('Enable');\n        setCenterID(id);\n        const _center = await getCenterDetails(id);\n        if(_center?.error?.name === 'UnauthorizedError') {\n            setOpenModal(true);\n            setMsg('Your session has expired. You will be logged out.');\n        } else {\n            setCurrentCenter(_center);\n            setModalVisible(true);\n        }\n    }\n\n    const enableCenter = async () => {\n        setModalVisible(false);\n        if(centerID){\n            setLoading(true);\n            let res;\n            let options = {\n                user: {\n                    data: {\n                        id: currentCenter?.user?.id,\n                        blocked: false\n                    }\n                }\n            };\n            res = await unblockCenter(currentCenter?.id, options);\n            if(res) {\n                setLoading(false);\n                setOpen(true);\n                setStatusInfo({\n                    ...statusInfo,\n                    status: 'success',\n                    message: 'Center Enabled Successfully'\n                });\n                fetchCenters(page);\n            } else {\n                setLoading(false);\n                setOpen(true);\n                setStatusInfo({\n                    ...statusInfo,\n                    status: 'error',\n                    message: 'Enabling Center Failed'\n                });\n            }\n        }\n    }\n    \n    return (\n        <Grid container className=\"user-container\">\n            <Grid className=\"user-breadcrumb\">\n                <Breadcrumb routeSegments={[{ name: 'All Centers' }]} />\n            </Grid>\n            <Button\n                variant=\"contained\"\n                className=\"add-button\"\n                size=\"small\"\n                onClick={() => navigate('/centers/add')}\n            >\n                Add center\n            </Button>\n            <Grid sx={{ padding: '14px'}} container rowSpacing={3} columnSpacing={6}>\n                <Grid item lg={6} md={6} sm={12} xs={12}>\n                    <TextField\n                        label=\"Search Center\"\n                        variant=\"outlined\"\n                        // className=\"user-search\"\n                        fullWidth\n                        onChange={handleSearch}\n                        value={searchData}\n                        placeholder=\"Search center\"\n                        type=\"text\"\n                        InputProps={{\n                            startAdornment: <SearchIcon />,\n                        }}\n                    />\n                </Grid>\n\n                <Grid item lg={6} md={6} sm={12} xs={12}>    \n                    <Box className=\"select-role\">\n                        <FormControl fullWidth>\n                            <InputLabel>Type</InputLabel>\n                            <Select\n                                id=\"demo-simple-select\"\n                                value={type}\n                                label=\"Age\"\n                                onChange={handleChange}\n                            >\n                                <MenuItem value={'All'}>All</MenuItem>\n                                <MenuItem value={'CAC'}>CAC</MenuItem>\n                                <MenuItem value={'Hospital'}>Hospital</MenuItem>\n                                <MenuItem value={'Private'}>Private</MenuItem>\n                                <MenuItem value={'Clinic'}>Clinic</MenuItem>\n                            </Select>\n                        </FormControl>\n                    </Box>\n                </Grid>\n\n                <FormControl sx={{ marginBottom: '15px', marginTop: '20px', display: 'flex', width: '100%'}}>\n                    <Button\n                        color=\"primary\"\n                        variant='contained'\n                        onClick={handleReset}\n                        sx={{ alignSelf: 'flex-end'}}\n                    >\n                        Reset\n                    </Button>\n                </FormControl>\n            </Grid>\n            {loading && <Loading />}\n            {/* <CenterList\n            rows= {rows}\n            loading={loading}\n            pageDetails={pageDetails}\n            handlePageChange={handlePageChange}\n             /> */}\n\n            {!loading && rows.meta && (\n                <UsersCustomTable\n                    onClick={onClick}\n                    page={page}\n                    pageDetails={pageDetails}\n                    handlePageChange={handlePageChange}\n                    rows={rows}\n                    view={'center'}\n                    handleDisable={(id) => handleDisable(id)}\n                    handleEnable={(id) => handleEnable(id)}\n                />\n            )}\n\n            <ConfirmModal\n                open={modalVisible}\n                onConfirmDialogClose={() => {\n                    setCenterID(null);\n                    setCurrentCenter(null);\n                    setModalVisible(false);\n                }}\n                text={`Do you want to ${action === 'Disable' ? 'disable' : 'enable'} Center?`}\n                onYesClick={() => action === 'Disable' ? disableCenter() : enableCenter()}\n            />\n            <Snackbar\n                open={open}\n                anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n                autoHideDuration={3000}\n                onClose={() => {\n                    setOpen(false);\n                }}\n            >\n                <Alert\n                    onClose={() => {\n                        setOpen(false);\n                    }}\n                    variant=\"filled\"\n                    severity={statusInfo.status}\n                    sx={{ width: '100%' }}\n                >\n                    {statusInfo.message}\n                </Alert>\n            </Snackbar>\n            <SessionModal\n                open={openModal}\n                text={msg}\n                onConfirmDialogClose={() => {\n                    setMsg('');\n                    setOpenModal(false);\n                }}\n                onYesClick={() => {\n                    setMsg('');\n                    setOpenModal(false);\n                }}\n            />\n        </Grid>\n    )\n}\n\nexport default Centers;\n"],"sourceRoot":""}