{"version":3,"sources":["app/utils/counseler.data.formater.js","app/views/CenterView/Clinicians/Clinicians.jsx"],"names":["getTraumas","data","map","item","trauma_code","join","getSession","clientId","center","type","sessions","id","status","moment","scheduled_at","format","isBefore","startOf","scheduledAt","sessionId","session_id","disabled","formatSession","response","meta","name","gender","traumas","ethnicity","view_notes","forEach","obj","client","client_id","gender_bio","clientName","center_id","notes","push","clinicianMeta","clininicain_id","profesional_name","first_name","last_name","clients","disable_provider","formatClinicians","Array","isArray","cliniciansData","clinicId","attributes","user","username","length","provider_id","blocked","formatSessions","SessionData","title","start","toDate","end","add","session","Clinicians","useAuth","navigate","useNavigate","dispatch","useDispatch","useState","clinicians","setClinicians","loading","setLoading","React","pageDetails","setPageDetails","searchData","setSearchData","searchResult","setSearchResult","providerID","setProviderID","modalVisible","setModalVisible","currentProvider","setCurrentProvider","open","setOpen","message","statusInfo","setStatusInfo","action","setAction","fetchAllCounseloor","page","fetchCinicians","then","resp","getMetaData","catch","err","console","log","useEffect","resetClient","searchClinician","pageNumber","searchClinicians","disableClients","a","res","i","el","options","counsellor","unlinkProviderFromClient","cancelSessions","cancelAppointments","checkProvider","centers","disableProvider","ids","ele","handleDisable","fetchClinicianDetails","provider","blockProvider","handleEnable","linkProvider","includes","enableProvider","container","className","routeSegments","variant","size","onClick","label","onChange","e","value","target","placeholder","InputProps","startAdornment","handlePageChange","event","newPage","Number","rows","view","onConfirmDialogClose","text","onYesClick","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","severity","sx","width"],"mappings":"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","file":"static/js/58.b8098aec.chunk.js","sourcesContent":["import moment from 'moment';\n\nfunction getTraumas(data){\n    let traumaCode = ''\n    const code = data.map((item) => {\n        return item.trauma_code\n    })\n    traumaCode = code.join(', ')\n    return traumaCode\n}\n\nconst getSession = (data, clientId, center,type) => {\n    let sessions = data ? data : null\n    let obj\n    if(type && type === 'upcoming'){\n        obj = {\n            id: data.id,\n            status : sessions.status === 'scheduled' && moment(moment(sessions.scheduled_at).format('x'), 'x').isBefore(moment().startOf('second')) && 'missed' || sessions.status,\n            scheduledAt: `${moment(sessions.scheduled_at).format('DD MMMM, YYYY hh:mm A')}`,\n            sessionId: sessions.session_id,\n            clientId: clientId,\n            center: center,\n            disabled: data.disabled\n        }\n    } else {\n        obj = {\n            id: data.id,\n            status : (sessions.status === 'scheduled' || sessions.status === 'pending') && 'missed' || sessions.status,\n            scheduledAt: `${moment(sessions.scheduled_at).format('DD MMMM, YYYY hh:mm A')}`,\n            sessionId: sessions.session_id,\n            clientId: clientId,\n            center: center,\n            disabled: data.disabled\n        }\n    }\n    \n    return obj\n    // sessions.scheduled_at && sessions.status == 'scheduled' ? `${moment(sessions.scheduled_at).format('DD MMMM, YYYY hh:mm')} CST` : (sessions.status == 'pending' ? 'pending' : sessions.status == 'cancelled' ? 'Cancelled' : '-')\n}\nexport function formatSession(data,type = null) {\n    let response = [];\n    const meta = {\n        // id: \"ID\",\n        clientId: \"Client ID\",\n        name: \"Record Name\",\n        center: \"Center\",\n        gender: \"Birth Gender\",\n        // idGender: \"ID Gender\",\n        traumas: \"Trauma Codes\",\n        ethnicity: \"Ethnicity\",\n        scheduledAt: \"Scheduled\",\n        view_notes: \"Notes\"\n\n    }\n    data.forEach((item) => {\n        const obj = {\n            // id: item.id,\n            clientId: item?.client?.client_id,\n            name: item?.client?.name,\n            center: item?.center?.name,\n            gender: item?.client?.gender_bio,\n            // idGender: item.client.gender_identified,\n            traumas: item?.client?.traumas ? getTraumas(item?.client?.traumas) : '',\n            ethnicity: item?.client?.ethnicity ? item?.client?.ethnicity : '',\n            // scheduledAt: item.scheduled_at && item.status !== 'pending' ? moment(item.scheduled_at).format('DD MMMM, YYYY hh:mm') + ' CST' : 'pending',\n            scheduledAt: getSession(item,item?.client?.client_id, item?.center?.name, type),\n            // view_notes: item.notes ? item.notes : ''\n            view_notes: {\n                clientId: item?.client?.client_id,\n                clientName: item?.client?.name,\n                sessionId:item?.id,\n                center_id: item?.center?.id,\n                notes: item?.notes\n                // owned_by: item.attributes.owned_by,\n            },\n        };\n        response.push(obj)\n    })\n    response['meta']= meta\n    return response;\n}\n\nconst clinicianMeta = {\n    clininicain_id: \"Provider ID\",\n    profesional_name: \"Professional Name\",\n    first_name: 'First Name',\n    last_name: \"Last Name\",\n    traumas: \"Trauma Codes\",\n    status: \"Status\",\n    clients:\"Clients\",\n    sessions: \"Sessions\",\n    disable_provider: \"Disable Provider\"\n}\n\nexport function formatClinicians(data) {\n    const response = []\n    if (Array.isArray(data)) {\n        data.forEach((item) => {\n            response.push(cliniciansData(item))\n        })\n        response['meta'] = clinicianMeta;\n    } else {\n        response.push(cliniciansData(data))\n    }\n    return response\n}\n\nfunction getTraumaCodes(data) {\n    let traumaCode = ''\n    const code = data.map((item) => {\n        return item.attributes.trauma_code\n    })\n    traumaCode = code.join(', ')\n    return traumaCode\n}\n\nfunction cliniciansData(item) {\n    const obj = {\n        clinicId:item?.id || \"-\",\n        clininicain_id: (item && item.attributes?.user?.data?.attributes?.username) || '-',\n        profesional_name: (item && item.attributes && item.attributes.name) || '-',\n        first_name: (item && item.attributes && item.attributes.first_name) || '-',\n        last_name:(item && item.attributes && item.attributes.last_name) || '-',\n        traumas:(item && item.attributes && item.attributes.traumas && getTraumaCodes(item.attributes.traumas?.data)) || '-',\n        status: item?.attributes?.status || \"-\",\n        clients:(item && item.attributes && item.attributes.clients && item.attributes.clients.data && item.attributes.clients.data?.length) || '-',\n        sessions:(item && item.attributes && item.attributes.sessions && item.attributes.sessions.data && item.attributes.sessions?.data?.length) || '-',\n        disable_provider: {\n            provider_id: item?.id,\n            disabled: item?.attributes?.user?.data?.attributes?.blocked || false\n        }\n    }\n\n    return obj;\n}\n\n\nexport function formatSessions(data){\n    const sessions = []\n    if (Array.isArray(data)) {\n        data.forEach((item) => {\n            sessions.push(SessionData(item))\n        })\n    } else {\n        sessions.push(SessionData(data))\n    }\n    return sessions\n}\nfunction SessionData(item) {\n    const obj = {\n        title: (item?.client?.name+\"-\"+item?.client?.client_id) || \"Anonymous\", \n        start: moment(item?.scheduled_at).toDate(),\n        end: moment(item?.scheduled_at).add(50,'minutes').toDate(),\n        session:item\n    }\n    return obj\n}","import { \n    Alert,\n    Button, \n    Grid, \n    TextField,\n    Snackbar \n} from '@mui/material';\nimport { Breadcrumb } from 'app/components'\nimport React, { useEffect, useState } from 'react'\nimport './Clinicians.css'\nimport { fetchCinicians, searchClinicians } from 'app/services/counselorService'\nimport UsersCustomTable from 'app/components/UsersCustomTable/UsersCustomTable'\nimport { getMetaData } from 'app/utils/center.list.formatter'\nimport { formatClinicians } from 'app/utils/counseler.data.formater'\nimport Loading from 'app/components/MatxLoading/MatxLoading'\nimport { useNavigate } from 'react-router-dom'\nimport SearchIcon from '@mui/icons-material/Search'\nimport { useDispatch } from 'react-redux'\nimport { resetClient } from 'app/redux/actions/ClientIntakeActions'\nimport ConfirmModal from 'app/components/ConfirmModal/ConfirmModal';\nimport { fetchClinicianDetails } from 'app/services/counselorService';\nimport {\n    unlinkProviderFromClient,\n    cancelAppointments,\n    disableProvider\n} from 'app/utils/enable_disable_utils';\nimport useAuth from 'app/hooks/useAuth';\n\nconst Clinicians = () => {\n    const { user } = useAuth();\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n    const [clinicians, setClinicians] = useState([]);\n    // const [page, setPage] = React.useState(1)\n    const page = 1\n    const [loading, setLoading] = useState(false)\n    const [pageDetails, setPageDetails] = React.useState({})\n    const [searchData, setSearchData] = useState('')\n    const [searchResult, setSearchResult] = React.useState(false)\n    const [providerID, setProviderID] = useState(null);\n    const [modalVisible, setModalVisible] = useState(false);\n    const [currentProvider, setCurrentProvider] = useState(null);\n    const [open, setOpen] = useState(false);\n    const [statusInfo, setStatusInfo] = useState({\n        status: 'success',\n        message: ''\n    });\n    const [action, setAction] = useState('Disable');\n\n    const handlePageChange = (event, newPage) => {\n        if (searchResult) {\n            searchClinician(searchData, Number(newPage) + 1)\n        } else {\n            fetchAllCounseloor(Number(newPage) + 1)\n        }\n    }\n\n    // function getSessionHours(data) {\n    //     let totalHours = 0\n    //     totalHours = data.reduce(function (acc, item) {\n    //         return acc + item.duration\n    //     }, 0)\n    //     return totalHours\n    // }\n\n    const fetchAllCounseloor = (page) => {\n        setLoading(true)\n        fetchCinicians(page)\n            .then((resp) => {\n                setLoading(false)\n                const data = formatClinicians(resp.data);\n                setClinicians(data);\n                setPageDetails(getMetaData(resp.meta))\n            })\n            .catch((err) => {\n                console.log('error', err)\n            })\n    }\n\n    function onClick(id) {\n        navigate(`/clinicians/details/${id}`)\n    }\n\n    useEffect(() => {\n        dispatch(resetClient())\n        fetchAllCounseloor(page)\n    }, [dispatch])\n\n    const handleSearch = (e) => {\n        let value = e.target.value\n        setSearchData(value)\n        if (value && value.length > 2) {\n            setSearchResult(true)\n            searchClinician(value, page)\n        } else if (value === '') {\n            fetchAllCounseloor(page)\n            setSearchResult(false)\n        }\n    }\n\n    const searchClinician = (data, pageNumber) => {\n        setLoading(true)\n        searchClinicians(data, pageNumber)\n            .then((resp) => {\n                setLoading(false)\n                const data = formatClinicians(resp.data)\n                setClinicians(data)\n                setPageDetails(getMetaData(resp.meta))\n            })\n            .catch((err) => {\n                console.log('error', err)\n            })\n    }\n\n    \n    const disableClients = async () => {\n        let res = false;\n        try {\n            let clients = currentProvider?.clients;\n            if(clients.length) {\n                // let ids = clients.map(el => el.id);\n                for (let i = 0;i < clients.length; i++) {\n                    let el = clients[i];\n                    let options = {\n                        data: {\n                            counsellor: null\n                        }\n                    };\n\n                    await unlinkProviderFromClient(el.id, options);\n                    // if(el?.center?.id === user?.center?.id){\n                    //     let index = ids.indexOf(el.id);\n                    //     ids.splice(index, 1);\n                    //     let options = {\n                    //         counsellor: {\n                    //             data: {\n                    //                 id: currentProvider?.id,\n                    //                 clients: ids\n                    //             }\n                    //         }\n                    //     };\n                    //     await disableProvider(currentProvider?.id, options);\n                    // }\n                }\n                res = true;\n            } else {\n                res = true;\n            }\n        } catch(err) {\n            res = false;\n        }\n        return res;\n    }\n\n    const cancelSessions = async () => {\n        let res = false;\n        const sessions = currentProvider?.sessions;\n        try {\n            res = await cancelAppointments(sessions);\n        } catch(err) {\n            res = false;\n        }\n        return res;\n    }\n\n    const checkProvider = async () => {\n        let res = false;\n        let centers;\n        try {\n            centers = currentProvider?.centers;\n            if(centers.length === 1) {\n                if(centers[0].id === user?.center?.id) {\n                    let options = {\n                        user: {\n                            data: {\n                                id: currentProvider?.user?.id,\n                                blocked: true\n                            }\n                        }\n                    };\n                    await disableProvider(currentProvider?.id, options);\n                    res = true;\n                }\n            } else {\n                let ids = centers.map(ele => {\n                    if(ele.id !== user?.center?.id) return ele.id\n                });\n\n                let options = {\n                    counsellor: {\n                        data: {\n                            id: currentProvider?.id,\n                            centers: ids\n                        }\n                    }\n                }\n                await disableProvider(currentProvider?.id, options);\n                res = true; \n            }\n        } catch(err) {\n            res = false;\n        }\n        return res;\n    }\n\n    const handleDisable = async (id) => {\n        setAction('Disable');\n        setProviderID(id);\n        let provider = await fetchClinicianDetails(id);\n        setCurrentProvider(provider);\n        setModalVisible(true);\n    }\n\n    const blockProvider = async () => {\n        setModalVisible(false);\n        if(providerID) {\n            setLoading(true);\n            let res = await disableClients();\n            if(res){\n                res = await cancelSessions();\n                if(res) {\n                    res = await checkProvider();\n                    setLoading(false);\n                    setOpen(true);\n                    setStatusInfo({\n                        ...statusInfo,\n                        status: 'success',\n                        message: 'Provider Disabled Successfully'\n                    });\n                    console.log('res', res);\n                    fetchAllCounseloor(page);\n                } else {\n                    setLoading(false);\n                    setOpen(true);\n                    setStatusInfo({\n                        ...statusInfo,\n                        status: 'error',\n                        message: 'Cancelling Appointments Failed'\n                    });\n                }\n            } else {\n                setLoading(false);\n                setOpen(true);\n                setStatusInfo({\n                    ...statusInfo,\n                    status: 'error',\n                    message: 'Unlinking Clients from Provider Failed'\n                });\n            }\n        }\n    }\n\n    const handleEnable = async(id) => {\n        setAction('Enable');\n        setProviderID(id);\n        let provider = await fetchClinicianDetails(id);\n        setCurrentProvider(provider);\n        setModalVisible(true);\n    }\n\n    const linkProvider = async () => {\n        let res = false;\n        try {\n            const centers = currentProvider?.centers;\n            if(centers.length === 1) {\n                if(centers[0].id === user?.center?.id) {\n                    let options = {\n                        user: {\n                            data: {\n                                id: currentProvider?.user?.id,\n                                blocked: false\n                            }\n                        }\n                    };\n\n                    await disableProvider(currentProvider?.id, options);\n                    res = true;\n                }\n            } else {\n                let ids = centers.map(el => el.id);\n                if(ids.includes(user?.center?.id)){}\n                else {\n                    ids.push(user?.center?.id);\n                }\n\n                let options = {\n                    counsellor: {\n                        data: {\n                            id: currentProvider?.id,\n                            centers: ids\n                        }\n                    }\n                }\n                await disableProvider(currentProvider?.id, options);\n                res = true; \n            }\n        } catch(err) {\n            res = false;\n        }\n        return res;\n    }\n\n    const enableProvider = async () => {\n        setModalVisible(false);\n        if(providerID){\n            setLoading(true);\n            let res = await linkProvider();\n            if(res) {\n                setLoading(false);\n                setOpen(true);\n                setStatusInfo({\n                    ...statusInfo,\n                    status: 'success',\n                    message: 'Provider Enabled Successfully'\n                });\n                console.log('res', res);\n                fetchAllCounseloor(page);\n            } else {\n                setLoading(false);\n                setOpen(true);\n                setStatusInfo({\n                    ...statusInfo,\n                    status: 'error',\n                    message: 'Enabling Provider Failed'\n                });\n            }\n        }\n    }\n\n    return (\n        <>\n            <Grid container className=\"client-container\">\n                <Grid className=\"client-breadcrumb\">\n                    <Breadcrumb routeSegments={[{ name: 'All Providers' }]} />\n                </Grid>\n                <Button\n                    variant=\"contained\"\n                    className=\"add-button\"\n                    size=\"small\"\n                    onClick={() => navigate('/clinicians/add')}\n                >\n                    Add Provider\n                </Button>\n                <Grid className=\"user-box\">\n                    <TextField\n                        label=\"Search Provider\"\n                        variant=\"outlined\"\n                        className=\"user-search\"\n                        onChange={handleSearch}\n                        placeholder=\"Search Providers\"\n                        type=\"text\"\n                        value={searchData}\n                        InputProps={{\n                            startAdornment: <SearchIcon />,\n                        }}\n                    />\n                </Grid>\n                {loading && <Loading />}\n                {!loading && clinicians?.meta && (\n                    <UsersCustomTable\n                        onClick={onClick}\n                        page={page}\n                        pageDetails={pageDetails}\n                        handlePageChange={handlePageChange}\n                        rows={clinicians}\n                        view={'clinician'}\n                        handleDisable={(id) => handleDisable(id)}\n                        handleEnable={(id) => handleEnable(id)}\n                    />\n                )}\n            </Grid>\n            <ConfirmModal\n                open={modalVisible}\n                onConfirmDialogClose={() => {\n                    setProviderID(null);\n                    setCurrentProvider(null);\n                    setModalVisible(false);\n                }}\n                text={`Do you want to ${action === 'Disable' ? 'disable' : 'enable'} Provider?`}\n                onYesClick={() => action === 'Disable' ? blockProvider(): enableProvider()}\n            />\n            <Snackbar\n                open={open}\n                anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n                autoHideDuration={3000}\n                onClose={() => {\n                    setOpen(false);\n                }}\n            >\n                <Alert\n                    onClose={() => {\n                        setOpen(false);\n                    }}\n                    variant=\"filled\"\n                    severity={statusInfo.status}\n                    sx={{ width: '100%' }}\n                >\n                    {statusInfo.message}\n                </Alert>\n            </Snackbar>\n        </>\n    )\n}\n\nexport default Clinicians\n"],"sourceRoot":""}