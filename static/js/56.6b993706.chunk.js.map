{"version":3,"sources":["app/components/SessionModal/SessionModal.js","app/views/CenterView/Clinicians/AddClinician.jsx"],"names":["style","position","top","left","transform","width","bgcolor","border","boxShadow","p","styled","Button","display","color","marginTop","backgroundColor","SessionModal","open","onConfirmDialogClose","text","navigate","onYesClick","useNavigate","handleLogout","localStorage","removeItem","keepMounted","onClose","sx","id","variant","component","justifyContent","alignItems","gap","onClick","FlexBox","Box","StyledAvatar","Avatar","height","TextField","TextValidator","marginBottom","UploadButton","flexDirection","borderRadius","borderColor","AddClinician","user","useAuth","useState","firstName","lastName","email","area_code","phone_number","traumas","logo","logo_image","counsellorInfo","setCounsellorInfo","setOpen","success","setSuccess","message","setMessage","traumaList","setTraumaList","loading","setLoading","roles","setRoles","openModal","setOpenModal","msg","setMsg","formEl","useRef","dispatch","useDispatch","handleChange","event","persist","target","name","value","useEffect","resetClient","ValidatorForm","addValidationRule","length","isNaN","a","getTraumaList","resp","error","data","getAllUserRoles","forEach","item","type","console","log","removeValidationRule","getBase64","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","upload","result","onerror","handleFileUpload","e","files","includes","base64","uploadFile","formData","FormData","append","access_token","accessToken","fetch","method","headers","authorization","body","response","JSON","parse","handleSubmit","traumaCodes","map","find","el","attributes","trauma_code","options","counsellor","first_name","last_name","centers","center","status","publishedAt","moment","format","split","slice","confirmed","blocked","role","url","createCounsellor","then","catch","err","container","className","routeSegments","ref","onSubmit","onError","rowSpacing","columnSpacing","lg","md","sm","xs","autoFocus","margin","label","onChange","fullWidth","validators","errorMessages","minWidth","mt","labelId","multiple","input","disabled","i","trauma_name","src","hidden","accept","marginLeft","flexWrap","mr","size","ml","current","resetValidations","anchorOrigin","vertical","horizontal","autoHideDuration","severity"],"mappings":"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","file":"static/js/56.6b993706.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@mui/material/Button';\nimport { styled } from '@mui/system';\nimport { \n    Modal, \n    Typography\n} from '@mui/material';\nimport { Box } from '@mui/system';\nimport { useNavigate } from 'react-router-dom';\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'background.paper',\n    border: '2px solid #fff',\n    boxShadow: 24,\n    p: 4,\n};\n\nconst CancelButton = styled(Button)(() => ({\n    display: 'block',\n    color: '#fff',\n    marginTop: '20px',\n    width: '86px',\n    backgroundColor: '#e15260',\n    '&:hover': {\n        backgroundColor: '#cc2333',\n        color: '#fff'\n    }\n}));\n\nconst SessionModal = ({\n    open,\n    onConfirmDialogClose,\n    text,\n    onYesClick\n}) => {\n    const navigate = useNavigate();\n\n    const handleLogout = () => {\n        onConfirmDialogClose();\n        localStorage.removeItem('accessToken');\n        navigate('/session/signin');\n    }\n\n    return (\n        <div>\n            <Modal\n                keepMounted\n                open={open}\n                onClose={() => handleLogout()}\n                aria-labelledby=\"keep-mounted-modal-title\"\n                aria-describedby=\"keep-mounted-modal-description\"\n            >\n                <Box sx={style}>\n                    <Typography\n                        id=\"keep-mounted-modal-title\"\n                        variant=\"h6\"\n                        component=\"h2\"\n                        sx={{color:\"#333\" }}\n                    >\n                        {text}\n                    </Typography>\n                    {/* <Box sx={{\n                        display:\"table\",\n                        marginLeft:'auto',\n                        marginRight:\"0px\"\n                    }}> */}\n                    {/* <Button onClick={handleClose} variant=\"contained\" color=\"error\">Cancel</Button> */}\n                    {/* <Button onClick={handleEdit} variant=\"contained\" sx={{ ml: 2 }}>Yes</Button> */}\n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent:'flex-end',\n                            alignItems: 'center',\n                            gap: '1rem',\n                        }}\n                    >\n                        {/* <CancelButton onClick={onConfirmDialogClose}>\n                            Cancel\n                        </CancelButton> */}\n                        <Box\n                            position=\"relative\"\n                            sx={{ display: 'block', marginTop: '20px' }}\n                        >\n                            <Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={() => handleLogout()}\n                            >\n                                Ok\n                            </Button>\n                        </Box>\n                    </div>\n                </Box>\n            </Modal>\n        </div>\n    )\n}\n\nexport default SessionModal;","import {\n    Button,\n    Icon,\n    Grid,\n    MenuItem,\n    Select,\n    OutlinedInput,\n    InputLabel,\n    FormControl,\n    Avatar,\n    Snackbar,\n    Alert,\n} from '@mui/material'\nimport { styled, Box } from '@mui/system'\nimport React, { useState, useEffect, useRef } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\nimport moment from 'moment'\n\nimport {\n    createCounsellor,\n    getTraumaList,\n    getAllUserRoles,\n} from 'app/services/userService'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { LoadingButton } from '@mui/lab'\nimport useAuth from 'app/hooks/useAuth'\nimport \"./Clinicians.css\"\nimport { Breadcrumb } from 'app/components'\nimport { useDispatch } from 'react-redux'\nimport { resetClient } from 'app/redux/actions/ClientIntakeActions'\nimport SessionModal from 'app/components/SessionModal/SessionModal';\n\n\nconst FlexBox = styled(Box)(() => ({\n    display: 'flex',\n    alignItems: 'center',\n}))\n\nconst StyledAvatar = styled(Avatar)(() => ({\n    width: '120px !important',\n    height: '120px !important',\n    border: '2px',\n}))\n\nconst TextField = styled(TextValidator)(() => ({\n    width: '100%',\n    marginBottom: '16px',\n}))\n\nconst UploadButton = styled(Button)(() => ({\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 120,\n    height: 120,\n    borderRadius: '50%',\n    borderColor: '#3498db',\n    // borderStyle: 'dotted'\n}))\n\nconst AddClinician = () => {\n    const navigate = useNavigate()\n    const {user} = useAuth()\n    const [counsellorInfo, setCounsellorInfo] = useState({\n        firstName: '',\n        lastName: '',\n        email: '',\n        area_code: '',\n        phone_number: '',\n        traumas: [],\n        logo: null,\n        logo_image: '',\n    })\n    const [open,setOpen] = useState(false)\n    const [success,setSuccess] = useState(false)\n    const [message,setMessage] = useState(\"\")\n    const [traumaList, setTraumaList] = useState([])\n    const [loading, setLoading] = useState(false)\n    const [roles, setRoles] = useState(null);\n    const [openModal, setOpenModal] = useState(false);\n    const [msg, setMsg] = useState('');\n    const formEl = useRef()\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(resetClient())\n        ValidatorForm.addValidationRule('MAX_CODE_LENGTH', (value) => {\n            if (value && value.length !== 3) {\n                return false\n            }\n            return true\n        })\n\n        ValidatorForm.addValidationRule('VALID_INPUT', (value) => {\n            if (value && isNaN(value)) {\n                return false\n            }\n            return true\n        })\n\n        ValidatorForm.addValidationRule('MAX_PHONE_LENGTH', (value) => {\n            if (value && value.length !== 7) {\n                return false\n            }\n            return true\n        })\n\n        ValidatorForm.addValidationRule('MAX_POSTAL_CODE', (value) => {\n            if (value && value.length !== 5) {\n                return false\n            }\n            return true\n        })\n        ;(async () => {\n            try {\n                const resp = await getTraumaList();\n                if(resp?.error?.name === 'UnauthorizedError'){\n                    setOpenModal(true);\n                    setMsg('Your session has expired. You will be logged out.');\n                } \n                if (resp && resp.data) {\n                    setTraumaList(resp.data)\n                }\n                const { roles } = await getAllUserRoles()\n                if (roles && roles.length > 0) {\n                    roles.forEach((item) => {\n                        if (item.type === 'counsellor') {\n                            setRoles(item)\n                        }\n                    })\n                }\n            } catch (err) {\n                console.log('err', err)\n            }\n        })()\n        return () => {\n            ValidatorForm.removeValidationRule('MAX_CODE_LENGTH')\n            ValidatorForm.removeValidationRule('VALID_INPUT')\n            ValidatorForm.removeValidationRule('MAX_PHONE_LENGTH')\n            ValidatorForm.removeValidationRule('MAX_POSTAL_CODE')\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    function handleChange(event) {\n        event.persist()\n        setCounsellorInfo({\n            ...counsellorInfo,\n            [event.target.name]: event.target.value,\n        })\n    }\n\n    const getBase64 = function (file) {\n        return new Promise((resolve) => {\n            let reader = new FileReader()\n            reader.readAsDataURL(file)\n            reader.onload = function (upload) {\n                resolve(upload.target.result)\n            }\n            reader.onerror = function (error) {\n                console.log('Error: ', error)\n            }\n        })\n    }\n\n    const handleFileUpload = async (e) => {\n        const file = e.target.files[0]\n        const fileTypes = [\n            'image/jpeg',\n            'image/jpg',\n            'image/png',\n            'image/svg',\n            'image/svg+xml',\n        ]\n        if (fileTypes.includes(file.type)) {\n            file.base64 = await getBase64(file)\n            setCounsellorInfo({ ...counsellorInfo, logo: file })\n        } else {\n            // toast.error(\n            //     'Only files with following extensions are allowed: jpeg, jpg, png, svg',\n            //     {\n            //         theme: 'colored',\n            //     }\n            // )\n            setMessage('Only files with following extensions are allowed: jpeg, jpg, png, svg')\n            setOpen(true)\n        }\n    }\n\n    const uploadFile = async (file) => {\n        const formData = new FormData()\n        formData.append('files', file)\n\n        let access_token = ''\n        if (localStorage.accessToken) {\n            access_token = localStorage.accessToken\n        }\n\n        let response = await fetch('http://localhost:1337/api/upload', {\n            method: 'post',\n            headers: {\n                authorization: 'Bearer ' + access_token,\n            },\n            body: formData,\n        })\n\n        let upload = await response.text()\n\n        return JSON.parse(upload)\n    }\n\n    const clearFields = () => {\n        formEl.current.resetValidations()\n        setCounsellorInfo({\n            ...counsellorInfo,\n            firstName: '',\n            lastName: '',\n            email: '',\n            area_code,\n            phone_number: '',\n            traumas: [],\n            logo: null,\n            logo_image: '',\n        })\n        navigate(-1)\n    }\n\n    const handleSubmit = async (event) => {\n        const {\n            firstName,\n            lastName,\n            email,\n            area_code,\n            phone_number,\n            traumas,\n            logo,\n        } = counsellorInfo\n        setLoading(true)\n        let upload\n\n        if (logo) {\n            upload = await uploadFile(logo)\n        }\n\n        // const traumaObj = traumaList.find(el => el.attributes.trauma_code === traumas);\n        const traumaCodes = traumas.map((item) => {\n            // eslint-disable-next-line array-callback-return\n            return traumaList.find((el) => {\n                if (el && el.attributes && el.attributes.trauma_code === item) {\n                    return el.id\n                }\n            })\n        })\n\n        let options = {\n            counsellor: {\n                data: {\n                    name: firstName + ' ' + lastName,\n                    first_name: firstName,\n                    last_name: lastName,\n                    email: email,\n                    area_code: area_code,\n                    phone_number: phone_number,\n                    centers:user?.center?.id,\n                    status:'Pending',\n                    traumas: traumaCodes,\n                    publishedAt:\n                        moment().format().split('T')[0] +\n                        ' ' +\n                        moment().format().split('T')[1].slice(0, 8),\n                },\n            },\n            traumas: traumaCodes,\n            user: {\n                data: {\n                    email: email,\n                    confirmed: true,\n                    blocked: false,\n                    role: roles.id,\n                },\n            },\n        }\n\n        if (logo) {\n            options.counsellor.data.logo_image = upload[0].url || ''\n        }\n        createCounsellor(options)\n            .then((resp) => {\n                if(resp?.error?.name === 'UnauthorizedError'){\n                    setOpenModal(true);\n                    setMsg('Your session has expired. You will be logged out.');\n                } \n                if (resp && resp.status === 'success') {\n                    // toast.success('Provider created successfully', {\n                    //     theme: 'colored',\n                    // })\n                    setMessage(\"Provider created successfully\")\n                    setSuccess(true)\n                    // setTimeout(() => {\n                    //     setLoading(false)\n                    //     navigate('/clinicians')\n                    // }, 3000)\n                } else if (resp && resp.status === 'fail') {\n                    setLoading(false)\n                    // toast.error(resp.message, {\n                    //     theme: 'colored',\n                    // })\n                    setMessage(resp.message)\n                    setOpen(true)\n                } else {\n                    setLoading(false)\n                    // toast.error('Something went wrong', {\n                    //     theme: 'colored',\n                    // })\n                    setMessage('Something went wrong')\n                    setOpen(true)\n                }\n            })\n            .catch((err) => {\n                setLoading(false)\n                // toast.error('Something went wrong', {\n                //     theme: 'colored',\n                // })\n                setMessage('Something went wrong')\n                setOpen(true)\n            })\n    }\n\n    const {\n        firstName,\n        lastName,\n        email,\n        area_code,\n        phone_number,\n        traumas,\n        logo,\n    } = counsellorInfo\n  return (\n      <>\n          <Grid container className=\"clinician-container\">\n              <Grid className=\"client-breadcrumb\">\n                  <Breadcrumb routeSegments={[{ name: 'Add Provider' }]} />\n              </Grid>\n              {/* <AddCounselor /> */}\n              <div className=\"center-card\">\n                  <ValidatorForm\n                      ref={formEl}\n                      onSubmit={handleSubmit}\n                      onError={() => null}\n                  >\n                      <Grid container rowSpacing={2} columnSpacing={6}>\n                          <Grid item lg={6} md={6} sm={12} xs={12}>\n                              <TextField\n                                  autoFocus\n                                  margin=\"dense\"\n                                  id=\"first_name\"\n                                  name=\"firstName\"\n                                  label=\"First Name*\"\n                                  type=\"text\"\n                                  value={firstName}\n                                  onChange={handleChange}\n                                  fullWidth\n                                  validators={['required']}\n                                  errorMessages={['This field is required']}\n                              />\n                          </Grid>\n                          <Grid item lg={6} md={6} sm={12} xs={12}>\n                              <TextField\n                                  margin=\"dense\"\n                                  id=\"last_name\"\n                                  name=\"lastName\"\n                                  label=\"Last Name*\"\n                                  type=\"text\"\n                                  value={lastName}\n                                  onChange={handleChange}\n                                  fullWidth\n                                  validators={['required']}\n                                  errorMessages={['This field is required']}\n                              />\n                          </Grid>\n                      </Grid>\n                      <Grid container rowSpacing={2} columnSpacing={6}>\n                          <Grid item lg={6} md={6} sm={12} xs={12}>\n                              <TextField\n                                  margin=\"dense\"\n                                  id=\"email\"\n                                  name=\"email\"\n                                  label=\"Email*\"\n                                  type=\"email\"\n                                  value={email}\n                                  onChange={handleChange}\n                                  fullWidth\n                                  validators={['required', 'isEmail']}\n                                  errorMessages={[\n                                      'This field is required',\n                                      'email is not valid',\n                                  ]}\n                              />\n                          </Grid>\n                          <Grid\n                              item\n                              lg={6}\n                              md={6}\n                              sm={12}\n                              xs={12}\n                              style={{ display: 'flex' }}\n                              className=\"add-phone\"\n                          >\n                              <Grid item xs={3} sm={3} md={3} lg={3}>\n                                  <TextField\n                                      margin=\"dense\"\n                                      id=\"area_code\"\n                                      name=\"area_code\"\n                                      label=\"Area Code*\"\n                                      type=\"text\"\n                                      value={area_code}\n                                      onChange={handleChange}\n                                      fullWidth\n                                      validators={[\n                                          'required',\n                                          'VALID_INPUT',\n                                          'MAX_CODE_LENGTH',\n                                      ]}\n                                      errorMessages={[\n                                          'This field is required',\n                                          'Invalid area code',\n                                          'Area code should have 3 digits',\n                                      ]}\n                                      // validators={['required']}\n                                      // errorMessages={['This field is required']}\n                                  />\n                              </Grid>\n                              <Grid item xs={1} sm={1} md={1} lg={1}>\n                                  <div className=\"phone_line\">&nbsp;</div>\n                              </Grid>\n                              <Grid item xs={8} sm={8} md={8} lg={8}>\n                                  <TextField\n                                      margin=\"dense\"\n                                      id=\"phone_number\"\n                                      name=\"phone_number\"\n                                      label=\"Phone Number*\"\n                                      type=\"text\"\n                                      value={phone_number}\n                                      onChange={handleChange}\n                                      fullWidth\n                                      validators={[\n                                          'required',\n                                          'VALID_INPUT',\n                                          'MAX_PHONE_LENGTH',\n                                      ]}\n                                      errorMessages={[\n                                          'This field is required',\n                                          'Invalid phone number',\n                                          'Phone number must be of 7 digits',\n                                      ]}\n                                      // validators={['required']}\n                                      // errorMessages={['This field is required']}\n                                  />\n                              </Grid>\n                          </Grid>\n                      </Grid>\n                      <Grid container rowSpacing={2} columnSpacing={6}>\n                          <Grid item lg={6} md={6} sm={12} xs={12}>\n                              <Box sx={{ minWidth: 120 }}>\n                                  <FormControl sx={{ mt: 2, width: '100%' }}>\n                                      <InputLabel id=\"open-select-label\">\n                                          Trauma Type\n                                      </InputLabel>\n                                      <Select\n                                          labelId=\"open-select-label\"\n                                          margin=\"dense\"\n                                          id=\"center_type\"\n                                          name=\"traumas\"\n                                          multiple\n                                          value={traumas}\n                                          input={\n                                              <OutlinedInput label=\"Trauma Type\" />\n                                          }\n                                          // InputLabelProps={{shrink: false}}\n                                          onChange={(e) =>\n                                              setCounsellorInfo({\n                                                  ...counsellorInfo,\n                                                  traumas: e.target.value,\n                                              })\n                                          }\n                                          fullWidth\n                                          validators={['required']}\n                                      >\n                                          <MenuItem disabled value=\"\">\n                                              <em>Trauma Type</em>\n                                          </MenuItem>\n                                          {traumaList &&\n                                              traumaList.map((item, i) => (\n                                                  <MenuItem\n                                                      key={i}\n                                                      value={\n                                                          item.attributes\n                                                              .trauma_code\n                                                      }\n                                                  >\n                                                      {\n                                                          item.attributes\n                                                              .trauma_name\n                                                      }\n                                                  </MenuItem>\n                                              ))}\n                                      </Select>\n                                  </FormControl>\n                              </Box>\n                          </Grid>\n                      </Grid>\n                      <Grid\n                          item\n                          lg={12}\n                          style={{\n                              display: 'flex',\n                              flexDirection: 'column',\n                              justifyContent: 'center',\n                              alignItems: 'center',\n                              margin: '20px',\n                          }}\n                      >\n                          {logo ? (\n                              <StyledAvatar src={logo.base64} />\n                          ) : (\n                              <UploadButton\n                                  variant=\"contained\"\n                                  component=\"label\"\n                              >\n                                  <Icon>file_upload_outlined</Icon>\n                                  Upload Logo\n                                  <input\n                                      type=\"file\"\n                                      hidden\n                                      accept=\"image/*\"\n                                      multiple\n                                      onChange={handleFileUpload}\n                                  />\n                              </UploadButton>\n                          )}\n                          <Grid item style={{ flexDirection: 'column' }}>\n                              <Button\n                                  variant=\"contained\"\n                                  component=\"label\"\n                                  color=\"inherit\"\n                                  sx={{\n                                      marginLeft: '15px',\n                                      marginTop: '15px',\n                                      height: '35px',\n                                      marginBottom: '16px',\n                                  }}\n                                  onClick={() =>\n                                      setCounsellorInfo({\n                                          ...counsellorInfo,\n                                          logo: null,\n                                          logo_image: '',\n                                      })\n                                  }\n                              >\n                                  Reset Logo\n                              </Button>\n                          </Grid>\n                      </Grid>\n                      <div\n                          style={{\n                              display: 'flex',\n                              alignItems: 'center',\n                              gap: '1rem',\n                          }}\n                      >\n                          <FlexBox flexWrap=\"wrap\">\n                              <Box mr={2} position=\"relative\" mt={4}>\n                                  <LoadingButton\n                                      size=\"medium\"\n                                      loading={loading}\n                                      variant=\"contained\"\n                                      type=\"submit\"\n                                  >\n                                      Submit\n                                  </LoadingButton>\n\n                                  <Button\n                                      sx={{ ml: 2 }}\n                                      variant=\"contained\"\n                                      color=\"error\"\n                                      onClick={() => clearFields()}\n                                  >\n                                      Cancel\n                                  </Button>\n                              </Box>\n                          </FlexBox>\n                      </div>\n                  </ValidatorForm>\n                  {/* <ToastContainer\n                      position=\"top-center\"\n                      autoClose={3000}\n                      hideProgressBar={true}\n                      newestOnTop={false}\n                  /> */}\n                  <Snackbar\n                      open={open}\n                      anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n                      autoHideDuration={2000}\n                      onClose={() => {\n                          setOpen(false)\n                      }}\n                  >\n                      <Alert\n                          onClose={() => {\n                              setOpen(false)\n                          }}\n                          variant=\"filled\"\n                          severity={\"error\"}\n                          sx={{ width: '100%' }}\n                      >\n                          {message}\n                      </Alert>\n                  </Snackbar>\n                  <Snackbar\n                      open={success}\n                      anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n                      autoHideDuration={2000}\n                      onClose={() => {\n                          setOpen(false)\n                          navigate('/clinicians')\n                      }}\n                  >\n                      <Alert\n                          onClose={() => {\n                              setOpen(false)\n                              navigate('/clinicians')\n                          }}\n                          variant=\"filled\"\n                          severity={\"success\"}\n                          sx={{ width: '100%' }}\n                      >\n                          {message}\n                      </Alert>\n                  </Snackbar>\n                  <SessionModal\n                open={openModal}\n                text={msg}\n                onConfirmDialogClose={() => {\n                    setMsg('');\n                    setOpenModal(false);\n                }}\n                onYesClick={() => {\n                    setMsg('');\n                    setOpenModal(false);\n                }}\n            />\n              </div>\n          </Grid>\n      </>\n  )\n}\n\nexport default AddClinician"],"sourceRoot":""}