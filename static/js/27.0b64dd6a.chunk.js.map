{"version":3,"sources":["app/components/SessionModal/SessionModal.js","app/components/UsersCustomTable/UsersCustomTable.jsx","app/services/clientService.js","../node_modules/@mui/material/Alert/alertClasses.js","../node_modules/@mui/material/Alert/Alert.js","../node_modules/@mui/material/internal/svg-icons/SuccessOutlined.js","../node_modules/@mui/material/internal/svg-icons/ReportProblemOutlined.js","../node_modules/@mui/material/internal/svg-icons/ErrorOutline.js","../node_modules/@mui/material/internal/svg-icons/InfoOutlined.js","app/services/centerService.js","app/utils/center.list.formatter.js","app/utils/client.list.formatter.js","app/components/AssignDialog/AssignClinician.jsx","app/components/AssignDialog/IssueLisence.jsx","app/components/AssignDialog/AssignDevice.jsx","app/components/AssignDialog/DeviceIssueConfirmDialog.jsx","../node_modules/@mui/material/Stack/Stack.js","../node_modules/@mui/x-date-pickers/DateTimePicker/shared.js","../node_modules/@mui/x-date-pickers/internals/components/PickersToolbarText.js","../node_modules/@mui/x-date-pickers/internals/components/PickersToolbarButton.js","../node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePickerTabs.js","../node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePickerToolbar.js","../node_modules/@mui/x-date-pickers/internals/hooks/validation/useTimeValidation.js","../node_modules/@mui/x-date-pickers/internals/hooks/validation/useDateTimeValidation.js","../node_modules/@mui/x-date-pickers/DesktopDateTimePicker/DesktopDateTimePicker.js","../node_modules/@mui/x-date-pickers/MobileDateTimePicker/MobileDateTimePicker.js","../node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePicker.js","app/components/AssignDialog/SceduleAppointment.jsx","app/views/CenterView/Clients/Clients/Clients.jsx"],"names":["style","position","top","left","transform","width","bgcolor","border","boxShadow","p","styled","Button","display","color","marginTop","backgroundColor","SessionModal","open","onConfirmDialogClose","text","navigate","onYesClick","useNavigate","handleLogout","localStorage","removeItem","keepMounted","onClose","sx","id","variant","component","justifyContent","alignItems","gap","onClick","_status","UsersCustomTable","props","user","useAuth","CustomHeadCell","meta","data","entries","Object","index","key","value","push","align","className","showDisableBtn","role","e","stopPropagation","disabled","handleEnable","center_id","provider_id","handleDisable","getCellContent","row","content","handleReturn","handleExpire","isAssigned","marginLeft","center_name","type","owned_by","handleOpen","deviceID","showBtn","flexDirection","badgeContent","notes","length","handleOpenNewNotes","viewNotes","assignClinician","showClinicianBtn","issueDevices","license","showDeviceBtn","issueLisence","showIssueBtn","status","scheduledAt","marginRight","handleAcceptModal","fontSize","handleRejectModal","scheduleAppointment","scheduleSession","showScheduleBtn","CustomBodyCell","rows","scope","overflow","minWidth","size","rowsPerPage","slice","page","map","i","view","deviceId","centerId","clientID","counsellor_user_id","clinicId","rowsPerPageOptions","count","onPageChange","handleChangePage","onRowsPerPageChange","handleChangeRowsPerPage","pageDetails","total","handlePageChange","fetchClicians","url","makeRequest","then","resp","json","fetchClients","fetchBarriers","createClient","fetchClient","createLicense","updateLicense","getClientDetails","updateClientTrauma","addNotes","catch","err","fetchPassphrases","findClients","searchData","filterData","clinician","device","fetchInitialDiagnosis","fetchListOfTreatments","fetchListOfLocations","updateNote","createSession","checkUnique","updateClient","getAlertUtilityClass","slot","generateUtilityClass","_CloseIcon","alertClasses","generateUtilityClasses","createSvgIcon","_jsx","d","_excluded","AlertRoot","Paper","name","overridesResolver","styles","ownerState","root","capitalize","severity","theme","getColor","palette","mode","darken","lighten","getBackgroundColor","_extends","typography","body2","padding","light","icon","main","fontWeight","fontWeightMedium","dark","AlertIcon","opacity","AlertMessage","message","AlertAction","action","defaultIconMapping","success","SuccessOutlinedIcon","warning","ReportProblemOutlinedIcon","error","ErrorOutlineIcon","info","InfoOutlinedIcon","Alert","React","inProps","ref","useThemeProps","children","closeText","iconMapping","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","_jsxs","elevation","clsx","IconButton","title","CloseIcon","fetchCenter","getAllCenters","getCenterDetails","findCenters","filters","clientMeta","client_id","gender_bio","gender_identified","appointment","formatClientsList","response","Array","isArray","forEach","item","formatClientData","handleSession","res","sessions","attributes","el","clinician_status","counsellor","device_status","device_id","getMetaData","pagination","formatCenters","formatCenterData","username","email","phoneNumber","phone_number","firstName","first_name","logo","logo_image","lastName","last_name","country","state","city","postalCode","postal_code","areaCode","area_code","centerType","center_type","verified","is_verified","address","getAddress","street_address1","street_address2","createdAt","moment","format","address1","address2","formatCouncelorList","confirmed","formatClinician","label","formatTraumaList","getFormatedData","traumaCode","trauma_code","traumaName","trauma_name","traumaId","formatBarrierList","getFormatedBarrierData","barrierName","barrier_name","barrierId","borderRadius","AssignClinician","useState","assignedClinician","setAssignedClinician","initialValue","setInitialValue","submit","setSubmit","formEl","useRef","Modal","handleClose","Box","onSubmit","options","Number","currentClient","handleSubmit","console","log","onError","Typography","Autocomplete","disablePortal","fullWidth","onChange","event","newValue","inputValue","onInputChange","newInputValue","isOptionEqualToValue","option","renderInput","params","TextField","ml","SelectField","SelectValidator","marginBottom","IssueLisence","deviceType","setState","centerData","setCenterData","useEffect","center","license_type","client","publishedAt","split","passphrase","used","device_type","state_code","state_id","FormControl","target","validators","errorMessages","MenuItem","AssignDevice","dispatch","useDispatch","assignedDevice","setAssignedDevice","openModal","setOpenModal","msg","setMsg","clientId","licenseId","filter","is_assigned","resetClient","DeviceIssueConfirmDialog","Grid","textAlign","joinChildren","separator","childrenArray","toArray","Boolean","reduce","output","child","StackRoot","handleBreakpoints","resolveBreakpointValues","values","direction","breakpoints","propValue","spacing","transformer","createUnarySpacing","base","keys","acc","breakpoint","directionValues","spacingValues","deepmerge","margin","column","getValue","Stack","themeProps","extendSxProp","divider","as","useDateTimePickerDefaultizedProps","_ref","ampm","inputFormat","maxDateProp","maxDate","maxDateTime","maxTime","minDateProp","minDate","minDateTime","minTime","openTo","orientation","views","utils","useUtils","defaultDates","useDefaultDates","willUseAmPm","is12HourCycleInCurrentLocale","Error","ampmInClock","showToolbar","allowSameDateSelection","disableIgnoringDatePartForTimeValidation","acceptRegex","mask","disableMaskedInput","pick12hOr24hFormat","localized","formats","keyboardDateTime","keyboardDateTime12h","keyboardDateTime24h","PickersToolbarTextRoot","transition","transitions","create","secondary","selected","primary","PickersToolbarText","PickersToolbarButtonRoot","textTransform","PickersToolbarButton","typographyClassName","DateTimePickerTabsRoot","Tabs","wrapperVariant","order","tabsClasses","indicator","bottom","DateTimePickerTabs","openView","dateRangeIcon","DateRange","timeIcon","Time","WrapperVariantContext","includes","Tab","DateTimePickerToolbarRoot","PickersToolbar","paddingLeft","paddingRight","penIcon","right","DateTimePickerToolbarDateContainer","DateTimePickerToolbarTimeContainer","DateTimePickerToolbarSeparator","cursor","DateTimePickerToolbar","time","date","hideTabs","isMobileKeyboardViewOpen","setOpenView","toggleMobileKeyboardView","toolbarFormat","toolbarPlaceholder","toolbarTitle","showTabs","window","innerHeight","dateText","formatByString","penIconClassName","isLandscape","tabIndex","validateTime","shouldDisableTime","isAfterComparingFn","createIsAfterIgnoreDatePart","isValid","getHours","getMinutes","getSeconds","validateDateTime","disableFuture","shouldDisableDate","disablePast","timeValidationProps","dateValidationResult","validateDate","isSameDateTimeError","a","b","useDateTimeValidation","useValidation","valueManager","emptyValue","parseInput","parsePickerInputValue","areValuesEqual","isEqual","DesktopDateTimePicker","validationError","usePickerState","pickerProps","inputProps","wrapperProps","PopperProps","ToolbarComponent","TransitionComponent","AllDateInputProps","DesktopWrapper","DateInputProps","KeyboardDateInputComponent","KeyboardDateInput","CalendarOrClockPicker","autoFocus","MobileDateTimePicker","MobileWrapper","PureDateInputComponent","PureDateInput","DateTimePicker","cancelText","clearable","clearText","desktopModeMediaQuery","DialogProps","okText","showTodayButton","todayText","useMediaQuery","SceduleAppointment","setValue","setError","timeError","setTimeError","setOpen","LocalizationProvider","dateAdapter","AdapterDateFns","element","duration","diff","scheduled_at","asMinutes","session","case_id","session_id","center_type_id","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","Clients","setRows","loading","setLoading","setPageDetails","searchResult","setSearchResult","filterResult","setFilterResult","setSearchData","clinicians","setClinicians","devices","setDevices","setType","schedule","setSchedule","setCurrentClient","currentClientDetails","setCurrentClientDetails","currentLicense","setCurrentLicense","addClinician","setAddClinician","setSuccess","issueLicense","setIssueLicense","assignDevice","setAssignDevice","assignDeviceSuccess","setAssignDeviceSuccess","getAllClinicians","counsellors","getAllClients","pageNumber","sortClients","search","pageNo","handleChange","filterType","fetchCurrentLicense","filteredDevice","container","routeSegments","placeholder","InputProps","startAdornment","InputLabel","Select","alignSelf","newPage","issueDevice"],"mappings":"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","file":"static/js/27.0b64dd6a.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@mui/material/Button';\nimport { styled } from '@mui/system';\nimport { \n    Modal, \n    Typography\n} from '@mui/material';\nimport { Box } from '@mui/system';\nimport { useNavigate } from 'react-router-dom';\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'background.paper',\n    border: '2px solid #fff',\n    boxShadow: 24,\n    p: 4,\n};\n\nconst CancelButton = styled(Button)(() => ({\n    display: 'block',\n    color: '#fff',\n    marginTop: '20px',\n    width: '86px',\n    backgroundColor: '#e15260',\n    '&:hover': {\n        backgroundColor: '#cc2333',\n        color: '#fff'\n    }\n}));\n\nconst SessionModal = ({\n    open,\n    onConfirmDialogClose,\n    text,\n    onYesClick\n}) => {\n    const navigate = useNavigate();\n\n    const handleLogout = () => {\n        onConfirmDialogClose();\n        localStorage.removeItem('accessToken');\n        navigate('/session/signin');\n    }\n\n    return (\n        <div>\n            <Modal\n                keepMounted\n                open={open}\n                onClose={() => handleLogout()}\n                aria-labelledby=\"keep-mounted-modal-title\"\n                aria-describedby=\"keep-mounted-modal-description\"\n            >\n                <Box sx={style}>\n                    <Typography\n                        id=\"keep-mounted-modal-title\"\n                        variant=\"h6\"\n                        component=\"h2\"\n                        sx={{color:\"#333\" }}\n                    >\n                        {text}\n                    </Typography>\n                    {/* <Box sx={{\n                        display:\"table\",\n                        marginLeft:'auto',\n                        marginRight:\"0px\"\n                    }}> */}\n                    {/* <Button onClick={handleClose} variant=\"contained\" color=\"error\">Cancel</Button> */}\n                    {/* <Button onClick={handleEdit} variant=\"contained\" sx={{ ml: 2 }}>Yes</Button> */}\n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent:'flex-end',\n                            alignItems: 'center',\n                            gap: '1rem',\n                        }}\n                    >\n                        {/* <CancelButton onClick={onConfirmDialogClose}>\n                            Cancel\n                        </CancelButton> */}\n                        <Box\n                            position=\"relative\"\n                            sx={{ display: 'block', marginTop: '20px' }}\n                        >\n                            <Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={() => handleLogout()}\n                            >\n                                Ok\n                            </Button>\n                        </Box>\n                    </div>\n                </Box>\n            </Modal>\n        </div>\n    )\n}\n\nexport default SessionModal;","import * as React from 'react'\nimport Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\nimport TableHead from '@mui/material/TableHead'\nimport TableRow from '@mui/material/TableRow'\nimport Paper from '@mui/material/Paper'\nimport { useNavigate } from 'react-router-dom'\nimport './UsersCustomTable.css'\nimport { TablePagination, IconButton, Badge } from '@mui/material'\nimport PreviewIcon from '@mui/icons-material/Preview';\nimport AddIcon from '@mui/icons-material/Add';\nimport VideocamIcon from '@mui/icons-material/Videocam';\nimport useAuth from 'app/hooks/useAuth';\nimport Button from '@mui/material/Button'\n\nconst _status = {\n    'new': 'New',\n    'inProcess': 'In Process',\n    'successful': 'Successful',\n    'unsuccessful': 'Unsuccessful',\n    'pending': 'Pending',\n    'scheduled': 'Scheduled',\n    'rescheduled': 'Rescheduled',\n    'cancelled': 'Cancelled',\n    'completed': 'Completed'\n}\n\nconst UsersCustomTable = (props) => {\n    const navigate = useNavigate()\n    const { user } = useAuth();\n\n    const CustomHeadCell = ({ meta }) => {\n        const data = [];\n        if(meta){\n        let entries = Object.entries(meta)\n        for (const [index, [key, value]] of Object.entries(entries)) {\n            if(key !== 'deviceId' && key !== 'counsellor_user_id'){\n                data.push(<TableCell width={key === 'scheduledAt' ? 140 : 60} variant=\"head\" align=\"center\" className=\"text-style\" key={index}>{value}</TableCell>)\n            }\n            \n        }\n    }\n        return data\n    }\n\n    const showBtn = (value) => {\n        if(value.isAssigned){\n            return <div style={{marginLeft: '1rem'}}>{value.center_name}</div>;\n        } else {\n            if (user && user.role && user.role.type === 'admin') {\n                if (value.owned_by === 'bmc') {\n                    return (\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => props.handleOpen(value.deviceID, true)}\n                        >\n                            Assign\n                        </Button>\n                    );\n                }\n            }\n        }\n\n        return null;\n    }\n\n    const showClinicianBtn = (value,row) => {\n        if(value !== 'Not Assigned') {\n            return <div>{value}</div>\n        } else {\n            if(user && user.role && user.role.type === 'admin') {\n                return <div>{'Not Assigned'}</div>\n            } else if (user && user.role && user.role.type === 'center') {\n                return (\n                    <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={(e) => {\n                                e.stopPropagation();\n                                props.assignClinician(row)\n                            }}\n                        >\n                        Assign\n                    </Button>\n                );\n            }\n        }\n    }\n\n    const showDeviceBtn = (value,row) => {\n        if(value !== 'Not Assigned') {\n            return <div>{value}</div>\n        } else {\n            if(user && user.role && user.role.type === 'admin') {\n                return <div>{'Not Assigned'}</div>\n            } else if (user && user.role && user.role.type === 'center') {\n                return (\n                    <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={(e) => {\n                                e.stopPropagation();\n                                props.issueDevices(row)\n                            }}\n                            disabled={row.license === \"Not Issued\"}\n                        >\n                        Assign\n                    </Button>\n                );\n            }\n        }\n    }\n    const showIssueBtn = (value,row) => {\n        if(value === 'Issued') {\n            return <div>{'Issued'}</div>\n        } else {\n            if(user && user.role && user.role.type === 'admin') {\n                return <div>{'Not Issued'}</div>\n            } else if (user && user.role && user.role.type === 'center') {\n                return (\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={(e) => {\n                            e.stopPropagation()\n                            props.issueLisence(row)\n                        }}\n                    >\n                        Issue\n                    </Button>\n                )\n            }\n        }\n    }\n\n    const showScheduleBtn = (value,row) => {\n        if(value === 'Scheduled') {\n            return <div>{'Scheduled'}</div>\n        } else {\n            if(user && user.role && user.role.type === 'admin') {\n                return <div>{'Not Scheduled'}</div>\n            } else if (user && user.role && user.role.type === 'center') {\n        return (\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={(e) => {\n                    e.stopPropagation()\n                    props.scheduleSession(row)\n                }}\n            >\n                Schedule\n            </Button>\n        )\n            }\n            }\n    }\n\n    const viewNotes = (value) => {\n        return (\n            <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center' }}>\n                {/* <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => props.handleOpen(value, true)}\n                    startIcon={<VisibilityIcon />}\n                >\n                    Notes\n                </Button> */}\n                <IconButton\n                    aria-label=\"view\"\n                    color=\"primary\"\n                    onClick={() => props.handleOpen(value, true)}\n                ><Badge badgeContent={value.notes ? value.notes.length : 0} color=\"secondary\">\n                    <PreviewIcon/></Badge>\n                </IconButton>\n                <IconButton\n                    aria-label=\"view\"\n                    color=\"primary\"\n                    onClick={() => props.handleOpenNewNotes(value, true)}\n                >\n                   <AddIcon />\n                </IconButton>\n            </div>\n        );\n    }\n\n    const scheduleAppointment = (value) => {\n        if(value.status == 'scheduled'){\n            return <div style={{marginLeft: '1rem'}}>{value.scheduledAt}<IconButton aria-label=\"view\" color=\"primary\">{user.role.type === 'counsellor' && <VideocamIcon />}</IconButton></div>\n                    // onClick={() => props.handleOpen(value, true)}\n                    \n        } else if(value.status == 'pending') {\n            return (\n                <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center' }}>\n                <Button\n                    variant=\"contained\"\n                    color=\"success\"\n                    style={{marginRight:5}}\n                    onClick={() => props.handleAcceptModal(value, true)}\n                    // startIcon={<VisibilityIcon />}\n                >\n                    <div style={{fontSize:'.8rem'}}>Accept</div>\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"error\"\n                    onClick={() => props.handleRejectModal(value, true)}\n                    // startIcon={<VisibilityIcon />}\n                >\n                    <div style={{fontSize:'.8rem'}}>Reject</div>\n                </Button>\n                </div>\n            )\n        } else if(value.status == 'cancelled') {\n            return <div style={{marginLeft: '1rem'}}>{`${value.scheduledAt} - Cancelled`}</div>\n        }\n        else {\n            return <div style={{marginLeft: '1rem'}}>{value}<IconButton aria-label=\"view\" color=\"primary\">{user.role.type === 'counsellor' && <VideocamIcon />}</IconButton></div>\n        }\n        // if(value !== 'pending'){\n        //     return <div style={{marginLeft: '1rem'}}>{value}<IconButton aria-label=\"view\" color=\"primary\">{user.role.type === 'counsellor' && <VideocamIcon />}</IconButton></div>\n        //             // onClick={() => props.handleOpen(value, true)}\n                    \n        // } else {\n        //     return (\n        //         <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center' }}>\n        //         <Button\n        //             variant=\"contained\"\n        //             color=\"success\"\n        //             style={{marginRight:5}}\n        //             // onClick={() => props.handleOpen(value, true)}\n        //             // startIcon={<VisibilityIcon />}\n        //         >\n        //             <div style={{fontSize:'.8rem'}}>Accept</div>\n        //         </Button>\n        //         <Button\n        //             variant=\"contained\"\n        //             color=\"error\"\n        //             // onClick={() => props.handleOpen(value, true)}\n        //             // startIcon={<VisibilityIcon />}\n        //         >\n        //             <div style={{fontSize:'.8rem'}}>Reject</div>\n        //         </Button>\n        //         </div>\n        //     )\n        // }\n    }\n\n    const showDisableBtn = (value, role) => {\n        let content = null;\n        content = (\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={(e) => {\n                    e.stopPropagation();\n                    if(value.disabled){\n                        props.handleEnable(role === 'center' ? value.center_id : value.provider_id);\n                    } else {\n                        props.handleDisable(role === 'center' ? value.center_id : value.provider_id);\n                    }\n                }}\n            >\n                {value.disabled ? 'Enable' : 'Disable'} \n            </Button>\n        );\n    \n        return content;\n    }\n\n    const getCellContent = (key, value,row) => {\n        let content = null;\n        switch (key) {\n            case 'edit_action':\n                content = (\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => navigate(value)}\n                    >\n                        Edit\n                    </Button>\n                );\n                break;\n            case 'return':\n            content = (\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={(e) => {\n                        e.stopPropagation();\n                        props.handleReturn(row)\n                    }}\n                    disabled={!value}\n                >\n                    Return\n                </Button>\n            );\n            break;\n            case 'expire':\n            content = (\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={(e) => {\n                        e.stopPropagation();\n                        props.handleExpire(row);\n                    }}\n                    disabled={!value}\n                >\n                    Expire\n                </Button>\n            );\n            break;\n            case 'device_action':\n                content = showBtn(value);\n                break;\n            case 'view_notes':\n                content = viewNotes(value);\n                break;\n            case 'clinician_status':\n                content = showClinicianBtn(value,row);\n                break;\n            case 'device_status':\n                content = showDeviceBtn(value,row);\n                break;\n            case 'license':\n                content = showIssueBtn(value,row);\n                break;\n            case 'scheduledAt':\n                content = scheduleAppointment(value)\n                break;\n            case 'appointment':\n                content = showScheduleBtn(value,row)\n                break;\n            case 'status': \n                content = _status[value] || value;\n                break;\n            case 'disable_center':\n                content = showDisableBtn(value, 'center');\n                break;\n            case 'disable_provider': \n                content = showDisableBtn(value, 'provider');\n                break;\n            default:\n                content = value;\n                break;\n        }\n\n        return content;\n    }\n\n    const CustomBodyCell = ({ row }) => {\n        const rows = [];\n        let entries = Object.entries(row)\n        for (const [index, [key, value]] of Object.entries(entries)) {\n            if(key !== 'centerId' && key !== 'clientID' && key !== 'clinicId' && key !== 'deviceId' && key !== 'counsellor_user_id'){\n            rows.push(\n                <TableCell \n                    className=\"text-style\" \n                    component=\"th\" \n                    scope=\"row\" \n                    align=\"center\" \n                    key={index}\n                >\n                    {getCellContent(key, value,row)}\n                </TableCell>\n            )\n            }\n\n        }\n        return rows\n    }\n    return (\n        <>\n            <Paper sx={{ width: '100%', overflow: 'hidden' }}>\n                <TableContainer className=\"main-table\">\n                    <Table\n                        sx={{ minWidth: 650 }}\n                        size=\"small\"\n                        aria-label=\"simple table\"\n                        className=\"user-table\"\n                    >\n                        <TableHead>\n                            <TableRow>\n                                <CustomHeadCell meta={props.rows.meta} />\n                            </TableRow>\n                        </TableHead>\n                        {props.rows && props.rows.length > 0 ? (\n                            <TableBody>\n                                {(props.rowsPerPage > 0\n                                    ? props.rows.slice(\n                                          props.page * props.rowsPerPage,\n                                          props.page * props.rowsPerPage +\n                                              props.rowsPerPage\n                                      )\n                                    : props.rows\n                                ).map((row,i) => {\n                                    return (\n                                        <TableRow\n                                            key={i}\n                                            sx={{\n                                                '&:last-child td, &:last-child th':\n                                                    {\n                                                        border: 0,\n                                                    },\n                                            }}\n                                            onClick={() => {\n                                                props.onClick &&\n                                                    props.onClick(\n                                                        props.view === 'device'\n                                                        ? row.deviceId\n                                                        : props.view === 'center'\n                                                            ? row.centerId\n                                                            : props.view ===\n                                                              'client'\n                                                            ? row.clientID\n                                                            : props.view ===\n                                                              'counselor'\n                                                            ? row.clientID\n                                                            : props.view === \n                                                              'counsellor'\n                                                            ? row.counsellor_user_id \n                                                            : props.view === 'clinician'?row.clinicId:row.id\n                                                    )\n                                            }}\n                                            // onClick={() => navigate(`/${props.view}/details/${row.id}`, {id: row.id})}\n                                        >\n                                            <CustomBodyCell row={row} />\n                                        </TableRow>\n                                    )\n                                })}\n                            </TableBody>\n                        ) : (\n                            <>\n                                {/* <TableRow className='no-records'> */}\n                                <caption>No records found</caption>\n                                {/* </TableRow> */}\n                            </>\n                        )}\n                    </Table>\n                </TableContainer>\n                {props.view && (props.view === 'center' ||\n                    props.view === 'device' ||\n                    props.view === 'client' ||\n                    props.view === 'counsellor' ||\n                    props.view === 'clinician') ? (\n                    <TablePagination\n                        rowsPerPageOptions={[]}\n                        component=\"div\"\n                        count={props.pageDetails.total || 0}\n                        rowsPerPage={10}\n                        page={props.pageDetails.page - 1 || 0}\n                        onPageChange={props.handlePageChange}\n                        onRowsPerPageChange={props.handleChangeRowsPerPage}\n                        className=\"table-page\"\n                    />\n                ) : (\n                    <TablePagination\n                        rowsPerPageOptions={[]}\n                        component=\"div\"\n                        count={props.rows.length}\n                        rowsPerPage={props.rowsPerPage || 10}\n                        page={props.page || 0}\n                        onPageChange={props.handleChangePage}\n                        onRowsPerPageChange={props.handleChangeRowsPerPage}\n                        className=\"table-page\"\n                    />\n                )}\n            </Paper>\n        </>\n    )\n}\n\nexport default UsersCustomTable;","import { makeRequest } from './authenticationService';\n\nexport const fetchClicians = (id) => {\n    let url = `/api/centers/${id}`;\n    return makeRequest('GET', url)\n        .then((resp) => {\n            return resp;\n        })\n        .then((json) => {\n            return json;\n        }); \n}\nexport const fetchClients = (page) => {\n    let url = `/api/clients?pagination[page]=${page}`;\n\n    return makeRequest('GET', url)\n        .then((resp) => {\n            return resp;\n        })\n        .then((json) => {\n            return json;\n        }); \n}\n\nexport const fetchBarriers = (id) => {\n    let url = `/api/barriers`;\n\n    return makeRequest('GET', url)\n        .then((resp) => {\n            return resp;\n        })\n        .then((json) => {\n            return json;\n        }); \n    }\n\nexport const searchClients = (data, page) => {\n    let url = `/api/clients?search=${data}&pagination[page]=${page}`\n\n    return makeRequest('GET',url)\n        .then((resp) =>{\n            return resp;\n        })\n        .catch((err)=>{\n            return err;\n        })\n}\n\nexport const createClient = (data) => {\n    let url = `/api/clients`\n    return makeRequest('POST', url, data)\n        .then((resp) => {\n            return resp;\n        })\n        .then((json) => {\n            return json;\n        }); \n}\nexport const fetchClient = (id) => {\n    let url = `/api/clients/${id}`\n    return makeRequest('GET', url)\n        .then((resp) => {\n            return resp;\n        })\n        .then((json) => {\n            return json;\n        }); \n}\nexport const createLicense = (data) => {\n    let url = `/api/licenses`\n    return makeRequest('POST', url, data)\n    .then((resp) => {\n        return resp;\n    })\n    .then((json) => {\n        return json;\n    }); \n}\n\nexport const updateLicense = (id, data) => {\n    let url = `/api/licenses/${id}`\n    return makeRequest('PUT', url, data)\n    .then((resp) => {\n        return resp;\n    })\n    .then((json) => {\n        return json;\n    }); \n}\n\nexport const getClientDetails = (id) => {\n    let url = `/api/clients/${id}`;\n\n    return makeRequest('GET', url)\n        .then((resp) => {\n            return resp;\n        })\n        .then((json) => {\n            return json;\n        }); \n}\n\nexport const updateClientTrauma = (id,data) => {\n    let url = `/api/clients/${id}`\n    \n    return makeRequest('PUT', url, data)\n        .then((resp) => {\n            return resp;\n        })\n        .then((json) => {\n            return json;\n        }); \n    }\n\nexport const filterClients = (data, page) => {\n    let url = `/api/clients?filter[clinician]=${data.clinician}&filter[device]=${data.device}&pagination[page]=${page}`;\n\n    return makeRequest('GET', url)\n        .then((resp) =>{\n            return resp;\n        })\n        .catch((err)=>{\n            return err;\n        })\n}\n\nexport const addNotes = (data) => {\n    let url = `/api/notes`;\n\n    return makeRequest('POST', url,data)\n        .then((resp) =>{\n            return resp;\n        })\n        .catch((err)=>{\n            return err;\n        })\n}\n\nexport const fetchPassphrases = () => {\n    let url = `/api/passphrases`\n    \n    return makeRequest('GET', url)\n        .then((resp) => {\n            return resp\n        })\n        .catch((err) => {\n            return err\n        })\n}\n\nexport const findClients = (searchData, filterData, page) => {\n    let url = `/api/clients?search=${searchData}&filter[clinician]=${filterData.clinician}&filter[device]=${filterData.device}&pagination[page]=${page}`;\n\n    return makeRequest('GET', url)\n        .then((resp) =>{\n            return resp;\n        })\n        .catch((err)=>{\n            return err;\n        })\n}\n\nexport const fetchInitialDiagnosis = () => {\n    let url = `/api/initial-diagnoses`\n    \n    return makeRequest('GET', url)\n        .then((resp) => {\n            return resp\n        })\n        .catch((err) => {\n            return err\n        })\n}\n\nexport const fetchListOfTreatments = () => {\n    let url = `/api/treatments`\n    \n    return makeRequest('GET', url)\n        .then((resp) => {\n            return resp\n        })\n        .catch((err) => {\n            return err\n        })\n}\nexport const fetchListOfLocations = () => {\n    let url = `/api/treatment-locations`\n    \n    return makeRequest('GET', url)\n        .then((resp) => {\n            return resp\n        })\n        .catch((err) => {\n            return err\n        })\n}\n\nexport const updateNote = (id,data) => {\n    let url = `/api/notes/${id}`\n\n    return makeRequest('PUT', url,data)\n        .then((resp) => {\n            return resp\n        })\n        .catch((err) => {\n            return err\n        })\n}\n\nexport const createSession = (data) => {\n    let url = `/api/sessions`\n\n    return makeRequest('POST', url,data)\n        .then((resp) => {\n            return resp\n        })\n        .catch((err) => {\n            return err\n        })\n}\n\nexport const checkUnique = (data) => {\n    let url = `/api/clients?check=${data}`\n\n    return makeRequest('GET', url)\n        .then((resp) => {\n            return resp\n        })\n        .catch((err) => {\n            return err\n        })\n}\n\nexport const updateClient = (id, data) => {\n    let url = `/api/clients/${id}`;\n    \n    return makeRequest('PUT', url, data)\n        .then((resp) => {\n            return resp;\n        })\n        .then((json) => {\n            return json;\n        }); \n}","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getAlertUtilityClass(slot) {\n  return generateUtilityClass('MuiAlert', slot);\n}\nconst alertClasses = generateUtilityClasses('MuiAlert', ['root', 'action', 'icon', 'message', 'filled', 'filledSuccess', 'filledInfo', 'filledWarning', 'filledError', 'outlined', 'outlinedSuccess', 'outlinedInfo', 'outlinedWarning', 'outlinedError', 'standard', 'standardSuccess', 'standardInfo', 'standardWarning', 'standardError']);\nexport default alertClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _CloseIcon;\n\nconst _excluded = [\"action\", \"children\", \"className\", \"closeText\", \"color\", \"icon\", \"iconMapping\", \"onClose\", \"role\", \"severity\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { darken, lighten } from '@mui/system';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport Paper from '../Paper';\nimport alertClasses, { getAlertUtilityClass } from './alertClasses';\nimport IconButton from '../IconButton';\nimport SuccessOutlinedIcon from '../internal/svg-icons/SuccessOutlined';\nimport ReportProblemOutlinedIcon from '../internal/svg-icons/ReportProblemOutlined';\nimport ErrorOutlineIcon from '../internal/svg-icons/ErrorOutline';\nimport InfoOutlinedIcon from '../internal/svg-icons/InfoOutlined';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    variant,\n    color,\n    severity,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', `${variant}${capitalize(color || severity)}`, `${variant}`],\n    icon: ['icon'],\n    message: ['message'],\n    action: ['action']\n  };\n  return composeClasses(slots, getAlertUtilityClass, classes);\n};\n\nconst AlertRoot = styled(Paper, {\n  name: 'MuiAlert',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize(ownerState.color || ownerState.severity)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  const getColor = theme.palette.mode === 'light' ? darken : lighten;\n  const getBackgroundColor = theme.palette.mode === 'light' ? lighten : darken;\n  const color = ownerState.color || ownerState.severity;\n  return _extends({}, theme.typography.body2, {\n    backgroundColor: 'transparent',\n    display: 'flex',\n    padding: '6px 16px'\n  }, color && ownerState.variant === 'standard' && {\n    color: getColor(theme.palette[color].light, 0.6),\n    backgroundColor: getBackgroundColor(theme.palette[color].light, 0.9),\n    [`& .${alertClasses.icon}`]: {\n      color: theme.palette.mode === 'dark' ? theme.palette[color].main : theme.palette[color].light\n    }\n  }, color && ownerState.variant === 'outlined' && {\n    color: getColor(theme.palette[color].light, 0.6),\n    border: `1px solid ${theme.palette[color].light}`,\n    [`& .${alertClasses.icon}`]: {\n      color: theme.palette.mode === 'dark' ? theme.palette[color].main : theme.palette[color].light\n    }\n  }, color && ownerState.variant === 'filled' && {\n    color: '#fff',\n    fontWeight: theme.typography.fontWeightMedium,\n    backgroundColor: theme.palette.mode === 'dark' ? theme.palette[color].dark : theme.palette[color].main\n  });\n});\nconst AlertIcon = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Icon',\n  overridesResolver: (props, styles) => styles.icon\n})({\n  marginRight: 12,\n  padding: '7px 0',\n  display: 'flex',\n  fontSize: 22,\n  opacity: 0.9\n});\nconst AlertMessage = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Message',\n  overridesResolver: (props, styles) => styles.message\n})({\n  padding: '8px 0'\n});\nconst AlertAction = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Action',\n  overridesResolver: (props, styles) => styles.action\n})({\n  display: 'flex',\n  alignItems: 'flex-start',\n  padding: '4px 0 0 16px',\n  marginLeft: 'auto',\n  marginRight: -8\n});\nconst defaultIconMapping = {\n  success: /*#__PURE__*/_jsx(SuccessOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  warning: /*#__PURE__*/_jsx(ReportProblemOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  error: /*#__PURE__*/_jsx(ErrorOutlineIcon, {\n    fontSize: \"inherit\"\n  }),\n  info: /*#__PURE__*/_jsx(InfoOutlinedIcon, {\n    fontSize: \"inherit\"\n  })\n};\nconst Alert = /*#__PURE__*/React.forwardRef(function Alert(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAlert'\n  });\n\n  const {\n    action,\n    children,\n    className,\n    closeText = 'Close',\n    color,\n    icon,\n    iconMapping = defaultIconMapping,\n    onClose,\n    role = 'alert',\n    severity = 'success',\n    variant = 'standard'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    color,\n    severity,\n    variant\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(AlertRoot, _extends({\n    role: role,\n    elevation: 0,\n    ownerState: ownerState,\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other, {\n    children: [icon !== false ? /*#__PURE__*/_jsx(AlertIcon, {\n      ownerState: ownerState,\n      className: classes.icon,\n      children: icon || iconMapping[severity] || defaultIconMapping[severity]\n    }) : null, /*#__PURE__*/_jsx(AlertMessage, {\n      ownerState: ownerState,\n      className: classes.message,\n      children: children\n    }), action != null ? /*#__PURE__*/_jsx(AlertAction, {\n      className: classes.action,\n      children: action\n    }) : null, action == null && onClose ? /*#__PURE__*/_jsx(AlertAction, {\n      ownerState: ownerState,\n      className: classes.action,\n      children: /*#__PURE__*/_jsx(IconButton, {\n        size: \"small\",\n        \"aria-label\": closeText,\n        title: closeText,\n        color: \"inherit\",\n        onClick: onClose,\n        children: _CloseIcon || (_CloseIcon = /*#__PURE__*/_jsx(CloseIcon, {\n          fontSize: \"small\"\n        }))\n      })\n    }) : null]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Alert.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The action to display. It renders after the message, at the end of the alert.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Override the default label for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * The color of the component. Unless provided, the value is taken from the `severity` prop.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['error', 'info', 'success', 'warning']), PropTypes.string]),\n\n  /**\n   * Override the icon displayed before the children.\n   * Unless provided, the icon is mapped to the value of the `severity` prop.\n   * Set to `false` to remove the `icon`.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The component maps the `severity` prop to a range of different icons,\n   * for instance success to `<SuccessOutlined>`.\n   * If you wish to change this mapping, you can provide your own.\n   * Alternatively, you can use the `icon` prop to override the icon displayed.\n   */\n  iconMapping: PropTypes.shape({\n    error: PropTypes.node,\n    info: PropTypes.node,\n    success: PropTypes.node,\n    warning: PropTypes.node\n  }),\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * The ARIA role attribute of the element.\n   * @default 'alert'\n   */\n  role: PropTypes.string,\n\n  /**\n   * The severity of the alert. This defines the color and icon used.\n   * @default 'success'\n   */\n  severity: PropTypes.oneOf(['error', 'info', 'success', 'warning']),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['filled', 'outlined', 'standard']), PropTypes.string])\n} : void 0;\nexport default Alert;","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z\"\n}), 'SuccessOutlined');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z\"\n}), 'ReportProblemOutlined');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'ErrorOutline');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z\"\n}), 'InfoOutlined');","import { makeRequest } from './authenticationService';\n\nexport const fetchCenter = (page) => {\n    // let url = `/api/centers?pagination[page]=${page}`;\n    let url = '/api/centers';\n\n    if(page){\n        url += `?pagination[page]=${page}`;\n    }\n\n    return makeRequest('GET', url)\n        .then((resp) => {\n            return resp;\n        })\n        .then((json) => {\n            return json;\n        }); \n}\n\nexport const getAllCenters = () => {\n    let url = '/api/centers?all=-1';\n\n    return makeRequest('GET', url)\n        .then((resp) => {\n            return resp;\n        })\n        .then((json) => {\n            return json;\n        }); \n}\n\nexport const getCenterDetails = (id) => {\n    let url = `/api/centers/${id}`;\n\n    return makeRequest('GET', url, )\n        .then((resp) => {\n            return resp;\n        })\n        .then((json) => {\n            return json;\n        }); \n}\n\n\nexport const searchCenters = (data,page) => {\n    let url = `/api/centers?search=${data}&pagination[page]=${page}`\n\n    return makeRequest('GET',url)\n    .then((resp) =>{\n        return resp;\n    })\n    .catch((err)=>{\n        return err;\n    })\n}\n\nexport const filterCenters = (data,page) => {\n    let url = `/api/centers?filter=${data}&pagination[page]=${page}`\n\n    return makeRequest('GET',url)\n    .then((resp) =>{\n        return resp;\n    })\n    .catch((err)=>{\n        return err;\n    })\n}\n\nexport const findCenters = (searchData, filters, page) => {\n    let url = `/api/centers?search=${searchData}&filter=${filters}&pagination[page]=${page}`;\n\n    return makeRequest('GET',url)\n        .then((resp) =>{\n            return resp;\n        })\n        .catch((err)=>{\n            return err;\n        })\n}","import moment from 'moment'\n\nconst meta = {\n    counsellorId: 'Center ID',\n    name: 'State',\n    firstName: 'Name',\n    lastName: 'Phone',\n    traumaCodes: 'Email',\n    clients: 'Clients',\n    sessions: 'Providers',\n    sessionsHours: 'Devices',\n    type: 'Type',\n}\n\nconst deviceMeta = {\n    // id: \"ID\",\n    device_id: 'Device ID',\n    device_type: 'Device Type',\n    device_serial: 'Device Serial',\n    mac_address: 'Mac Address',\n    is_assigned: 'Is Assigned',\n    status: 'Status',\n    owned_by: 'Owned By',\n    edit_action: 'Edit Action',\n    device_action: 'Device Action',\n}\n\n\nconst clientMeta = {\n    client_id: \"Client ID\",\n    clinician: 'Provider',\n    name: \"Record Name\",\n    gender_bio: \"Birth Gender\",\n    gender_identified: \"ID Gender\",\n    license:\"License\",\n    device: \"Device\",\n    appointment:\"Appointment\"\n}\n\nexport function formatClientsList(data) {\n    const response = []\n    if (Array.isArray(data)) {\n        data.forEach((item) => {\n            response.push(formatClientData(item))\n        })\n        response['meta'] = clientMeta;\n    } else {\n        response.push(formatClientData(data))\n    }\n    return response\n}\n\nfunction getDeviceMeta(tab) {\n    let obj = {};\n    if(tab == 1){\n        obj = deviceMeta;\n    } else {\n        obj = {\n            mac_address: 'Mac Address',\n            ip_address: 'IP Address',\n            passphrase: 'Passphrase'\n        }\n    }\n    return obj;\n}\n\nexport function formatDevicesList(data, activeTab) {\n    const response = [];\n    if (Array.isArray(data)) {\n        data.forEach((item) => {\n            response.push(formatDeviceData(item, activeTab))\n        })\n        response['meta'] = getDeviceMeta(activeTab);\n    } else {\n        response.push(formatDeviceData(data, activeTab))\n    }\n    return response\n}\n\nfunction handleSession(item){\n    let res = 'NotScheduled';\n    const sessions = item?.attributes?.sessions?.data;\n    if(sessions?.length){\n        for(let i = 0;i < sessions.length;i++){\n            let el = sessions[i];\n            if(el?.attributes?.status === 'pending' || el?.attributes?.status === 'scheduled'){\n                res = 'Scheduled';\n            }\n        }\n    } else {\n        res = 'NotScheduled';\n    }\n    return res;\n}\n\nfunction formatClientData(item) {\n    const obj = {\n        clientID: (item && item.id) || '',\n        client_id: (item && item.attributes && item.attributes.client_id) || '',\n        clinician_status:\n            item &&\n            item.attributes &&\n            item.attributes.counsellor &&\n            item.attributes?.counsellor?.data\n                ? item.attributes?.counsellor?.data?.attributes?.name\n                : 'Not Assigned',\n        name: (item && item.attributes && item.attributes.name) || '',\n        gender_bio:\n            (item && item.attributes && item.attributes.gender_bio) || '',\n        gender_identified:\n            (item && item.attributes && item.attributes.gender_identified) ||\n            '',\n        license:\n            item &&\n            item.attributes &&\n            item.attributes.license &&\n            item.attributes.license.data\n                ? 'Issued'\n                : 'Not Issued',\n        device_status:\n            item &&\n            item.attributes &&\n            item.attributes.license &&\n            item.attributes.license.data &&\n            item.attributes.license.data.attributes &&\n            item.attributes.license.data.attributes.device &&\n            item.attributes.license.data.attributes.device.data &&\n            item.attributes.license.data.attributes.device.data.id\n                ? item.attributes.license.data.attributes.device.data.attributes.device_id\n                : 'Not Assigned',\n        appointment: handleSession(item)\n    }\n\n    return obj;\n}\n\n\nfunction getPassPhrase(item) {\n    return (\n        (item &&\n            item.attributes &&\n            item.attributes.licenses &&\n            item.attributes.licenses.data &&\n            item.attributes.licenses.data[item.attributes.licenses.data.length-1] &&\n            item.attributes.licenses.data[item.attributes.licenses.data.length-1].attributes &&\n            item.attributes.licenses.data[item.attributes.licenses.data.length-1].attributes.passphrase  &&\n            item.attributes.licenses.data[item.attributes.licenses.data.length-1].attributes.passphrase.data &&\n            item.attributes.licenses.data[item.attributes.licenses.data.length-1].attributes.passphrase.data.attributes && \n            item.attributes.licenses.data[item.attributes.licenses.data.length-1].attributes.passphrase.data.attributes.name\n        ) ||\n        ''\n    )\n}\n\n\nfunction formatDeviceData(item, activeTab) {\n    let obj = {};\n    if(activeTab == 1) {\n        obj = {\n            // id: item.id,\n            device_id: item.attributes.device_id,\n            device_type: item.attributes.device_type,\n            device_serial: item.attributes.device_serial,\n            mac_address: item.attributes.mac_address,\n            is_assigned: String(item.attributes.is_assigned),\n            status: item.attributes.status,\n            owned_by: item.attributes.owned_by,\n            edit_action: `/devices/edit?id=${item.id}`,\n            device_action: {\n                deviceID: item.id,\n                isAssigned: item.attributes.center && item.attributes.center.data ? true : false,\n                center_name: item && item.attributes && item.attributes.center && item.attributes.center.data && item.attributes.center.data && item.attributes.center.data.attributes && item.attributes.center.data.attributes.name || '',\n                owned_by: item.attributes.owned_by,\n            },\n        }\n    } else {\n        obj = {\n            mac_address: item && item.attributes && item.attributes.mac_address || '',\n            ip_address: item && item.attributes && item.attributes.ip_address || '',\n            passphrase: getPassPhrase(item)\n        }\n    }\n    return obj\n}\n\nconst logoBaseUrl = 'http://localhost:1337'\n\nexport function getMetaData(data) {\n    return data.pagination\n}\n\nexport function formatCenters(data) {\n    let response = []\n    if (Array.isArray(data)) {\n        data.forEach((item) => {\n            response.push(formatCenterData(item))\n        })\n    } else {\n        response = formatCenterData(data)\n    }\n\n    return response\n}\n\nfunction formatCenterData(item) {\n    const obj = {\n        id: item.id,\n        centerId:item && item.user && item.user.username,\n        name: item.name,\n        email: item.email,\n        phoneNumber: item.phone_number,\n        firstName: item.first_name,\n        logo: logoBaseUrl + item.logo_image,\n        lastName: item.last_name,\n        country: item.country,\n        state: item.state,\n        city: item.city,\n        postalCode: item.postal_code,\n        areaCode: item.area_code,\n        centerType: item.center_type,\n        verified: item.is_verified,\n        address: getAddress(item.street_address1, item.street_address2),\n        createdAt: moment(item.createdAt).format('DD MMMM, YYYY'),\n    }\n\n    return obj\n}\n\nfunction getAddress(address1, address2) {\n    let fullAddress = address1 + ' ' + address2\n    return fullAddress\n}\n\nexport function formatClients(data) {\n    let response = []\n    if (Array.isArray(data)) {\n        data.forEach((item) => {\n            response.push(formatClientUserData(item));\n        })\n    } else {\n        response = formatClientUserData(data);\n    }\n\n    return response\n}\n\nfunction formatClientUserData(item) {\n    const obj = {\n        id: item && item.id || '',\n        name: item && item.name || '',\n        client_id: item && item.client_id || '',\n        gender_bio: item && item.gender_bio || '',\n        gender_identified: item && item.gender_identified || '',\n        centers: item && item.centers && item.centers.length || '0',\n        counselors: item && item.counsellors && item.counsellors.length || '0',\n        sessions: item && item.sessions && item.sessions.length || '0'\n    };\n    return obj;\n}\n\n","export function formatCouncelorList(data) {\n    const response = []\n    if (Array.isArray(data)) {\n        data.forEach((item) => {\n            if(item && item.user && item.user.confirmed){\n                response.push(formatClinician(item))\n            }\n            \n        })\n    } else {\n        response.push(formatClinician(data))\n    }\n    return response\n}\n\nfunction formatClinician(item){\n    return {\n        name:item?.name,\n        id:item?.id,\n        label:item?.name\n    }\n}\n\nexport function formatTraumaList(data) {\n    const response = []\n    if (Array.isArray(data)) {\n        data.forEach((item) => {\n            response.push(getFormatedData(item))\n        })\n    } else {\n        response.push(getFormatedData(data))\n    }\n    return response\n}\n\nfunction getFormatedData(item){\n    return {\n        traumaCode:item.attributes.trauma_code,\n        traumaName:item.attributes.trauma_name,\n        traumaId:item.id\n    }\n}\n\n\nexport function formatBarrierList(data) {\n    const response = []\n    if (Array.isArray(data)) {\n        data.forEach((item) => {\n            response.push(getFormatedBarrierData(item))\n        })\n    } else {\n        response.push(getFormatedBarrierData(data))\n    }\n    return response\n}\n\nfunction getFormatedBarrierData(item){\n    return {\n        barrierName:item.barrier_name,\n        barrierId:item.id\n    }\n}","import React, { useRef } from 'react'\nimport {\n    Box,\n    Button,\n    Modal,\n    TextField,\n    Typography,\n} from '@mui/material'\nimport { ValidatorForm } from 'react-material-ui-form-validator'\nimport { updateClientTrauma } from 'app/services/clientService'\nimport Autocomplete from '@mui/material/Autocomplete'\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'background.paper',\n    border: '2px solid #fff',\n    boxShadow: 24,\n    p: 4,\n    borderRadius:'15px'\n}\n\nexport default function AssignClinician(props) {\n    const [assignedClinician, setAssignedClinician] = React.useState('')\n    const [initialValue, setInitialValue] = React.useState('')\n    const [submit,setSubmit] = React.useState(false)\n\n    const formEl = useRef()\n    const handleSubmit = () => {\n        setSubmit(true)\n        if(assignedClinician){\n            setSubmit(true)\n        const options = {\n            data: {\n                counsellor: Number(assignedClinician.id),\n            },\n        }\n\n        updateClientTrauma(props.currentClient.clientID, options)\n            .then((resp) => {\n                props.handleSubmit()\n            })\n            .catch((err) => {\n                console.log('error', err)\n            })\n        }\n    }\n    \n    return (\n        <div>\n            <Modal\n                keepMounted\n                open={props.open}\n                onClose={props.handleClose}\n                aria-labelledby=\"keep-mounted-modal-title\"\n                aria-describedby=\"keep-mounted-modal-description\"\n            >\n                <Box sx={style}>\n                    <ValidatorForm\n                        ref={formEl}\n                        onSubmit={handleSubmit}\n                        onError={() => null}\n                    >\n                        <Typography\n                            id=\"keep-mounted-modal-title\"\n                            variant=\"h6\"\n                            component=\"h2\"\n                        >\n                            {'Assign Provider'}\n                        </Typography>\n                        <Box sx={{ minWidth: 300 }}>\n                            <Autocomplete\n                                disablePortal\n                                fullWidth\n                                id=\"combo-box-demo\"\n                                options={props.row || []}\n                                sx={{ width: '100%', padding: '12px 0px' }}\n                                value={initialValue}\n                                onChange={(event, newValue) => {\n                                    setAssignedClinician(newValue)\n                                }}\n                                inputValue={initialValue}\n                                onInputChange={(event, newInputValue) => {\n                                    setInitialValue(newInputValue)\n                                }}\n                                isOptionEqualToValue={(option, value) => true}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Assign Provider*\"\n                                    />\n                                )}\n                            />\n                        </Box>\n                        {\n                            !assignedClinician && submit &&\n                            <span style={{color:\"red\"}}>This field is required</span>\n                        }       \n                        <Box\n                            sx={{\n                                display: 'table',\n                                marginLeft: 'auto',\n                                marginRight: '0px',\n                            }}\n                        >\n                            <Button\n                                color=\"error\"\n                                variant=\"contained\"\n                                onClick={props.handleClose}\n                            >\n                                Cancel\n                            </Button>\n                            <Button\n                                sx={{ ml: 2 }}\n                                type=\"submit\"\n                                variant=\"contained\"\n                            >\n                                Assign\n                            </Button>\n                        </Box>\n                    </ValidatorForm>\n                </Box>\n            </Modal>\n        </div>\n    )\n}\n","import React, { useRef, useState, useEffect} from 'react'\nimport MenuItem from '@mui/material/MenuItem'\nimport { styled } from '@mui/system'\nimport FormControl from '@mui/material/FormControl'\nimport { Box, Button, Modal, Typography } from '@mui/material'\nimport { SelectValidator } from 'react-material-ui-form-validator'\nimport { ValidatorForm } from 'react-material-ui-form-validator'\nimport { createLicense } from 'app/services/clientService'\nimport useAuth from 'app/hooks/useAuth'\nimport moment from 'moment'\nimport { getCenterDetails } from 'app/services/centerService'\n\nconst SelectField = styled(SelectValidator)(() => ({\n    width: '100%',\n    marginBottom: '16px',\n    marginTop: '8px',\n}))\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'background.paper',\n    border: '2px solid #fff',\n    boxShadow: 24,\n    p: 4,\n    borderRadius: '15px',\n}\n\nexport default function IssueLisence(props) {\n    const [state, setState] = useState({\n        deviceType: '',\n    })\n    const [centerData,setCenterData] = useState({})\n    const { user } = useAuth()\n\n    const handleSave = (event) => {\n        const options = {\n            license: {\n                data: {\n                    license_type:\n                        deviceType === 'Loaner' ? 'Limited' : 'Freehold',\n                    client: props.currentClient.clientID,\n                    center: user?.center?.id,\n                    status: deviceType === 'BYOD' ? 'Used' : 'New',\n                    publishedAt:\n                        moment().format().split('T')[0] +\n                        ' ' +\n                        moment().format().split('T')[1].slice(0, 8),\n                },\n            },\n            passphrase: {\n                data: {\n                    used: true,\n                    publishedAt:\n                            moment().format().split('T')[0] +\n                            ' ' +\n                            moment().format().split('T')[1].slice(0, 8),\n                },\n            },\n            device: {\n                data: {\n                    center: user?.center?.id,\n                    publishedAt:\n                        moment().format().split('T')[0] +\n                        ' ' +\n                        moment().format().split('T')[1].slice(0, 8),\n                },\n            },\n            device_type: deviceType,\n            state_code: centerData?.state?.state_id,\n        }\n        createLicense(options)\n            .then((res) => {\n                if (res.status === 'success') {\n                    props.handleSubmit(props.currentClient.clientID)\n                }\n            })\n            .catch((err) => {\n                console.log('error', err)\n            })\n    }\n\n    const handleChange = (event) => {\n        setState({\n            ...state,\n            [event.target.name]: event.target.value,\n        })\n    }\n    const { deviceType } = state\n    const formEl = useRef()\n\n    useEffect(() => {\n        if(user && user.center){\n            getCenterDetails(user?.center?.id)\n            .then((res)=>{\n                setCenterData(res)\n            })\n            .catch(err => {\n                console.log(\"error\",err)\n            })\n            }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n    return (\n        <div>\n            <Modal\n                keepMounted\n                open={props.open}\n                onClose={props.handleClose}\n                aria-labelledby=\"keep-mounted-modal-title\"\n                aria-describedby=\"keep-mounted-modal-description\"\n            >\n                <Box sx={style}>\n                    <ValidatorForm\n                        ref={formEl}\n                        onSubmit={handleSave}\n                        onError={() => null}\n                    >\n                        <Typography\n                            id=\"keep-mounted-modal-title\"\n                            variant=\"h6\"\n                            component=\"h2\"\n                        >\n                            {'Device / License type'}\n                        </Typography>\n                        <Box sx={{ minWidth: 300 }}>\n                            <FormControl fullWidth>\n                                <SelectField\n                                    id=\"demo-simple-select\"\n                                    value={deviceType}\n                                    label=\"Device / License Type*\"\n                                    onChange={handleChange}\n                                    name=\"deviceType\"\n                                    validators={['required']}\n                                    errorMessages={['This field is required']}\n                                >\n                                    <MenuItem value={'Loaner'}>Loaner</MenuItem>\n                                    <MenuItem value={'BYOD'}>BYOD</MenuItem>\n                                </SelectField>\n                            </FormControl>\n                        </Box>\n                        <Box\n                            sx={{\n                                display: 'table',\n                                marginLeft: 'auto',\n                                marginRight: '0px',\n                            }}\n                        >\n                            <Button\n                                color=\"error\"\n                                variant=\"contained\"\n                                onClick={props.handleClose}\n                            >\n                                Cancel\n                            </Button>\n                            <Button\n                                sx={{ ml: 2 }}\n                                type=\"submit\"\n                                variant=\"contained\"\n                            >\n                                Assign\n                            </Button>\n                        </Box>\n                    </ValidatorForm>\n                </Box>\n            </Modal>\n        </div>\n    )\n}\n","import React, { useRef } from 'react'\n// import Dialog from '@mui/material/Dialog'\nimport MenuItem from '@mui/material/MenuItem'\nimport { styled } from '@mui/system'\nimport FormControl from '@mui/material/FormControl'\nimport {\n    Box,\n    Button,\n    // DialogActions,\n    // DialogContent,\n    // DialogTitle,\n    Modal,\n    Typography,\n} from '@mui/material'\nimport { SelectValidator } from 'react-material-ui-form-validator'\nimport { ValidatorForm } from 'react-material-ui-form-validator'\nimport { updateLicense } from 'app/services/clientService';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux'\nimport { resetClient } from 'app/redux/actions/ClientIntakeActions'\nimport SessionModal from 'app/components/SessionModal/SessionModal';\n\nconst SelectField = styled(SelectValidator)(() => ({\n    width: '100%',\n    marginBottom: '16px',\n    marginTop: '8px',\n}))\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'background.paper',\n    border: '2px solid #fff',\n    boxShadow: 24,\n    p: 4,\n    borderRadius:'15px'\n}\n\nexport default function AssignDevice(props) {\n    const navigate = useNavigate();\n    const formEl = useRef();\n    const dispatch = useDispatch();\n    const [assignedDevice, setAssignedDevice] = React.useState('')\n    const [expiry, setExpiry] = React.useState('')\n    const [openModal, setOpenModal] = React.useState(false);\n    const [msg, setMsg] = React.useState('');\n\n    const handleChange = (event) => {\n        setAssignedDevice(event.target.value)\n    }\n\n    const handleSubmit = () => {\n        const options = {\n            data: {\n                device: Number(assignedDevice.id),\n                clientId: props && props.clientId,\n                action: 'Assign'\n            },\n        }\n        \n        updateLicense(props.licenseId, options)\n            .then((resp) => {\n                if(resp?.error?.name === 'UnauthorizedError'){\n                    setOpenModal(true);\n                    setMsg('Your session has expired. You will be logged out.');\n                } else { \n                    props.handleSubmit(assignedDevice)\n                    setAssignedDevice(\"\")\n                }\n            })\n            .catch((err) => {\n                console.log('error', err)\n            })\n    }\n\n    const handleClose = () => {\n        setAssignedDevice(\"\")\n        props.handleClose()\n    }\n\n    \n    return (\n        <div>\n            <Modal\n                keepMounted\n                open={props.open}\n                onClose={props.handleClose}\n                aria-labelledby=\"keep-mounted-modal-title\"\n                aria-describedby=\"keep-mounted-modal-description\"\n            >\n                <Box sx={style}>\n                    <ValidatorForm\n                        ref={formEl}\n                        onSubmit={handleSubmit}\n                        onError={() => null}\n                    >\n                        <Typography\n                            id=\"keep-mounted-modal-title\"\n                            variant=\"h6\"\n                            component=\"h2\"\n                        >\n                            Assign Device\n                        </Typography>\n                        <Box sx={{ minWidth: 300 }}>\n                            <FormControl fullWidth>\n                                <SelectField\n                                    id=\"demo-simple-select\"\n                                    value={assignedDevice}\n                                    label=\"Device to Issue*\"\n                                    onChange={handleChange}\n                                    name=\"state\"\n                                    validators={['required']}\n                                    errorMessages={['This field is required']}\n                                >\n                                    <MenuItem value={''}>\n                                        Device to Issue\n                                    </MenuItem>\n                                    {props.row &&\n                                        props.row.filter(item => !item.is_assigned && item.owned_by === \"bmc\").map((item, i) => (\n                                            <MenuItem\n                                                value={item}\n                                                key={i}\n                                                disabled={item.is_assigned}\n                                            >\n                                                {item.device_id +\n                                                    '-' +\n                                                    item.device_type}\n                                            </MenuItem>\n                                        ))}\n                                </SelectField>\n                            </FormControl>\n                        </Box>\n                        {/* <Box sx={{ minWidth: 300 }}>\n                            <FormControl fullWidth>\n                                <SelectField\n                                    id=\"demo-simple-select\"\n                                    value={expiry}\n                                    label=\"Length of Issue\"\n                                    onChange={(e) => setExpiry(e.target.value)}\n                                    name=\"state\"\n                                    validators={['required']}\n                                    errorMessages={['This field is required']}\n                                >\n                                    <MenuItem value={''}>\n                                        Length of Issue\n                                    </MenuItem>\n                                </SelectField>\n                            </FormControl>\n                        </Box> */}\n\n                        <Box\n                            sx={{\n                                display: 'table',\n                                marginLeft: 'auto',\n                                marginRight: '0px',\n                            }}\n                        >\n                            <Button\n                                color=\"error\"\n                                variant=\"contained\"\n                                onClick={() => {\n                                    dispatch(resetClient())\n                                    handleClose()\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                            <Button\n                                sx={{ ml: 2 }}\n                                type=\"submit\"\n                                variant=\"contained\"\n                            >\n                                Assign\n                            </Button>\n                        </Box>\n                    </ValidatorForm>\n                </Box>\n            </Modal>\n            <SessionModal\n                open={openModal}\n                text={msg}\n                onConfirmDialogClose={() => {\n                    setMsg('');\n                    setOpenModal(false);\n                }}\n                onYesClick={() => {\n                    setMsg('');\n                    setOpenModal(false);\n                }}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport { Box, Button, Grid, Modal } from '@mui/material'\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'background.paper',\n    border: '2px solid #fff',\n    boxShadow: 24,\n    p: 4,\n    borderRadius:'15px'\n}\n\nexport default function DeviceIssueConfirmDialog(props) {\n    return (\n        <div>\n            <Modal\n                keepMounted\n                open={props.open}\n                onClose={props.handleClose}\n                aria-labelledby=\"keep-mounted-modal-title\"\n                aria-describedby=\"keep-mounted-modal-description\"\n            >\n                <Grid\n                    sx={style}\n                    style={{ textAlign: 'center', padding: '10px' }}\n                >\n                    <h2>Congratulations</h2>\n                    <div>\n                        <p>\n                            <strong>{props.clientId}</strong>\n                        </p>\n                        <p>is set to go. Assigned License</p>\n                        <p>\n                            {' '}\n                            <strong>{props.license?.passphrase?.name}</strong>\n                        </p>\n                        <p>to Connect Device</p>\n                        <p>\n                            <strong>{props.deviceType}</strong>\n                        </p>\n                    </div>\n                    <Box style={{ display: 'flex',justifyContent:\"center\" }}>\n                        <Button\n                            variant=\"contained\"\n                            color=\"error\"\n                            onClick={props.handleClose}\n                        >\n                            Cancel\n                        </Button>\n                        <Button variant=\"contained\" sx={{ ml: 2 }}>\n                            Print and issue\n                        </Button>\n                        <Button\n                            variant=\"contained\"\n                            sx={{ ml: 2 }}\n                            // onClick={props.issueDevice}\n                        >\n                            Issue\n                        </Button>\n                    </Box>\n                </Grid>\n            </Modal>\n        </div>\n    )\n}\n","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"component\", \"direction\", \"spacing\", \"divider\", \"children\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { createUnarySpacing, getValue, handleBreakpoints, unstable_extendSxProp as extendSxProp, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { deepmerge } from '@mui/utils';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\n/**\n * Return an array with the separator React element interspersed between\n * each React node of the input children.\n *\n * > joinChildren([1,2,3], 0)\n * [1,0,2,0,3]\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction joinChildren(children, separator) {\n  const childrenArray = React.Children.toArray(children).filter(Boolean);\n  return childrenArray.reduce((output, child, index) => {\n    output.push(child);\n\n    if (index < childrenArray.length - 1) {\n      output.push( /*#__PURE__*/React.cloneElement(separator, {\n        key: `separator-${index}`\n      }));\n    }\n\n    return output;\n  }, []);\n}\n\nconst getSideFromDirection = direction => {\n  return {\n    row: 'Left',\n    'row-reverse': 'Right',\n    column: 'Top',\n    'column-reverse': 'Bottom'\n  }[direction];\n};\n\nexport const style = ({\n  ownerState,\n  theme\n}) => {\n  let styles = _extends({\n    display: 'flex'\n  }, handleBreakpoints({\n    theme\n  }, resolveBreakpointValues({\n    values: ownerState.direction,\n    breakpoints: theme.breakpoints.values\n  }), propValue => ({\n    flexDirection: propValue\n  })));\n\n  if (ownerState.spacing) {\n    const transformer = createUnarySpacing(theme);\n    const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {\n      if (ownerState.spacing[breakpoint] != null || ownerState.direction[breakpoint] != null) {\n        acc[breakpoint] = true;\n      }\n\n      return acc;\n    }, {});\n    const directionValues = resolveBreakpointValues({\n      values: ownerState.direction,\n      base\n    });\n    const spacingValues = resolveBreakpointValues({\n      values: ownerState.spacing,\n      base\n    });\n\n    const styleFromPropValue = (propValue, breakpoint) => {\n      return {\n        '& > :not(style) + :not(style)': {\n          margin: 0,\n          [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: getValue(transformer, propValue)\n        }\n      };\n    };\n\n    styles = deepmerge(styles, handleBreakpoints({\n      theme\n    }, spacingValues, styleFromPropValue));\n  }\n\n  return styles;\n};\nconst StackRoot = styled('div', {\n  name: 'MuiStack',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    return [styles.root];\n  }\n})(style);\nconst Stack = /*#__PURE__*/React.forwardRef(function Stack(inProps, ref) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiStack'\n  });\n  const props = extendSxProp(themeProps);\n\n  const {\n    component = 'div',\n    direction = 'column',\n    spacing = 0,\n    divider,\n    children\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = {\n    direction,\n    spacing\n  };\n  return /*#__PURE__*/_jsx(StackRoot, _extends({\n    as: component,\n    ownerState: ownerState,\n    ref: ref\n  }, other, {\n    children: divider ? joinChildren(children, divider) : children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Stack.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'column'\n   */\n  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n\n  /**\n   * Add an element between each child.\n   */\n  divider: PropTypes.node,\n\n  /**\n   * Defines the space between immediate children.\n   * @default 0\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The system prop, which allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Stack;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ampm\", \"inputFormat\", \"maxDate\", \"maxDateTime\", \"maxTime\", \"minDate\", \"minDateTime\", \"minTime\", \"openTo\", \"orientation\", \"views\"];\nimport { useThemeProps } from '@mui/material/styles';\nimport { useDefaultDates, useUtils } from '../internals/hooks/useUtils';\nimport { pick12hOr24hFormat } from '../internals/utils/text-field-helper';\nexport function useDateTimePickerDefaultizedProps(_ref, name) {\n  let {\n    ampm,\n    inputFormat,\n    maxDate: maxDateProp,\n    maxDateTime,\n    maxTime,\n    minDate: minDateProp,\n    minDateTime,\n    minTime,\n    openTo = 'day',\n    orientation = 'portrait',\n    views = ['year', 'day', 'hours', 'minutes']\n  } = _ref,\n      other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const utils = useUtils();\n  const defaultDates = useDefaultDates();\n  const minDate = minDateProp != null ? minDateProp : defaultDates.minDate;\n  const maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;\n  const willUseAmPm = ampm != null ? ampm : utils.is12HourCycleInCurrentLocale();\n\n  if (orientation !== 'portrait') {\n    throw new Error('We are not supporting custom orientation for DateTimePicker yet :(');\n  }\n\n  return useThemeProps({\n    props: _extends({\n      openTo,\n      views,\n      ampm: willUseAmPm,\n      ampmInClock: true,\n      orientation,\n      showToolbar: true,\n      allowSameDateSelection: true,\n      minDate: minDateTime != null ? minDateTime : minDate,\n      minTime: minDateTime != null ? minDateTime : minTime,\n      maxDate: maxDateTime != null ? maxDateTime : maxDate,\n      maxTime: maxDateTime != null ? maxDateTime : maxTime,\n      disableIgnoringDatePartForTimeValidation: Boolean(minDateTime || maxDateTime),\n      acceptRegex: willUseAmPm ? /[\\dap]/gi : /\\d/gi,\n      mask: '__/__/____ __:__',\n      disableMaskedInput: willUseAmPm,\n      inputFormat: pick12hOr24hFormat(inputFormat, willUseAmPm, {\n        localized: utils.formats.keyboardDateTime,\n        '12h': utils.formats.keyboardDateTime12h,\n        '24h': utils.formats.keyboardDateTime24h\n      })\n    }, other),\n    name\n  });\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"selected\", \"value\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport Typography from '@mui/material/Typography';\nimport { styled } from '@mui/material/styles';\nimport { generateUtilityClasses } from '@mui/material';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst classes = generateUtilityClasses('PrivatePickersToolbarText', ['selected']);\nconst PickersToolbarTextRoot = styled(Typography)(({\n  theme\n}) => ({\n  transition: theme.transitions.create('color'),\n  color: theme.palette.text.secondary,\n  [`&.${classes.selected}`]: {\n    color: theme.palette.text.primary\n  }\n}));\nexport const PickersToolbarText = /*#__PURE__*/React.forwardRef(function PickersToolbarText(props, ref) {\n  const {\n    className,\n    selected,\n    value\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  return /*#__PURE__*/_jsx(PickersToolbarTextRoot, _extends({\n    ref: ref,\n    className: clsx(className, selected && classes.selected),\n    component: \"span\"\n  }, other, {\n    children: value\n  }));\n});","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"align\", \"className\", \"selected\", \"typographyClassName\", \"value\", \"variant\"];\nimport * as React from 'react';\nimport Button from '@mui/material/Button';\nimport { styled } from '@mui/material/styles';\nimport { PickersToolbarText } from './PickersToolbarText';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst PickersToolbarButtonRoot = styled(Button)({\n  padding: 0,\n  minWidth: 16,\n  textTransform: 'none'\n});\nexport const PickersToolbarButton = /*#__PURE__*/React.forwardRef(function PickersToolbarButton(props, ref) {\n  const {\n    align,\n    className,\n    selected,\n    typographyClassName,\n    value,\n    variant\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  return /*#__PURE__*/_jsx(PickersToolbarButtonRoot, _extends({\n    variant: \"text\",\n    ref: ref,\n    className: className\n  }, other, {\n    children: /*#__PURE__*/_jsx(PickersToolbarText, {\n      align: align,\n      className: typographyClassName,\n      variant: variant,\n      value: value,\n      selected: selected\n    })\n  }));\n});","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport Tab from '@mui/material/Tab';\nimport Tabs, { tabsClasses } from '@mui/material/Tabs';\nimport { styled } from '@mui/material/styles';\nimport { Time, DateRange } from '../internals/components/icons';\nimport { WrapperVariantContext } from '../internals/components/wrappers/WrapperVariantContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst viewToTab = openView => {\n  if (['day', 'month', 'year'].includes(openView)) {\n    return 'date';\n  }\n\n  return 'time';\n};\n\nconst tabToView = tab => {\n  if (tab === 'date') {\n    return 'day';\n  }\n\n  return 'hours';\n};\n\nconst DateTimePickerTabsRoot = styled(Tabs)(({\n  ownerState,\n  theme\n}) => _extends({\n  boxShadow: `0 -1px 0 0 inset ${theme.palette.divider}`\n}, ownerState.wrapperVariant === 'desktop' && {\n  order: 1,\n  boxShadow: `0 1px 0 0 inset ${theme.palette.divider}`,\n  [`& .${tabsClasses.indicator}`]: {\n    bottom: 'auto',\n    top: 0\n  }\n}));\n/**\n * @ignore - internal component.\n */\n\nexport const DateTimePickerTabs = props => {\n  const {\n    dateRangeIcon = /*#__PURE__*/_jsx(DateRange, {}),\n    onChange,\n    timeIcon = /*#__PURE__*/_jsx(Time, {}),\n    view\n  } = props;\n  const wrapperVariant = React.useContext(WrapperVariantContext);\n\n  const ownerState = _extends({}, props, {\n    wrapperVariant\n  });\n\n  const handleChange = (event, value) => {\n    onChange(tabToView(value));\n  };\n\n  return /*#__PURE__*/_jsxs(DateTimePickerTabsRoot, {\n    ownerState: ownerState,\n    variant: \"fullWidth\",\n    value: viewToTab(view),\n    onChange: handleChange,\n    children: [/*#__PURE__*/_jsx(Tab, {\n      value: \"date\",\n      \"aria-label\": \"pick date\",\n      icon: /*#__PURE__*/_jsx(React.Fragment, {\n        children: dateRangeIcon\n      })\n    }), /*#__PURE__*/_jsx(Tab, {\n      value: \"time\",\n      \"aria-label\": \"pick time\",\n      icon: /*#__PURE__*/_jsx(React.Fragment, {\n        children: timeIcon\n      })\n    })]\n  });\n};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ampm\", \"date\", \"dateRangeIcon\", \"hideTabs\", \"isMobileKeyboardViewOpen\", \"onChange\", \"openView\", \"setOpenView\", \"timeIcon\", \"toggleMobileKeyboardView\", \"toolbarFormat\", \"toolbarPlaceholder\", \"toolbarTitle\", \"views\"];\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { generateUtilityClasses } from '@mui/material';\nimport { PickersToolbarText } from '../internals/components/PickersToolbarText';\nimport { PickersToolbar } from '../internals/components/PickersToolbar';\nimport { PickersToolbarButton } from '../internals/components/PickersToolbarButton';\nimport { DateTimePickerTabs } from './DateTimePickerTabs';\nimport { useUtils } from '../internals/hooks/useUtils';\nimport { WrapperVariantContext } from '../internals/components/wrappers/WrapperVariantContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst classes = generateUtilityClasses('PrivateDateTimePickerToolbar', ['penIcon']);\nconst DateTimePickerToolbarRoot = styled(PickersToolbar)({\n  paddingLeft: 16,\n  paddingRight: 16,\n  justifyContent: 'space-around',\n  [`& .${classes.penIcon}`]: {\n    position: 'absolute',\n    top: 8,\n    right: 8\n  }\n});\nconst DateTimePickerToolbarDateContainer = styled('div')({\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'flex-start'\n});\nconst DateTimePickerToolbarTimeContainer = styled('div')({\n  display: 'flex'\n});\nconst DateTimePickerToolbarSeparator = styled(PickersToolbarText)({\n  margin: '0 4px 0 2px',\n  cursor: 'default'\n});\n/**\n * @ignore - internal component.\n */\n\nexport const DateTimePickerToolbar = props => {\n  const {\n    ampm,\n    date,\n    dateRangeIcon,\n    hideTabs,\n    isMobileKeyboardViewOpen,\n    openView,\n    setOpenView,\n    timeIcon,\n    toggleMobileKeyboardView,\n    toolbarFormat,\n    toolbarPlaceholder = '––',\n    toolbarTitle = 'Select date & time',\n    views\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const utils = useUtils();\n  const wrapperVariant = React.useContext(WrapperVariantContext);\n  const showTabs = wrapperVariant === 'desktop' ? true : !hideTabs && typeof window !== 'undefined' && window.innerHeight > 667;\n\n  const formatHours = time => ampm ? utils.format(time, 'hours12h') : utils.format(time, 'hours24h');\n\n  const dateText = React.useMemo(() => {\n    if (!date) {\n      return toolbarPlaceholder;\n    }\n\n    if (toolbarFormat) {\n      return utils.formatByString(date, toolbarFormat);\n    }\n\n    return utils.format(date, 'shortDate');\n  }, [date, toolbarFormat, toolbarPlaceholder, utils]);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [wrapperVariant !== 'desktop' && /*#__PURE__*/_jsxs(DateTimePickerToolbarRoot, _extends({\n      toolbarTitle: toolbarTitle,\n      penIconClassName: classes.penIcon,\n      isMobileKeyboardViewOpen: isMobileKeyboardViewOpen,\n      toggleMobileKeyboardView: toggleMobileKeyboardView\n    }, other, {\n      isLandscape: false,\n      children: [/*#__PURE__*/_jsxs(DateTimePickerToolbarDateContainer, {\n        children: [views.includes('year') && /*#__PURE__*/_jsx(PickersToolbarButton, {\n          tabIndex: -1,\n          variant: \"subtitle1\",\n          onClick: () => setOpenView('year'),\n          selected: openView === 'year',\n          value: date ? utils.format(date, 'year') : '–'\n        }), views.includes('day') && /*#__PURE__*/_jsx(PickersToolbarButton, {\n          tabIndex: -1,\n          variant: \"h4\",\n          onClick: () => setOpenView('day'),\n          selected: openView === 'day',\n          value: dateText\n        })]\n      }), /*#__PURE__*/_jsxs(DateTimePickerToolbarTimeContainer, {\n        children: [views.includes('hours') && /*#__PURE__*/_jsx(PickersToolbarButton, {\n          variant: \"h3\",\n          onClick: () => setOpenView('hours'),\n          selected: openView === 'hours',\n          value: date ? formatHours(date) : '--'\n        }), views.includes('minutes') && /*#__PURE__*/_jsxs(React.Fragment, {\n          children: [/*#__PURE__*/_jsx(DateTimePickerToolbarSeparator, {\n            variant: \"h3\",\n            value: \":\"\n          }), /*#__PURE__*/_jsx(PickersToolbarButton, {\n            variant: \"h3\",\n            onClick: () => setOpenView('minutes'),\n            selected: openView === 'minutes',\n            value: date ? utils.format(date, 'minutes') : '--'\n          })]\n        }), views.includes('seconds') && /*#__PURE__*/_jsxs(React.Fragment, {\n          children: [/*#__PURE__*/_jsx(DateTimePickerToolbarSeparator, {\n            variant: \"h3\",\n            value: \":\"\n          }), /*#__PURE__*/_jsx(PickersToolbarButton, {\n            variant: \"h3\",\n            onClick: () => setOpenView('seconds'),\n            selected: openView === 'seconds',\n            value: date ? utils.format(date, 'seconds') : '--'\n          })]\n        })]\n      })]\n    })), showTabs && /*#__PURE__*/_jsx(DateTimePickerTabs, {\n      dateRangeIcon: dateRangeIcon,\n      timeIcon: timeIcon,\n      view: openView,\n      onChange: setOpenView\n    })]\n  });\n};","import { createIsAfterIgnoreDatePart } from '../../utils/time-utils';\nimport { useValidation } from './useValidation';\nexport const validateTime = (utils, value, {\n  minTime,\n  maxTime,\n  shouldDisableTime,\n  disableIgnoringDatePartForTimeValidation\n}) => {\n  const date = utils.date(value);\n  const isAfterComparingFn = createIsAfterIgnoreDatePart(Boolean(disableIgnoringDatePartForTimeValidation), utils);\n\n  if (value === null) {\n    return null;\n  }\n\n  switch (true) {\n    case !utils.isValid(value):\n      return 'invalidDate';\n\n    case Boolean(minTime && isAfterComparingFn(minTime, date)):\n      return 'minTime';\n\n    case Boolean(maxTime && isAfterComparingFn(date, maxTime)):\n      return 'maxTime';\n\n    case Boolean(shouldDisableTime && shouldDisableTime(utils.getHours(date), 'hours')):\n      return 'shouldDisableTime-hours';\n\n    case Boolean(shouldDisableTime && shouldDisableTime(utils.getMinutes(date), 'minutes')):\n      return 'shouldDisableTime-minutes';\n\n    case Boolean(shouldDisableTime && shouldDisableTime(utils.getSeconds(date), 'seconds')):\n      return 'shouldDisableTime-seconds';\n\n    default:\n      return null;\n  }\n};\n\nconst isSameTimeError = (a, b) => a === b;\n\nexport const useTimeValidation = props => useValidation(props, validateTime, isSameTimeError);","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"minDate\", \"maxDate\", \"disableFuture\", \"shouldDisableDate\", \"disablePast\"];\nimport { useValidation } from './useValidation';\nimport { validateDate } from './useDateValidation';\nimport { validateTime } from './useTimeValidation';\nexport const validateDateTime = (utils, value, _ref) => {\n  let {\n    minDate,\n    maxDate,\n    disableFuture,\n    shouldDisableDate,\n    disablePast\n  } = _ref,\n      timeValidationProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const dateValidationResult = validateDate(utils, value, {\n    minDate,\n    maxDate,\n    disableFuture,\n    shouldDisableDate,\n    disablePast\n  });\n\n  if (dateValidationResult !== null) {\n    return dateValidationResult;\n  }\n\n  return validateTime(utils, value, timeValidationProps);\n};\n\nconst isSameDateTimeError = (a, b) => a === b;\n\nexport function useDateTimeValidation(props) {\n  return useValidation(props, validateDateTime, isSameDateTimeError);\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onChange\", \"PopperProps\", \"ToolbarComponent\", \"TransitionComponent\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDateTimePickerDefaultizedProps } from '../DateTimePicker/shared';\nimport { DateTimePickerToolbar } from '../DateTimePicker/DateTimePickerToolbar';\nimport { DesktopWrapper } from '../internals/components/wrappers/DesktopWrapper';\nimport { CalendarOrClockPicker } from '../internals/components/CalendarOrClockPicker';\nimport { useDateTimeValidation } from '../internals/hooks/validation/useDateTimeValidation';\nimport { parsePickerInputValue } from '../internals/utils/date-utils';\nimport { KeyboardDateInput } from '../internals/components/KeyboardDateInput';\nimport { usePickerState } from '../internals/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst valueManager = {\n  emptyValue: null,\n  parseInput: parsePickerInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)\n};\n\n/**\n *\n * Demos:\n *\n * - [Date Time Picker](https://mui.com/components/x/react-date-pickers/date-time-picker/)\n *\n * API:\n *\n * - [DesktopDateTimePicker API](https://mui.com/api/desktop-date-time-picker/)\n */\nexport const DesktopDateTimePicker = /*#__PURE__*/React.forwardRef(function DesktopDateTimePicker(inProps, ref) {\n  // TODO: TDate needs to be instantiated at every usage.\n  const props = useDateTimePickerDefaultizedProps(inProps, 'MuiDesktopDateTimePicker');\n  const validationError = useDateTimeValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(props, valueManager);\n\n  const {\n    PopperProps,\n    ToolbarComponent = DateTimePickerToolbar,\n    TransitionComponent\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const AllDateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError\n  });\n\n  return /*#__PURE__*/_jsx(DesktopWrapper, _extends({}, wrapperProps, {\n    DateInputProps: AllDateInputProps,\n    KeyboardDateInputComponent: KeyboardDateInput,\n    PopperProps: PopperProps,\n    TransitionComponent: TransitionComponent,\n    children: /*#__PURE__*/_jsx(CalendarOrClockPicker, _extends({}, pickerProps, {\n      autoFocus: true,\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: AllDateInputProps\n    }, other))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DesktopDateTimePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default false\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, it shows the clear action in the picker dialog.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n\n  /**\n   * Clear text message.\n   * @default 'Clear'\n   */\n  clearText: PropTypes.node,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Date tab icon.\n   */\n  dateRangeIcon: PropTypes.node,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @param {ClockPickerView} view The current view rendered.\n   * @param {TDate | null} time The current time.\n   * @param {MuiPickersAdapter<TDate>} adapter The current date adapter.\n   * @returns {string} The clock label.\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   * @param {ParseableDate<TDateValue>} value The date from which we want to add an aria-text.\n   * @param {MuiPickersAdapter<TDateValue>} utils The utils to manipulate the date.\n   * @returns {string} The aria-text to render inside the dialog.\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   * @param {CalendarPickerView} currentView The view from which we want to get the button text.\n   * @returns {string} The label of the view.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * To show tabs.\n   */\n  hideTabs: PropTypes.bool,\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Minimal selectable moment of time with binding to date, to set max time in each day use `maxTime`.\n   */\n  maxDateTime: PropTypes.any,\n\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.\n   */\n  minDateTime: PropTypes.any,\n\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   * @param {TDateValue} date The date that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   * @param {DateRange<TDate>} date The new parsed date.\n   * @param {string} keyboardInputValue The current value of the keyboard input.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   *\n   * @param {TError} reason The reason why the current value is not valid.\n   * @param {TDateValue} value The invalid value.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   * @param {TDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @param {CalendarOrClockPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Callback firing on year change @DateIOType.\n   * @param {TDate} year The new year.\n   */\n  onYearChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'seconds', 'year']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Paper props passed down to [Paper](https://mui.com/api/paper/) component.\n   */\n  PaperProps: PropTypes.object,\n\n  /**\n   * Popper props passed down to [Popper](https://mui.com/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for day. Check the [PickersDay](https://mui.com/api/pickers-day/) component.\n   * @param {TDate} day The day to render.\n   * @param {Array<TDate | null>} selectedDates The dates currently selected.\n   * @param {PickersDayProps<TDate>} pickersDayProps The props of the day to render.\n   * @returns {JSX.Element} The element representing the day.\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   * @param {MuiTextFieldPropsType} props The props of the input.\n   * @returns {React.ReactNode} The node to render as the input.\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   * @param {string} str The un-formatted string.\n   * @returns {string} The formatted string.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   * @param {TDate} day The date to check.\n   * @returns {boolean} If `true` the day will be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   * @param {number} timeValue The value to check.\n   * @param {ClockPickerView} clockType The clock type of the timeValue.\n   * @returns {boolean} Returns `true` if the time should be disabled\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   * @param {TDate} year The year to test.\n   * @returns {boolean} Return `true` if the year should be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Time tab icon.\n   */\n  timeIcon: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default DateTimePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date & time'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * Custom component for popper [Transition](https://mui.com/components/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'seconds', 'year']).isRequired)\n} : void 0;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ToolbarComponent\", \"value\", \"onChange\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDateTimePickerDefaultizedProps } from '../DateTimePicker/shared';\nimport { DateTimePickerToolbar } from '../DateTimePicker/DateTimePickerToolbar';\nimport { MobileWrapper } from '../internals/components/wrappers/MobileWrapper';\nimport { CalendarOrClockPicker } from '../internals/components/CalendarOrClockPicker';\nimport { useDateTimeValidation } from '../internals/hooks/validation/useDateTimeValidation';\nimport { parsePickerInputValue } from '../internals/utils/date-utils';\nimport { PureDateInput } from '../internals/components/PureDateInput';\nimport { usePickerState } from '../internals/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst valueManager = {\n  emptyValue: null,\n  parseInput: parsePickerInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)\n};\n\n/**\n *\n * Demos:\n *\n * - [Date Time Picker](https://mui.com/components/x/react-date-pickers/date-time-picker/)\n *\n * API:\n *\n * - [MobileDateTimePicker API](https://mui.com/api/mobile-date-time-picker/)\n */\nexport const MobileDateTimePicker = /*#__PURE__*/React.forwardRef(function MobileDateTimePicker(inProps, ref) {\n  // TODO: TDate needs to be instantiated at every usage.\n  const props = useDateTimePickerDefaultizedProps(inProps, 'MuiMobileDateTimePicker');\n  const validationError = useDateTimeValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(props, valueManager); // Note that we are passing down all the value without spread.\n  // It saves us >1kb gzip and make any prop available automatically on any level down.\n\n  const {\n    ToolbarComponent = DateTimePickerToolbar\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const DateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError\n  });\n\n  return /*#__PURE__*/_jsx(MobileWrapper, _extends({}, other, wrapperProps, {\n    DateInputProps: DateInputProps,\n    PureDateInputComponent: PureDateInput,\n    children: /*#__PURE__*/_jsx(CalendarOrClockPicker, _extends({}, pickerProps, {\n      autoFocus: true,\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: DateInputProps\n    }, other))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? MobileDateTimePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default false\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Cancel text message.\n   * @default 'Cancel'\n   */\n  cancelText: PropTypes.node,\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, it shows the clear action in the picker dialog.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n\n  /**\n   * Clear text message.\n   * @default 'Clear'\n   */\n  clearText: PropTypes.node,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Date tab icon.\n   */\n  dateRangeIcon: PropTypes.node,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * Props applied to the [`Dialog`](/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @param {ClockPickerView} view The current view rendered.\n   * @param {TDate | null} time The current time.\n   * @param {MuiPickersAdapter<TDate>} adapter The current date adapter.\n   * @returns {string} The clock label.\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   * @param {ParseableDate<TDateValue>} value The date from which we want to add an aria-text.\n   * @param {MuiPickersAdapter<TDateValue>} utils The utils to manipulate the date.\n   * @returns {string} The aria-text to render inside the dialog.\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   * @param {CalendarPickerView} currentView The view from which we want to get the button text.\n   * @returns {string} The label of the view.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * To show tabs.\n   */\n  hideTabs: PropTypes.bool,\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Minimal selectable moment of time with binding to date, to set max time in each day use `maxTime`.\n   */\n  maxDateTime: PropTypes.any,\n\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.\n   */\n  minDateTime: PropTypes.any,\n\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Ok button text.\n   * @default 'OK'\n   */\n  okText: PropTypes.node,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   * @param {TDateValue} date The date that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   * @param {DateRange<TDate>} date The new parsed date.\n   * @param {string} keyboardInputValue The current value of the keyboard input.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   *\n   * @param {TError} reason The reason why the current value is not valid.\n   * @param {TDateValue} value The invalid value.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   * @param {TDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @param {CalendarOrClockPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Callback firing on year change @DateIOType.\n   * @param {TDate} year The new year.\n   */\n  onYearChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'seconds', 'year']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for day. Check the [PickersDay](https://mui.com/api/pickers-day/) component.\n   * @param {TDate} day The day to render.\n   * @param {Array<TDate | null>} selectedDates The dates currently selected.\n   * @param {PickersDayProps<TDate>} pickersDayProps The props of the day to render.\n   * @returns {JSX.Element} The element representing the day.\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   * @param {MuiTextFieldPropsType} props The props of the input.\n   * @returns {React.ReactNode} The node to render as the input.\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   * @param {string} str The un-formatted string.\n   * @returns {string} The formatted string.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   * @param {TDate} day The date to check.\n   * @returns {boolean} If `true` the day will be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   * @param {number} timeValue The value to check.\n   * @param {ClockPickerView} clockType The clock type of the timeValue.\n   * @returns {boolean} Returns `true` if the time should be disabled\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   * @param {TDate} year The year to test.\n   * @returns {boolean} Return `true` if the year should be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, the today button is displayed. **Note** that `showClearButton` has a higher priority.\n   * @default false\n   */\n  showTodayButton: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Time tab icon.\n   */\n  timeIcon: PropTypes.node,\n\n  /**\n   * Today text message.\n   * @default 'Today'\n   */\n  todayText: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default DateTimePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date & time'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'seconds', 'year']).isRequired)\n} : void 0;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"cancelText\", \"clearable\", \"clearText\", \"desktopModeMediaQuery\", \"DialogProps\", \"okText\", \"PopperProps\", \"showTodayButton\", \"todayText\", \"TransitionComponent\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useThemeProps } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { DesktopDateTimePicker } from '../DesktopDateTimePicker';\nimport { MobileDateTimePicker } from '../MobileDateTimePicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/**\n *\n * Demos:\n *\n * - [Date Time Picker](https://mui.com/components/x/react-date-pickers/date-time-picker/)\n * - [Pickers](https://mui.com/x/react-date-pickers/)\n *\n * API:\n *\n * - [DateTimePicker API](https://mui.com/api/date-time-picker/)\n */\nconst DateTimePicker = /*#__PURE__*/React.forwardRef(function DateTimePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDateTimePicker'\n  });\n\n  const {\n    cancelText,\n    clearable,\n    clearText,\n    desktopModeMediaQuery = '@media (pointer: fine)',\n    DialogProps,\n    okText,\n    PopperProps,\n    showTodayButton,\n    todayText,\n    TransitionComponent\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const isDesktop = useMediaQuery(desktopModeMediaQuery);\n  return isDesktop ? /*#__PURE__*/_jsx(DesktopDateTimePicker, _extends({\n    ref: ref,\n    PopperProps: PopperProps,\n    TransitionComponent: TransitionComponent\n  }, other)) : /*#__PURE__*/_jsx(MobileDateTimePicker, _extends({\n    ref: ref,\n    cancelText: cancelText,\n    clearable: clearable,\n    clearText: clearText,\n    DialogProps: DialogProps,\n    okText: okText,\n    showTodayButton: showTodayButton,\n    todayText: todayText\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DateTimePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default false\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Cancel text message.\n   * @default 'Cancel'\n   */\n  cancelText: PropTypes.node,\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, it shows the clear action in the picker dialog.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n\n  /**\n   * Clear text message.\n   * @default 'Clear'\n   */\n  clearText: PropTypes.node,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Date tab icon.\n   */\n  dateRangeIcon: PropTypes.node,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\n   * @default '@media (pointer: fine)'\n   * @example '@media (min-width: 720px)' or theme.breakpoints.up(\"sm\")\n   */\n  desktopModeMediaQuery: PropTypes.string,\n\n  /**\n   * Props applied to the [`Dialog`](/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @param {ClockPickerView} view The current view rendered.\n   * @param {TDate | null} time The current time.\n   * @param {MuiPickersAdapter<TDate>} adapter The current date adapter.\n   * @returns {string} The clock label.\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   * @param {ParseableDate<TDateValue>} value The date from which we want to add an aria-text.\n   * @param {MuiPickersAdapter<TDateValue>} utils The utils to manipulate the date.\n   * @returns {string} The aria-text to render inside the dialog.\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   * @param {CalendarPickerView} currentView The view from which we want to get the button text.\n   * @returns {string} The label of the view.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * To show tabs.\n   */\n  hideTabs: PropTypes.bool,\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Minimal selectable moment of time with binding to date, to set max time in each day use `maxTime`.\n   */\n  maxDateTime: PropTypes.any,\n\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.\n   */\n  minDateTime: PropTypes.any,\n\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Ok button text.\n   * @default 'OK'\n   */\n  okText: PropTypes.node,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   * @param {TDateValue} date The date that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   * @param {DateRange<TDate>} date The new parsed date.\n   * @param {string} keyboardInputValue The current value of the keyboard input.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   *\n   * @param {TError} reason The reason why the current value is not valid.\n   * @param {TDateValue} value The invalid value.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   * @param {TDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @param {CalendarOrClockPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Callback firing on year change @DateIOType.\n   * @param {TDate} year The new year.\n   */\n  onYearChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'seconds', 'year']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Paper props passed down to [Paper](https://mui.com/api/paper/) component.\n   */\n  PaperProps: PropTypes.object,\n\n  /**\n   * Popper props passed down to [Popper](https://mui.com/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for day. Check the [PickersDay](https://mui.com/api/pickers-day/) component.\n   * @param {TDate} day The day to render.\n   * @param {Array<TDate | null>} selectedDates The dates currently selected.\n   * @param {PickersDayProps<TDate>} pickersDayProps The props of the day to render.\n   * @returns {JSX.Element} The element representing the day.\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/api/text-field/#textfield-api) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   * @param {MuiTextFieldPropsType} props The props of the input.\n   * @returns {React.ReactNode} The node to render as the input.\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   * @param {string} str The un-formatted string.\n   * @returns {string} The formatted string.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   * @param {TDate} day The date to check.\n   * @returns {boolean} If `true` the day will be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   * @param {number} timeValue The value to check.\n   * @param {ClockPickerView} clockType The clock type of the timeValue.\n   * @returns {boolean} Returns `true` if the time should be disabled\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   * @param {TDate} year The year to test.\n   * @returns {boolean} Return `true` if the year should be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, the today button is displayed. **Note** that `showClearButton` has a higher priority.\n   * @default false\n   */\n  showTodayButton: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Time tab icon.\n   */\n  timeIcon: PropTypes.node,\n\n  /**\n   * Today text message.\n   * @default 'Today'\n   */\n  todayText: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default DateTimePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date & time'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * Custom component for popper [Transition](https://mui.com/components/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'seconds', 'year']).isRequired)\n} : void 0;\nexport { DateTimePicker };","import React from 'react'\n// import Dialog from '@mui/material/Dialog'\nimport {\n    Alert,\n    Box,\n    Button,\n    // DialogActions,\n    // DialogContent,\n    // DialogTitle,\n    Modal,\n    Snackbar,\n    Typography,\n} from '@mui/material'\nimport Stack from '@mui/material/Stack'\nimport TextField from '@mui/material/TextField'\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns'\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider'\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker'\nimport moment from 'moment'\nimport useAuth from 'app/hooks/useAuth'\nimport { createSession } from 'app/services/clientService'\nimport { DesktopDatePicker, TimePicker } from '@mui/lab'\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'background.paper',\n    border: '2px solid #fff',\n    boxShadow: 24,\n    p: 4,\n    borderRadius: '15px',\n}\n\nexport default function SceduleAppointment(props) {\n    const [value, setValue] = React.useState(\"\")\n    const [error, setError] = React.useState(false)\n    const [timeError, setTimeError] = React.useState(false)\n    const [open, setOpen] = React.useState(false)\n    const { user } = useAuth()\n    \n\n    const handleChange = (newValue) => {\n        setTimeError(false)\n        if (moment(newValue) < moment()) {\n            setError(true)\n        } else {\n            setError(false)\n        }\n        if (\n            props?.row?.counsellor?.sessions &&\n            props?.row?.counsellor?.sessions.length > 0\n        ) {\n            props?.row?.counsellor?.sessions.forEach((element) => {\n                let a = moment.duration(\n                    moment(newValue).diff(moment(element.scheduled_at))\n                )\n                if (\n                    Number(a.asMinutes()) <= 50 &&\n                    Number(a.asMinutes()) > -10\n                ) {\n                    setTimeError(true)\n                }\n            })\n        }\n        setValue(newValue)\n    }\n \n    const handleSubmit = () => {\n        if (!error) {\n            const options = {\n                session: {\n                    data: {\n                        client: props.row.id,\n                        case_id: props?.row?.client_id,\n                        session_id: 218,\n                        scheduled_at:\n                            moment(value).format().split('T')[0] +\n                            ' ' +\n                            moment(value).format().split('T')[1].slice(0, 8),\n                        duration: 50,\n                        status: 'pending',\n                        counsellor: props?.row?.counsellor?.id,\n                        center: user?.center?.id,\n                        publishedAt:\n                            moment().format().split('T')[0] +\n                            ' ' +\n                            moment().format().split('T')[1].slice(0, 8),\n                    },\n                },\n                center_type_id: props.row?.center?.center_type?.center_type_id,\n                state_id: props.row?.center?.state?.id,\n            }\n            if(!timeError){\n                createSession(options)\n                .then((resp) => {\n                    setValue(\"\")\n                    props.handleSubmit()\n                })\n                .catch((err) => {\n                    console.log('error', err)\n                })\n            }else{\n                setOpen(true)\n            }\n                \n        }\n    }\n    return (\n        <div>\n            <Modal\n                keepMounted\n                open={props.open}\n                onClose={props.handleClose}\n                aria-labelledby=\"keep-mounted-modal-title\"\n                aria-describedby=\"keep-mounted-modal-description\"\n            >\n                <Box sx={style}>\n                    <Typography\n                        id=\"keep-mounted-modal-title\"\n                        variant=\"h6\"\n                        component=\"h2\"\n                    >\n                        Scheduled appointment\n                    </Typography>\n                    <Box sx={{ minWidth: 300, padding: '20px 0px' }}>\n                        <LocalizationProvider dateAdapter={AdapterDateFns}>\n                            <Stack spacing={3}>\n                                <DateTimePicker\n                                    label=\"Date&Time picker\"\n                                    value={value}\n                                    onChange={handleChange}\n                                    disablePast={true}\n                                    renderInput={(params) => (\n                                        <TextField {...params} />\n                                    )}\n                                />\n                            </Stack>\n                        </LocalizationProvider>\n                        {error && (\n                            <span style={{ color: 'red' }}>\n                                Only future time is allowed\n                            </span>\n                        )}\n                    </Box>\n\n                    <Box\n                        sx={{\n                            display: 'table',\n                            marginLeft: 'auto',\n                            marginRight: '0px',\n                        }}\n                    >\n                        <Button\n                            color=\"error\"\n                            variant=\"contained\"\n                            onClick={() => {\n                                props.handleClose()\n                            }}\n                        >\n                            Cancel\n                        </Button>\n                        <Button\n                            sx={{ ml: 2 }}\n                            type=\"submit\"\n                            variant=\"contained\"\n                            onClick={handleSubmit}\n                        >\n                            Schedule\n                        </Button>\n                    </Box>\n                </Box>\n            </Modal>\n            <Snackbar\n                open={open}\n                anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n                autoHideDuration={3000}\n                onClose={() => {\n                    setOpen(false)\n                }}\n            >\n                <Alert\n                    onClose={() => {\n                        setOpen(false)\n                    }}\n                    variant=\"filled\"\n                    severity=\"error\"\n                    sx={{ width: '100%' }}\n                >\n                    {\n                        'This time slot has already been scheduled, which may lead to conflicts.'\n                    }\n                </Alert>\n            </Snackbar>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport {\n    Grid,\n    Box,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    Alert,\n    Button\n} from '@mui/material'\nimport TextField from '@mui/material/TextField';\nimport { useNavigate } from 'react-router-dom';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { Breadcrumb } from 'app/components';\nimport { formatClientsList, getMetaData } from 'app/utils/center.list.formatter';\nimport {\n    fetchClients,\n    fetchClicians,\n    fetchClient,\n    findClients,\n    getClientDetails\n} from 'app/services/clientService';\nimport Loading from 'app/components/MatxLoading/MatxLoading';\nimport UsersCustomTable from 'app/components/UsersCustomTable/UsersCustomTable';\nimport './Clients.css';\nimport AssignClinician from 'app/components/AssignDialog/AssignClinician';\nimport useAuth from 'app/hooks/useAuth'\nimport Snackbar from '@mui/material/Snackbar';\nimport IssueLisence from 'app/components/AssignDialog/IssueLisence';\nimport AssignDevice from 'app/components/AssignDialog/AssignDevice';\nimport DeviceIssueConfirmDialog from 'app/components/AssignDialog/DeviceIssueConfirmDialog';\nimport { formatCouncelorList } from 'app/utils/client.list.formatter';\nimport SceduleAppointment from 'app/components/AssignDialog/SceduleAppointment';\nimport { useDispatch } from 'react-redux';\nimport { resetClient } from 'app/redux/actions/ClientIntakeActions';\nimport SessionModal from 'app/components/SessionModal/SessionModal';\n\nconst Clients = () => {\n    const navigate = useNavigate();\n    const {user} = useAuth()\n    const dispatch = useDispatch();\n\n    const [rows, setRows] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const page = 1;\n    const [pageDetails, setPageDetails] = useState({});\n    const [searchResult, setSearchResult] = useState(false);\n    const [filterResult, setFilterResult] = useState(false);\n    const [searchData, setSearchData] = useState(\"\");\n    const [clinicians,setClinicians] = useState([])\n    const [devices,setDevices] = useState([])\n    const [type, setType] = useState({ \n        clinician: \"All\", \n        device: \"All\" \n    });\n    const [open,setOpen] = useState(false)\n    const [schedule,setSchedule] = useState(false)\n    const [error,setError] = useState(false)\n    const [currentClient,setCurrentClient] = useState({})\n    const [currentClientDetails,setCurrentClientDetails] = useState({})\n    const [currentLicense,setCurrentLicense] = useState({})\n    const [addClinician,setAddClinician] = useState(false)\n    const [success,setSuccess] = useState(false)\n    const [issueLicense,setIssueLicense] = useState(false)\n    const [assignDevice,setAssignDevice] = useState(false)\n    const [assignDeviceSuccess,setAssignDeviceSuccess] = useState(false)\n    const [assignedDevice,setAssignedDevice] = useState(\"\")\n    const [openModal, setOpenModal] = useState(false);\n    const [msg, setMsg] = useState('');\n\n    console.log('');\n    useEffect(() => {\n        dispatch(resetClient())\n        getAllClients(page);\n        if( user && user.center && user.center.id){\n            getAllClinicians(user?.center?.id)\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [dispatch]);\n\n    function getAllClinicians(id){\n        setLoading(true);\n        fetchClicians(id)\n        .then(resp =>{\n            setLoading(false);\n            if(resp?.error?.name === 'UnauthorizedError'){\n                setOpenModal(true);\n                setMsg('Your session has expired. You will be logged out.');\n            } else {\n                if(resp && resp.counsellors){\n                    setClinicians(formatCouncelorList(resp.counsellors));\n                }\n                if(resp && resp.devices){\n                    setDevices(resp.devices);\n                }\n            }\n        })\n        .catch(err => {\n            console.log(\"error\",err)\n        })\n    }\n\n    function getAllClients(pageNumber) {\n        setLoading(true);\n        fetchClients(pageNumber)\n        .then(resp => {\n            setLoading(false);\n            if(resp?.error?.name === 'UnauthorizedError'){\n                setOpenModal(true);\n                setMsg('Your session has expired. You will be logged out.');\n            } else {\n                setRows(formatClientsList(resp.data));\n                setPageDetails(getMetaData(resp.meta));\n            }\n        })\n    }\n\n    function sortClients(search, type, pageNo) {\n        findClients(search, type, pageNo)\n        .then(resp => {\n            setLoading(false);\n            if(resp?.error?.name === 'UnauthorizedError'){\n                setOpenModal(true);\n                setMsg('Your session has expired. You will be logged out.');\n            } else {\n                setRows(formatClientsList(resp.data));\n                setPageDetails(getMetaData(resp.meta));\n            }\n        })\n    } \n\n    const handleSearch = ({ target: { value }}) => {\n        setSearchData(value);\n        if(value && value.length > 2){\n            setSearchResult(true);\n            // searchClient(value, page);\n            sortClients(value, type, page);\n        } else if(value === \"\") {\n            if(type.clinician === 'All' && type.device === 'All'){\n                getAllClients(page);\n                setSearchResult(false);\n                setFilterResult(false);\n            } else {\n                setFilterResult(true);\n                sortClients('', type, page);\n            }\n            \n        }\n    }\n\n\n    const handleChange = ({ target: { value }}, filterType) => {\n        if(filterType === 'clinician'){\n            setType({ ...type, clinician: value});\n        } else {\n            setType({ ...type, device: value });\n        }\n\n        if(filterType === 'clinician'){\n            if(value === 'All' && type.device === 'All'){\n                if(searchData) {\n                    setSearchResult(true);\n                    sortClients(searchData, {clinician: 'All', device: 'All'}, page);\n                } else {\n                    setFilterResult(false);\n                    getAllClients(page);\n                }\n            } else {\n                setFilterResult(true);\n                sortClients(searchData, {clinician: value, device: type.device }, page);\n            }\n        } else {\n            if(type.clinician === 'All' && value === 'All'){\n                if(searchData) {\n                    setSearchResult(true);\n                    sortClients(searchData, {clinician: 'All', device: 'All'}, page);\n                } else {\n                    setFilterResult(false);\n                    getAllClients(page);\n                }\n            } else {\n                setFilterResult(true);\n                sortClients(searchData, { clinician: type.clinician, device: value }, page);\n            }\n        }\n    }\n\n    const handlePageChange = (event, newPage) => {\n        if(searchResult || filterResult){\n            sortClients(searchData, type, Number(newPage)+1);\n        } else {\n            getAllClients(newPage + 1);\n        }\n    }\n\n    const onClick = (id) => {\n        navigate(`/client/details/${id}`, {id: id});\n    }\n\n    const assignClinician = (row) => {\n        if(clinicians && clinicians.length !== 0){\n            setCurrentClient(row)\n            setAddClinician(true)\n        }else{\n            setError(`No clinicians added to ${user?.center?.name}`)\n            setOpen(true)\n        }\n    }\n\n    const fetchCurrentLicense = (id) => {\n        fetchClient(id)\n        .then(resp => {\n            if(resp?.error?.name === 'UnauthorizedError'){\n                setOpenModal(true);\n                setMsg('Your session has expired. You will be logged out.');\n            } else {\n                if(resp && resp.license){\n                    setCurrentLicense(resp.license)\n                    if(resp.license?.license_type === \"Freehold\"){\n                        setAssignedDevice(resp.license.device)\n                        setAssignDeviceSuccess(true)\n                    }else{\n                        let filteredDevice = devices.filter(item => !item.is_assigned && item.owned_by === \"bmc\")\n                        if(filteredDevice && filteredDevice.length > 0){\n                            setAssignDevice(true)\n                        }else{\n                            setError(`There are no available device for ${user?.center?.name}`)\n                            setOpen(true)\n                        }\n                        \n                    }\n                    \n                }\n            }\n        })\n    }\n\n    const issueLisence = (row) => {\n        setCurrentClient(row)\n        setIssueLicense(true)\n\n    }\n\n    const handleSubmit = () => {\n        setAddClinician(false)\n        setAssignDeviceSuccess(false)\n        getAllClients(page);\n        setIssueLicense(false)\n    }\n\n    const handleScheduleSubmit = () => {\n        setSchedule(false)\n        getAllClients(page);\n        setSuccess(true)\n    }\n    const handleDeviceSubmit = (id,deviceType) => {\n        getAllClients(page);\n        setIssueLicense(false)\n        fetchCurrentLicense(id)\n    }\n\n    const intakeDeviceSuccess = (assignedDevice) => {\n        setAssignDevice(false)\n        setAssignedDevice(assignedDevice)\n        getAllClients(page);\n        getAllClinicians(user?.center?.id)\n        setAssignDeviceSuccess(true)\n    }\n\n    const scheduleSession = (row) => {\n        getClientDetails(row.clientID)\n        .then(resp => {\n            if(resp?.error?.name === 'UnauthorizedError'){\n                setOpenModal(true);\n                setMsg('Your session has expired. You will be logged out.');\n            } else {\n                if(!resp.counsellor){\n                    setError(`Provider is not assigned`)\n                    setOpen(true)\n                }else{\n                    if(resp.license && resp.license.device){\n                        setCurrentClientDetails(resp)\n                        setSchedule(true)\n                    }else{\n                        setError(`Device is not assigned`)\n                        setOpen(true)\n                    }\n                    \n                }\n            }\n            \n        })\n        \n    }\n\n    const issueDevices = (row) => {\n        setAddClinician(false)\n        if(devices && devices.length !== 0){\n            setCurrentClient(row)\n            if(row && row.license === \"Issued\"){\n                fetchCurrentLicense(row.clientID)\n            }\n        }else{\n            setError(`No devices added to ${user?.center?.name}`)\n            setOpen(true)\n        }\n    }\n\n    const handleReset = () => {\n        setSearchData('');\n        setType({\n            clinician: 'All',\n            device: 'All'\n        })\n        setSearchResult(false);\n        setFilterResult(false);\n        getAllClients(page);\n        if(user && user.center){\n            getAllClinicians(user?.center?.id)\n        }\n    }\n\n    return (\n        <Grid container className=\"client-container\">\n            <Grid className=\"client-breadcrumb\">\n                <Breadcrumb routeSegments={[{ name: 'All Clients' }]} />\n            </Grid>\n\n            <Grid className=\"client-box\" sx={{ marginTop: '20px' }}>\n                <TextField\n                    label=\"Search Client\"\n                    variant=\"outlined\"\n                    className=\"client-search\"\n                    value={searchData}\n                    onChange={handleSearch}\n                    placeholder=\"Search client\"\n                    type=\"text\"\n                    InputProps={{\n                        startAdornment: <SearchIcon />,\n                    }}\n                />\n\n                <Box sx={{ minWidth: '40%' }} className=\"select-role\">\n                    <FormControl fullWidth>\n                        <InputLabel\n                            sx={{\n                                backgroundColor: '#fafafa',\n                                padding: '0.25rem',\n                            }}\n                        >\n                            Provider Status\n                        </InputLabel>\n                        <Select\n                            id=\"demo-simple-select\"\n                            value={type.clinician}\n                            label=\"Age\"\n                            onChange={(e) => handleChange(e, 'clinician')}\n                        >\n                            <MenuItem value={'All'}>All</MenuItem>\n                            <MenuItem value={'unassigned'}>Unassigned</MenuItem>\n                            <MenuItem value={'assigned'}>Assigned</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Box>\n\n\n            </Grid>\n\n            <Grid className=\"client-box\">\n                <Box sx={{ minWidth: '40%' }}>\n                    <FormControl fullWidth>\n                        <InputLabel\n                            sx={{\n                                backgroundColor: '#fafafa',\n                                padding: '0.25rem',\n                            }}\n                        >\n                            Device Status\n                        </InputLabel>\n                        <Select\n                            id=\"demo-simple-select\"\n                            value={type.device}\n                            label=\"Age\"\n                            onChange={(e) => handleChange(e, 'device')}\n                        >\n                            <MenuItem value={'All'}>All</MenuItem>\n                            <MenuItem value={'unassigned'}>Unassigned</MenuItem>\n                            <MenuItem value={'assigned'}>Assigned</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Box>\n            </Grid>\n\n            <FormControl sx={{ marginBottom: '20px', display: 'flex', width: '100%' }}>\n                <Button\n                    color=\"primary\"\n                    variant='contained'\n                    onClick={handleReset}\n                    sx={{ alignSelf: 'flex-end'}}\n                >\n                    Reset\n                </Button>\n            </FormControl>\n\n            {loading && <Loading />}\n\n            {!loading && rows.meta && (\n                <UsersCustomTable\n                    onClick={onClick}\n                    page={page}\n                    pageDetails={pageDetails}\n                    handlePageChange={handlePageChange}\n                    rows={rows}\n                    assignClinician={assignClinician}\n                    issueLisence={issueLisence}\n                    issueDevices={issueDevices}\n                    scheduleSession={scheduleSession}\n                    view={'client'}\n                />\n            )}\n\n            <AssignClinician\n                open={addClinician}\n                row={clinicians}\n                handleClose={() => setAddClinician(false)}\n                handleSubmit={handleSubmit}\n                currentClient={currentClient}\n            />\n\n            <IssueLisence\n                open={issueLicense}\n                handleClose={() => setIssueLicense(false)}\n                handleSubmit={handleDeviceSubmit}\n                currentClient={currentClient}\n                issueDevice={issueDevices}\n            />\n            <AssignDevice\n                open={assignDevice}\n                row={devices}\n                handleClose={() => setAssignDevice(false)}\n                handleSubmit={intakeDeviceSuccess}\n                clientId={currentClient.clientID}\n                licenseId={currentLicense.id}\n            />\n            <DeviceIssueConfirmDialog\n                open={assignDeviceSuccess}\n                clientId={currentClient.client_id}\n                license={currentLicense}\n                handleClose={handleSubmit}\n                deviceType={\n                    currentLicense.license_type === \"Freehold\"\n                        ? 'BYOD'\n                        : assignedDevice.device_id +\n                          '-' +\n                          assignedDevice.device_type\n                }\n            />\n\n            <SceduleAppointment\n                open={schedule}\n                handleClose={() => {setSchedule(false)}}  \n                handleSubmit={handleScheduleSubmit}  \n                row={currentClientDetails}\n            />\n\n            <Snackbar\n                open={open}\n                anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n                autoHideDuration={3000}\n                onClose={() => {\n                    setOpen(false)\n                }}\n            >\n                <Alert\n                    onClose={() => {\n                        setOpen(false)\n                    }}\n                    variant=\"filled\"\n                    severity=\"error\"\n                    sx={{ width: '100%' }}\n                >\n                    {error}\n                </Alert>\n            </Snackbar>\n            <Snackbar\n                open={success}\n                anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n                autoHideDuration={3000}\n                onClose={() => {\n                    setSuccess(false)\n                }}\n            >\n                <Alert\n                    onClose={() => {\n                        setSuccess(false)\n                    }}\n                    variant=\"filled\"\n                    severity=\"success\"\n                    sx={{ width: '100%' }}\n                >\n                    Appoint has been scheduled\n                </Alert>\n            </Snackbar>\n            <SessionModal\n                open={openModal}\n                text={msg}\n                onConfirmDialogClose={() => {\n                    setMsg('');\n                    setOpenModal(false);\n                }}\n                onYesClick={() => {\n                    setMsg('');\n                    setOpenModal(false);\n                }}\n            />\n        </Grid>\n    )\n}\n\nexport default Clients;"],"sourceRoot":""}