{"version":3,"sources":["app/views/sessions/ResetPassword.jsx"],"names":["FlexBox","styled","Box","display","alignItems","JustifyBox","justifyContent","ContentBox","height","padding","position","background","ResetPasswordRoot","minHeight","maxWidth","borderRadius","margin","ResetPassword","navigate","useNavigate","useState","password","confirmPassword","state","setState","token","setToken","useEffect","window","location","href","split","ValidatorForm","addValidationRule","value","removeValidationRule","handleChange","target","name","className","sx","width","container","item","lg","md","sm","xs","onSubmit","event","data","resetPassword","then","resp","status","toast","success","message","theme","setTimeout","error","mb","variant","label","onChange","type","size","validators","errorMessages","color","mr","ml","textTransform","onClick","autoClose","hideProgressBar","newestOnTop"],"mappings":"gQAUMA,EAAUC,YAAOC,IAAPD,EAAY,iBAAO,CAC/BE,QAAS,OACTC,WAAY,aAGVC,EAAaJ,YAAOD,EAAPC,EAAgB,iBAAO,CACtCK,eAAgB,aAGdC,EAAaN,YAAOC,IAAPD,EAAY,iBAAO,CAClCO,OAAQ,OACRC,QAAS,OACTC,SAAU,WACVC,WAAY,0BAGVC,EAAoBX,YAAOI,EAAPJ,EAAmB,iBAAO,CAChDU,WAAY,UACZE,UAAW,mBACX,UAAW,CACPC,SAAU,IACVC,aAAc,GACdC,OAAQ,YA4HDC,UAxHO,WAClB,IAAMC,EAAWC,cACjB,EAA0BC,mBAAS,CAAEC,SAAU,GAAIC,gBAAiB,KAApE,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAGAC,qBAAU,WACN,IAAIF,EAAQG,OAAOC,SAASC,KAAKC,MAAM,KAAK,GAC5CL,EAASD,KACV,IAGHE,qBAAU,WAQN,OAPAK,gBAAcC,kBAAkB,mBAAmB,SAACC,GAChD,OAAGA,IAAUX,EAAMF,YAMhB,WACHW,gBAAcG,qBAAqB,sBAExC,CAACZ,IAEJ,IAAMa,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMJ,EAAc,EAAdA,MACpCV,EAAS,2BACFD,GADC,kBAEHe,EAAOJ,MA2BVb,EAA8BE,EAA9BF,SAAUC,EAAoBC,EAApBD,gBAGhB,OACI,eAACV,EAAD,WACI,cAAC,IAAD,CAAM2B,UAAU,OAAOC,GAAI,CAAEC,MAAO,SAApC,SACI,cAAC,IAAD,CAAMC,WAAS,EAAf,SACA,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAvC,SACI,cAACxC,EAAD,UACI,eAAC,gBAAD,CAAeyC,SAhCV,SAACC,GACtB,IAAMC,EAAO,CACT7B,WACAI,SAGJ0B,YAAcD,GACTE,MAAK,SAAAC,GACEA,GAAwB,YAAhBA,EAAKC,QACbC,IAAMC,QAAQH,EAAKI,QAAS,CACxBC,MAAO,YAEXC,YAAW,WACPzC,EAAS,qBACV,MACImC,GAAwB,SAAhBA,EAAKC,QACpBC,IAAMK,MAAMP,EAAKI,QAAS,CACtBC,MAAO,gBAeP,UACI,cAAC,gBAAD,CACIlB,GAAI,CAAEqB,GAAI,EAAGpB,MAAO,QACpBqB,QAAQ,WACRC,MAAM,WACNC,SAAU5B,EACV6B,KAAK,WACL3B,KAAK,WACL4B,KAAK,QACLhC,MAAOb,GAAY,GACnB8C,WAAY,CAAC,YACbC,cAAe,CAAC,4BAEpB,cAAC,gBAAD,CACI5B,GAAI,CAAEqB,GAAI,EAAGpB,MAAO,QACpBqB,QAAQ,WACRC,MAAM,mBACNC,SAAU5B,EACV6B,KAAK,WACL3B,KAAK,kBACL4B,KAAK,QACLhC,MAAOZ,GAAmB,GAC1B6C,WAAY,CAAC,WAAY,mBACzBC,cAAe,CAAC,yBAA0B,4BAE9C,eAACpE,EAAD,WACI,cAAC,IAAD,CACI8D,QAAQ,YACRO,MAAM,UACNJ,KAAK,SAHT,4BAOA,cAAC,IAAD,CAAMzB,GAAI,CAAE8B,GAAI,EAAGC,GAAI,QAAvB,gBACA,cAAC,IAAD,CACI/B,GAAI,CAAEgC,cAAe,cACrBC,QAAS,kBAAMvD,EAAS,oBAF5B,mCAYpB,cAAC,IAAD,CACIR,SAAS,aACTgE,UAAW,IACXC,iBAAiB,EACjBC,aAAa","file":"static/js/86.ab8d35c0.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Box, styled } from '@mui/system'\nimport { useNavigate } from 'react-router-dom'\nimport { Span } from 'app/components/Typography'\nimport { Card, Grid, Button } from '@mui/material'\nimport { TextValidator, ValidatorForm } from 'react-material-ui-form-validator'\nimport { resetPassword } from 'app/services/userService';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst FlexBox = styled(Box)(() => ({\n    display: 'flex',\n    alignItems: 'center',\n}))\n\nconst JustifyBox = styled(FlexBox)(() => ({\n    justifyContent: 'center',\n}))\n\nconst ContentBox = styled(Box)(() => ({\n    height: '100%',\n    padding: '32px',\n    position: 'relative',\n    background: 'rgba(0, 0, 0, 0.01)',\n}))\n\nconst ResetPasswordRoot = styled(JustifyBox)(() => ({\n    background: '#1A2038',\n    minHeight: '100vh !important',\n    '& .card': {\n        maxWidth: 800,\n        borderRadius: 12,\n        margin: '1rem',\n    },\n}))\n\nconst ResetPassword = () => {\n    const navigate = useNavigate();\n    const [state, setState] = useState({ password: '', confirmPassword: '' });\n    const [token, setToken] = useState('');\n\n    // ComponentDidMount()\n    useEffect(() => {\n        let token = window.location.href.split('=')[1];\n        setToken(token);\n    }, []);\n\n\n    useEffect(() => {\n        ValidatorForm.addValidationRule('isPasswordMatch', (value) => {\n            if(value !== state.password) {\n                return false;\n            }\n            return true;\n        });\n\n        return () => {\n            ValidatorForm.removeValidationRule('isPasswordMatch');\n        }\n    }, [state]);\n\n    const handleChange = ({ target: { name, value } }) => {\n        setState({\n            ...state,\n            [name]: value,\n        })\n    }\n\n    const handleFormSubmit = (event) => {\n        const data = {\n            password,\n            token\n        }\n\n        resetPassword(data)\n            .then(resp => {\n                if (resp && resp.status === 'success') {\n                    toast.success(resp.message, {\n                        theme: 'colored'\n                    });\n                    setTimeout(() => {\n                        navigate(\"/session/signin\"); \n                    }, 3000);\n                } else if (resp && resp.status === 'fail') {\n                    toast.error(resp.message, {\n                        theme: 'colored'\n                    });\n                }\n        })\n    }\n\n    let { password, confirmPassword } = state\n\n\n    return (\n        <ResetPasswordRoot>\n            <Card className=\"card\" sx={{ width: '360px' }}>\n                <Grid container>\n                <Grid item lg={12} md={12} sm={12} xs={12}>\n                    <ContentBox>\n                        <ValidatorForm onSubmit={handleFormSubmit}>\n                            <TextValidator\n                                sx={{ mb: 3, width: '100%' }}\n                                variant=\"outlined\"\n                                label=\"Password\"\n                                onChange={handleChange}\n                                type=\"password\"\n                                name=\"password\"\n                                size=\"small\"\n                                value={password || ''}\n                                validators={['required']}\n                                errorMessages={['This field is required']}\n                            />\n                            <TextValidator\n                                sx={{ mb: 3, width: '100%' }}\n                                variant=\"outlined\"\n                                label=\"Confirm Password\"\n                                onChange={handleChange}\n                                type=\"password\"\n                                name=\"confirmPassword\"\n                                size=\"small\"\n                                value={confirmPassword || ''}\n                                validators={['required', 'isPasswordMatch']}\n                                errorMessages={['This field is required', 'Password did not match']}\n                            />\n                            <FlexBox>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    type=\"submit\"\n                                >\n                                    Reset Password\n                                </Button>\n                                <Span sx={{ mr: 1, ml: '16px' }}>or</Span>\n                                <Button\n                                    sx={{ textTransform: 'capitalize' }}\n                                    onClick={() => navigate(\"/session/signin\")}\n                                >\n                                    Sign in\n                                </Button>\n                            </FlexBox>\n                        </ValidatorForm>\n                    </ContentBox>\n                </Grid>\n                </Grid>    \n            </Card>\n            <ToastContainer\n                position=\"top-center\"\n                autoClose={3000}\n                hideProgressBar={true}\n                newestOnTop={false}\n            />\n        </ResetPasswordRoot>\n    )\n}\n\nexport default ResetPassword;"],"sourceRoot":""}